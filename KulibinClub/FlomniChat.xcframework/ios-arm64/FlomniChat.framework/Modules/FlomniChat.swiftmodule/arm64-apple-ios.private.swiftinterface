// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.3.300 clang-1600.0.20.10)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name FlomniChat
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AdSupport
import AppTrackingTransparency
import Combine
import CommonCrypto
import Compression
import CoreAudio
import CoreData
import CoreFoundation
import CoreHaptics
import CoreImage
import CoreLocation
import CoreMedia
import CoreServices
import DeveloperToolsSupport
import Dispatch
import Foundation
import MobileCoreServices
import NaturalLanguage
import Network
import Photos
import RegexBuilder
import SafariServices
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers
import UserNotifications
import UserNotificationsUI
import _AVKit_SwiftUI
import _Concurrency
import _MapKit_SwiftUI
import _PhotosUI_SwiftUI
import _QuickLook_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
import zlib
final public class Container : FlomniChat.SharedContainer {
  public static let shared: FlomniChat.Container
  final public let manager: FlomniChat.ContainerManager
  public init()
  @objc deinit
}
public protocol SharedContainer : FlomniChat.ManagedContainer {
  static var shared: Self { get }
}
public protocol ManagedContainer : AnyObject {
  var manager: FlomniChat.ContainerManager { get }
}
extension FlomniChat.ManagedContainer {
  @inline(__always) public func callAsFunction<T>(key: Swift.StaticString = #function, _ factory: @escaping () -> T) -> FlomniChat.Factory<T>
  @inline(__always) public func callAsFunction<P, T>(key: Swift.StaticString = #function, _ factory: @escaping (P) -> T) -> FlomniChat.ParameterFactory<P, T>
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func promised<T>(key: Swift.StaticString = #function) -> FlomniChat.Factory<T?>
  #else
  public func promised<T>(key: Swift.StaticString = #function) -> FlomniChat.Factory<T?>
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func promised<P, T>(key: Swift.StaticString = #function) -> FlomniChat.ParameterFactory<P, T?>
  #else
  public func promised<P, T>(key: Swift.StaticString = #function) -> FlomniChat.ParameterFactory<P, T?>
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func decorator(_ decorator: ((Any) -> Swift.Void)?)
  #else
  public func decorator(_ decorator: ((Any) -> Swift.Void)?)
  #endif
  @inlinable public func reset(options: FlomniChat.FactoryResetOptions = .all) {
        manager.reset(options: options)
    }
  @discardableResult
  public func with(_ transform: (Self) -> Swift.Void) -> Self
}
final public class ContainerManager {
  public init()
  final public var defaultScope: FlomniChat.Scope?
  @objc deinit
}
extension FlomniChat.ContainerManager {
  final public func reset(options: FlomniChat.FactoryResetOptions = .all)
  final public func reset(scope: FlomniChat.Scope)
  final public func push()
  final public func pop()
}
public protocol AutoRegistering {
  func autoRegister()
}
public enum FactoryContextType : Swift.Equatable {
  case arg(Swift.String)
  case args([Swift.String])
  case preview
  case test
  case debug
  case simulator
  case device
  public static func == (a: FlomniChat.FactoryContextType, b: FlomniChat.FactoryContextType) -> Swift.Bool
}
public struct FactoryContext {
  public var arguments: [Swift.String]
  public var runtimeArguments: [Swift.String : Swift.String]
  public var isPreview: Swift.Bool
  public var isTest: Swift.Bool
  public var isSimulator: Swift.Bool
  public var isDebug: Swift.Bool
}
extension FlomniChat.FactoryContext {
  public static var current: FlomniChat.FactoryContext
}
extension FlomniChat.FactoryContext {
  public static func setArg(_ arg: Swift.String, forKey key: Swift.String)
  public static func removeArg(forKey key: Swift.String)
}
public struct Factory<T> : FlomniChat.FactoryModifying {
  public init(_ container: any FlomniChat.ManagedContainer, key: Swift.StaticString = #function, _ factory: @escaping () -> T)
  public func callAsFunction() -> T
  public func resolve() -> T
  @discardableResult
  public func register(factory: @escaping () -> T) -> FlomniChat.Factory<T>
  public var registration: FlomniChat.FactoryRegistration<Swift.Void, T>
  public typealias P = Swift.Void
}
public struct ParameterFactory<P, T> : FlomniChat.FactoryModifying {
  public init(_ container: any FlomniChat.ManagedContainer, key: Swift.StaticString = #function, _ factory: @escaping (P) -> T)
  public func callAsFunction(_ parameters: P) -> T
  public func resolve(_ parameters: P) -> T
  @discardableResult
  public func register(factory: @escaping (P) -> T) -> FlomniChat.ParameterFactory<P, T>
  public var registration: FlomniChat.FactoryRegistration<P, T>
}
@propertyWrapper public struct Injected<T> {
  public init(_ keyPath: Swift.KeyPath<FlomniChat.Container, FlomniChat.Factory<T>>)
  public init<C>(_ keyPath: Swift.KeyPath<C, FlomniChat.Factory<T>>) where C : FlomniChat.SharedContainer
  public var wrappedValue: T {
    get
    set
  }
  public var projectedValue: FlomniChat.Injected<T> {
    get
    set
  }
  public var factory: FlomniChat.Factory<T> {
    get
  }
  public mutating func resolve(reset options: FlomniChat.FactoryResetOptions = .none)
}
@propertyWrapper public struct LazyInjected<T> {
  public init(_ keyPath: Swift.KeyPath<FlomniChat.Container, FlomniChat.Factory<T>>)
  public init<C>(_ keyPath: Swift.KeyPath<C, FlomniChat.Factory<T>>) where C : FlomniChat.SharedContainer
  public var wrappedValue: T {
    mutating get
    set
  }
  public var projectedValue: FlomniChat.LazyInjected<T> {
    get
    set
  }
  public var factory: FlomniChat.Factory<T> {
    get
  }
  public mutating func resolve(reset options: FlomniChat.FactoryResetOptions = .none)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func resolvedOrNil() -> T?
  #else
  public func resolvedOrNil() -> T?
  #endif
}
@propertyWrapper public struct WeakLazyInjected<T> {
  public init(_ keyPath: Swift.KeyPath<FlomniChat.Container, FlomniChat.Factory<T>>)
  public init<C>(_ keyPath: Swift.KeyPath<C, FlomniChat.Factory<T>>) where C : FlomniChat.SharedContainer
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var wrappedValue: T? {
    mutating get
    set
  }
  #else
  public var wrappedValue: T? {
    mutating get
    set
  }
  #endif
  public var projectedValue: FlomniChat.WeakLazyInjected<T> {
    get
    set
  }
  public var factory: FlomniChat.Factory<T> {
    get
  }
  public mutating func resolve(reset options: FlomniChat.FactoryResetOptions = .none)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func resolvedOrNil() -> T?
  #else
  public func resolvedOrNil() -> T?
  #endif
}
@propertyWrapper public struct InjectedType<T> {
  public init()
  public init(_ container: any FlomniChat.ManagedContainer)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var wrappedValue: T? {
    get
    set
  }
  #else
  public var wrappedValue: T? {
    get
    set
  }
  #endif
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen @propertyWrapper @_Concurrency.MainActor @preconcurrency public struct InjectedObject<T> : SwiftUICore.DynamicProperty where T : Combine.ObservableObject {
  @_Concurrency.MainActor @preconcurrency private var _dependency: SwiftUI.StateObject<T>
  @_Concurrency.MainActor @preconcurrency public init(_ keyPath: Swift.KeyPath<FlomniChat.Container, FlomniChat.Factory<T>>)
  @_Concurrency.MainActor @preconcurrency public init<C>(_ keyPath: Swift.KeyPath<C, FlomniChat.Factory<T>>) where C : FlomniChat.SharedContainer
  @_Concurrency.MainActor @preconcurrency public var wrappedValue: T {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var projectedValue: SwiftUI.ObservedObject<T>.Wrapper {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension FlomniChat.InjectedObject {
  @_Concurrency.MainActor @preconcurrency public init(_ wrappedValue: T)
}
public protocol FactoryModifying {
  associatedtype P
  associatedtype T
  var registration: FlomniChat.FactoryRegistration<Self.P, Self.T> { get set }
}
extension FlomniChat.FactoryModifying {
  @discardableResult
  public func scope(_ scope: FlomniChat.Scope) -> Self
  public var cached: Self {
    get
  }
  public var graph: Self {
    get
  }
  public var shared: Self {
    get
  }
  public var singleton: Self {
    get
  }
  public var unique: Self {
    get
  }
  @discardableResult
  public func timeToLive(_ seconds: Foundation.TimeInterval) -> Self
}
extension FlomniChat.FactoryModifying {
  @discardableResult
  public func decorator(_ decorator: @escaping (_ instance: Self.T) -> Swift.Void) -> Self
}
extension FlomniChat.FactoryModifying {
  @discardableResult
  public func context(_ contexts: FlomniChat.FactoryContextType..., factory: @escaping (Self.P) -> Self.T) -> Self
  @discardableResult
  public func onArg(_ argument: Swift.String, factory: @escaping (Self.P) -> Self.T) -> Self
  @discardableResult
  public func onArgs(_ args: [Swift.String], factory: @escaping (Self.P) -> Self.T) -> Self
  @discardableResult
  public func onPreview(factory: @escaping (Self.P) -> Self.T) -> Self
  @discardableResult
  public func onTest(factory: @escaping (Self.P) -> Self.T) -> Self
  @discardableResult
  public func onDebug(factory: @escaping (Self.P) -> Self.T) -> Self
  @discardableResult
  public func onSimulator(factory: @escaping (Self.P) -> Self.T) -> Self
  @discardableResult
  public func onDevice(factory: @escaping (Self.P) -> Self.T) -> Self
}
extension FlomniChat.FactoryModifying {
  @discardableResult
  public func once() -> Self
}
extension FlomniChat.FactoryModifying {
  @discardableResult
  public func reset(_ options: FlomniChat.FactoryResetOptions = .all) -> Self
}
public struct FactoryRegistration<P, T> {
}
public enum FactoryResetOptions {
  case all
  case none
  case registration
  case context
  case scope
  public static func == (a: FlomniChat.FactoryResetOptions, b: FlomniChat.FactoryResetOptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func resolve<T>(_ keyPath: Swift.KeyPath<FlomniChat.Container, FlomniChat.Factory<T>>) -> T
public func resolve<C, T>(_ keyPath: Swift.KeyPath<C, FlomniChat.Factory<T>>) -> T where C : FlomniChat.SharedContainer
public protocol Resolving : FlomniChat.ManagedContainer {
  func register<T>(_ type: T.Type, factory: @escaping () -> T) -> FlomniChat.Factory<T>
  #if compiler(>=5.3) && $NoncopyableGenerics
  func factory<T>(_ type: T.Type) -> FlomniChat.Factory<T>?
  #else
  func factory<T>(_ type: T.Type) -> FlomniChat.Factory<T>?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func resolve<T>(_ type: T.Type) -> T?
  #else
  func resolve<T>(_ type: T.Type) -> T?
  #endif
}
extension FlomniChat.Resolving {
  @discardableResult
  public func register<T>(_ type: T.Type = T.self, factory: @escaping () -> T) -> FlomniChat.Factory<T>
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func factory<T>(_ type: T.Type = T.self) -> FlomniChat.Factory<T>?
  #else
  public func factory<T>(_ type: T.Type = T.self) -> FlomniChat.Factory<T>?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func resolve<T>(_ type: T.Type = T.self) -> T?
  #else
  public func resolve<T>(_ type: T.Type = T.self) -> T?
  #endif
}
@_hasMissingDesignatedInitializers public class Scope {
  @objc deinit
}
extension FlomniChat.Scope {
  public static let cached: FlomniChat.Scope.Cached
  @_inheritsConvenienceInitializers final public class Cached : FlomniChat.Scope {
    public init()
    @objc deinit
  }
  public static let graph: FlomniChat.Scope.Graph
  @_inheritsConvenienceInitializers final public class Graph : FlomniChat.Scope {
    public init()
    @objc deinit
  }
  public static let shared: FlomniChat.Scope.Shared
  @_inheritsConvenienceInitializers final public class Shared : FlomniChat.Scope {
    public init()
    @objc deinit
  }
  public static let singleton: FlomniChat.Scope.Singleton
  @_inheritsConvenienceInitializers final public class Singleton : FlomniChat.Scope {
    public init()
    final public func reset()
    @objc deinit
  }
  public static let unique: FlomniChat.Scope.Unique
  @_inheritsConvenienceInitializers final public class Unique : FlomniChat.Scope {
    public init()
    @objc deinit
  }
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional {
  @inlinable internal var hasWrappedValue: Swift.Bool {
    get {
        wrappedValue != nil
    }
  }
  @inlinable internal var wrappedValue: Any? {
    get {
        if case .some(let value) = self {
            return value
        }
        return nil
    }
  }
}
#else
extension Swift.Optional {
  @inlinable internal var hasWrappedValue: Swift.Bool {
    get {
        wrappedValue != nil
    }
  }
  @inlinable internal var wrappedValue: Any? {
    get {
        if case .some(let value) = self {
            return value
        }
        return nil
    }
  }
}
#endif
@frozen public struct AnyCodable : @unchecked Swift.Sendable, Swift.Codable {
  public let value: Any
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<T>(_ value: T?)
  #else
  public init<T>(_ value: T?)
  #endif
}
extension Swift.Encodable {
  public func jsonData() throws -> Foundation.Data
  public var prettyPrintedJSONString: Swift.String {
    get
  }
}
extension FlomniChat.AnyCodable : FlomniChat._AnyEncodable, FlomniChat._AnyDecodable {
}
extension FlomniChat.AnyCodable : Swift.Equatable {
  public static func == (lhs: FlomniChat.AnyCodable, rhs: FlomniChat.AnyCodable) -> Swift.Bool
}
extension FlomniChat.AnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension FlomniChat.AnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension FlomniChat.AnyCodable : Swift.ExpressibleByNilLiteral {
}
extension FlomniChat.AnyCodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension FlomniChat.AnyCodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension FlomniChat.AnyCodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension FlomniChat.AnyCodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension FlomniChat.AnyCodable : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension FlomniChat.AnyCodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension FlomniChat.AnyCodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension FlomniChat.AnyCodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@frozen public struct AnyDecodable : Swift.Decodable {
  public let value: Any
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<T>(_ value: T?)
  #else
  public init<T>(_ value: T?)
  #endif
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  init<T>(_ value: T?)
  #else
  init<T>(_ value: T?)
  #endif
}
extension FlomniChat.AnyDecodable : FlomniChat._AnyDecodable {
}
extension FlomniChat._AnyDecodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension FlomniChat.AnyDecodable : Swift.Equatable {
  public static func == (lhs: FlomniChat.AnyDecodable, rhs: FlomniChat.AnyDecodable) -> Swift.Bool
}
extension FlomniChat.AnyDecodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension FlomniChat.AnyDecodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension FlomniChat.AnyDecodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@frozen public struct AnyEncodable : Swift.Encodable {
  public let value: Any
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<T>(_ value: T?)
  #else
  public init<T>(_ value: T?)
  #endif
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  init<T>(_ value: T?)
  #else
  init<T>(_ value: T?)
  #endif
}
extension FlomniChat.AnyEncodable : FlomniChat._AnyEncodable {
}
extension FlomniChat._AnyEncodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension FlomniChat.AnyEncodable : Swift.Equatable {
  public static func == (lhs: FlomniChat.AnyEncodable, rhs: FlomniChat.AnyEncodable) -> Swift.Bool
}
extension FlomniChat.AnyEncodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension FlomniChat.AnyEncodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension FlomniChat.AnyEncodable : Swift.ExpressibleByNilLiteral {
}
extension FlomniChat.AnyEncodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension FlomniChat.AnyEncodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension FlomniChat.AnyEncodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension FlomniChat.AnyEncodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension FlomniChat.AnyEncodable : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension FlomniChat.AnyEncodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension FlomniChat.AnyEncodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension FlomniChat._AnyEncodable {
  public init(nilLiteral _: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
}
extension FlomniChat.AnyEncodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.Encodable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public subscript(key: Swift.String) -> (any Swift.Sendable)? {
    get
  }
  #else
  public subscript(key: Swift.String) -> (any Swift.Sendable)? {
    get
  }
  #endif
  public var dictionary: [Swift.String : Any] {
    get
  }
}
public enum JSONError : Swift.Int, Swift.Error {
  case unsupportedType
  case indexOutOfBounds
  case elementTooDeep
  case wrongType
  case notExist
  case invalidJSON
  case notNSDictionary
  case notArray
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.Int)
  #else
  public init?(rawValue: Swift.Int)
  #endif
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension FlomniChat.JSONError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public struct JSON : @unchecked Swift.Sendable, Swift.Codable {
  public enum `Type` : Swift.Int {
    case number
    case string
    case bool
    case array
    case dictionary
    case null
    case unknown
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init?(rawValue: Swift.Int)
    #else
    public init?(rawValue: Swift.Int)
    #endif
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public init(data: Foundation.Data, options opt: Foundation.JSONSerialization.ReadingOptions = []) throws
  public init(_ object: Any)
  public init(parseJSON jsonString: Swift.String)
  public mutating func merge(with other: FlomniChat.JSON) throws
  public func merged(with other: FlomniChat.JSON) throws -> FlomniChat.JSON
  public var _type: FlomniChat.JSON.`Type` {
    get
  }
  public var error: FlomniChat.JSONError? {
    get
  }
  public var object: Any {
    get
    set
  }
  @available(*, unavailable, renamed: "null")
  public static var nullJSON: FlomniChat.JSON {
    get
  }
  public static var null: FlomniChat.JSON {
    get
  }
}
public enum Index<T> : Swift.Comparable {
  case array(Swift.Int)
  case dictionary(Swift.DictionaryIndex<Swift.String, T>)
  case null
  public static func == (lhs: FlomniChat.Index<T>, rhs: FlomniChat.Index<T>) -> Swift.Bool
  public static func < (lhs: FlomniChat.Index<T>, rhs: FlomniChat.Index<T>) -> Swift.Bool
}
public typealias JSONIndex = FlomniChat.Index<FlomniChat.JSON>
public typealias JSONRawIndex = FlomniChat.Index<Any>
extension FlomniChat.JSON : Swift.Collection {
  public typealias Index = FlomniChat.JSONRawIndex
  public var startIndex: FlomniChat.JSON.Index {
    get
  }
  public var endIndex: FlomniChat.JSON.Index {
    get
  }
  public func index(after i: FlomniChat.JSON.Index) -> FlomniChat.JSON.Index
  public subscript(position: FlomniChat.JSON.Index) -> (Swift.String, FlomniChat.JSON) {
    get
  }
  public typealias Element = (Swift.String, FlomniChat.JSON)
  public typealias Indices = Swift.DefaultIndices<FlomniChat.JSON>
  public typealias Iterator = Swift.IndexingIterator<FlomniChat.JSON>
  public typealias SubSequence = Swift.Slice<FlomniChat.JSON>
}
public enum JSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
public protocol JSONSubscriptType {
  var jsonKey: FlomniChat.JSONKey { get }
}
extension Swift.Int : FlomniChat.JSONSubscriptType {
  public var jsonKey: FlomniChat.JSONKey {
    get
  }
}
extension Swift.String : FlomniChat.JSONSubscriptType {
  public var jsonKey: FlomniChat.JSONKey {
    get
  }
}
extension FlomniChat.JSON {
  public subscript(path: [any FlomniChat.JSONSubscriptType]) -> FlomniChat.JSON {
    get
    set
  }
  public subscript(path: any FlomniChat.JSONSubscriptType...) -> FlomniChat.JSON {
    get
    set
  }
}
extension FlomniChat.JSON : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(extendedGraphemeClusterLiteral value: Swift.StringLiteralType)
  public init(unicodeScalarLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension FlomniChat.JSON : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension FlomniChat.JSON : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension FlomniChat.JSON : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension FlomniChat.JSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension FlomniChat.JSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension FlomniChat.JSON : Swift.RawRepresentable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Any)
  #else
  public init?(rawValue: Any)
  #endif
  public var rawValue: Any {
    get
  }
  public func rawData(options opt: Foundation.JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Foundation.Data
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  #else
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func rawString(_ options: [FlomniChat.JSON.writingOptionsKeys : Any]) -> Swift.String?
  #else
  public func rawString(_ options: [FlomniChat.JSON.writingOptionsKeys : Any]) -> Swift.String?
  #endif
  public typealias RawValue = Any
}
extension FlomniChat.JSON : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension FlomniChat.JSON {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var array: [FlomniChat.JSON]? {
    get
  }
  #else
  public var array: [FlomniChat.JSON]? {
    get
  }
  #endif
  public var arrayValue: [FlomniChat.JSON] {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var arrayObject: [Any]? {
    get
    set
  }
  #else
  public var arrayObject: [Any]? {
    get
    set
  }
  #endif
}
extension FlomniChat.JSON {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var dictionary: [Swift.String : FlomniChat.JSON]? {
    get
  }
  #else
  public var dictionary: [Swift.String : FlomniChat.JSON]? {
    get
  }
  #endif
  public var dictionaryValue: [Swift.String : FlomniChat.JSON] {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set
  }
  #else
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set
  }
  #endif
}
extension FlomniChat.JSON {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var bool: Swift.Bool? {
    get
    set
  }
  #else
  public var bool: Swift.Bool? {
    get
    set
  }
  #endif
  public var boolValue: Swift.Bool {
    get
    set
  }
}
extension FlomniChat.JSON {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var string: Swift.String? {
    get
    set
  }
  #else
  public var string: Swift.String? {
    get
    set
  }
  #endif
  public var stringValue: Swift.String {
    get
    set
  }
}
extension FlomniChat.JSON {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var number: Foundation.NSNumber? {
    get
    set
  }
  #else
  public var number: Foundation.NSNumber? {
    get
    set
  }
  #endif
  public var numberValue: Foundation.NSNumber {
    get
    set
  }
}
extension FlomniChat.JSON {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var null: Foundation.NSNull? {
    get
    set
  }
  #else
  public var null: Foundation.NSNull? {
    get
    set
  }
  #endif
  public func exists() -> Swift.Bool
}
extension FlomniChat.JSON {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var url: Foundation.URL? {
    get
    set
  }
  #else
  public var url: Foundation.URL? {
    get
    set
  }
  #endif
}
extension FlomniChat.JSON {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var double: Swift.Double? {
    get
    set
  }
  #else
  public var double: Swift.Double? {
    get
    set
  }
  #endif
  public var doubleValue: Swift.Double {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var float: Swift.Float? {
    get
    set
  }
  #else
  public var float: Swift.Float? {
    get
    set
  }
  #endif
  public var floatValue: Swift.Float {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var int: Swift.Int? {
    get
    set
  }
  #else
  public var int: Swift.Int? {
    get
    set
  }
  #endif
  public var intValue: Swift.Int {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var uInt: Swift.UInt? {
    get
    set
  }
  #else
  public var uInt: Swift.UInt? {
    get
    set
  }
  #endif
  public var uIntValue: Swift.UInt {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var int8: Swift.Int8? {
    get
    set
  }
  #else
  public var int8: Swift.Int8? {
    get
    set
  }
  #endif
  public var int8Value: Swift.Int8 {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var uInt8: Swift.UInt8? {
    get
    set
  }
  #else
  public var uInt8: Swift.UInt8? {
    get
    set
  }
  #endif
  public var uInt8Value: Swift.UInt8 {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var int16: Swift.Int16? {
    get
    set
  }
  #else
  public var int16: Swift.Int16? {
    get
    set
  }
  #endif
  public var int16Value: Swift.Int16 {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var uInt16: Swift.UInt16? {
    get
    set
  }
  #else
  public var uInt16: Swift.UInt16? {
    get
    set
  }
  #endif
  public var uInt16Value: Swift.UInt16 {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var int32: Swift.Int32? {
    get
    set
  }
  #else
  public var int32: Swift.Int32? {
    get
    set
  }
  #endif
  public var int32Value: Swift.Int32 {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var uInt32: Swift.UInt32? {
    get
    set
  }
  #else
  public var uInt32: Swift.UInt32? {
    get
    set
  }
  #endif
  public var uInt32Value: Swift.UInt32 {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var int64: Swift.Int64? {
    get
    set
  }
  #else
  public var int64: Swift.Int64? {
    get
    set
  }
  #endif
  public var int64Value: Swift.Int64 {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var uInt64: Swift.UInt64? {
    get
    set
  }
  #else
  public var uInt64: Swift.UInt64? {
    get
    set
  }
  #endif
  public var uInt64Value: Swift.UInt64 {
    get
    set
  }
}
extension FlomniChat.JSON : Swift.Comparable {
  public static func == (lhs: FlomniChat.JSON, rhs: FlomniChat.JSON) -> Swift.Bool
  public static func <= (lhs: FlomniChat.JSON, rhs: FlomniChat.JSON) -> Swift.Bool
  public static func >= (lhs: FlomniChat.JSON, rhs: FlomniChat.JSON) -> Swift.Bool
  public static func > (lhs: FlomniChat.JSON, rhs: FlomniChat.JSON) -> Swift.Bool
  public static func < (lhs: FlomniChat.JSON, rhs: FlomniChat.JSON) -> Swift.Bool
}
extension FlomniChat.JSON {
  public enum writingOptionsKeys {
    case jsonSerialization
    case castNilToNSNull
    case maxObjextDepth
    case encoding
    public static func == (a: FlomniChat.JSON.writingOptionsKeys, b: FlomniChat.JSON.writingOptionsKeys) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol JSONConvertible {
}
extension Swift.Double : FlomniChat.JSONConvertible {
}
extension Swift.Float : FlomniChat.JSONConvertible {
}
extension Swift.Bool : FlomniChat.JSONConvertible {
}
extension Swift.Int : FlomniChat.JSONConvertible {
}
extension Swift.UInt : FlomniChat.JSONConvertible {
}
public func jsonConvertibleObject(_ value: some Any) -> Any
public protocol JSONConvertibleDictionary {
  var jsonConvertibleElements: [Swift.String : Any] { get }
}
extension Swift.Array {
  public var jsonConvertibleObjects: [Any] {
    get
  }
}
extension Swift.Set {
  public var jsonConvertibleObjects: [Any] {
    get
  }
}
extension Swift.Dictionary : FlomniChat.JSONConvertibleDictionary {
  public var jsonConvertibleElements: [Swift.String : Any] {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var jsonElements: [Swift.String : Any?] {
    get
  }
  #else
  public var jsonElements: [Swift.String : Any?] {
    get
  }
  #endif
}
public protocol ReflectedStringConvertible : Swift.CustomStringConvertible {
}
public enum Style {
  case normal
  case json
  public static func == (a: FlomniChat.Style, b: FlomniChat.Style) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension FlomniChat.ReflectedStringConvertible {
  public func reflectedDescription(_ style: FlomniChat.Style) -> Swift.String
  public var description: Swift.String {
    get
  }
}
extension Swift.Mirror {
  public var allChildren: [Swift.Mirror.Child] {
    get
  }
}
public struct JSONCodingKeys : Swift.CodingKey {
  public var stringValue: Swift.String
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(stringValue: Swift.String)
  #else
  public init?(stringValue: Swift.String)
  #endif
  public var intValue: Swift.Int?
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(intValue: Swift.Int)
  #else
  public init?(intValue: Swift.Int)
  #endif
}
extension Swift.KeyedDecodingContainer {
  public func decode(_ type: [Swift.String : Any].Type, forKey key: K) throws -> [Swift.String : Any]
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func decodeIfPresent(_ type: [Swift.String : Any].Type, forKey key: K) throws -> [Swift.String : Any]?
  #else
  public func decodeIfPresent(_ type: [Swift.String : Any].Type, forKey key: K) throws -> [Swift.String : Any]?
  #endif
  public func decode(_ type: [Any].Type, forKey key: K) throws -> [Any]
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func decodeIfPresent(_ type: [Any].Type, forKey key: K) throws -> [Any]?
  #else
  public func decodeIfPresent(_ type: [Any].Type, forKey key: K) throws -> [Any]?
  #endif
  public func decode(_: [Swift.String : Any].Type) throws -> [Swift.String : Any]
}
extension Swift.UnkeyedDecodingContainer {
  public mutating func decode(_: [Any].Type) throws -> [Any]
  public mutating func decode(_ type: [Swift.String : Any].Type) throws -> [Swift.String : Any]
}
public protocol StorageCodable : Swift.Decodable, Swift.Encodable, Swift.RawRepresentable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  init?(rawValue: Swift.String)
  #else
  init?(rawValue: Swift.String)
  #endif
  var rawValue: Swift.String { get }
  func encode(to encoder: any Swift.Encoder) throws
  init(from decoder: any Swift.Decoder) throws
}
extension FlomniChat.StorageCodable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.String)
  #else
  public init?(rawValue: Swift.String)
  #endif
  public var rawValue: Swift.String {
    get
  }
}
extension Swift.Array : Swift.RawRepresentable where Element : Swift.Decodable, Element : Swift.Encodable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.String)
  #else
  public init?(rawValue: Swift.String)
  #endif
  public var rawValue: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
extension Swift.Dictionary : Swift.RawRepresentable where Key : Swift.Decodable, Key : Swift.Encodable, Value : Swift.Decodable, Value : Swift.Encodable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.String)
  #else
  public init?(rawValue: Swift.String)
  #endif
  public var rawValue: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
@_Concurrency.MainActor @preconcurrency public struct ColorPickerBar : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(value: SwiftUICore.Binding<SwiftUICore.Color?>, colors: [SwiftUICore.Color] = .colorPickerBarColors)
  #else
  @_Concurrency.MainActor @preconcurrency public init(value: SwiftUICore.Binding<SwiftUICore.Color?>, colors: [SwiftUICore.Color] = .colorPickerBarColors)
  #endif
  @_Concurrency.MainActor @preconcurrency public init(value: SwiftUICore.Binding<SwiftUICore.Color>, colors: [SwiftUICore.Color] = .colorPickerBarColors)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat14ColorPickerBarV4bodyQrvp", 0) __
}
extension Swift.Collection where Self.Element == SwiftUICore.Color {
  public static var colorPickerBarColors: [SwiftUICore.Color] {
    get
  }
  public static func colorPickerBarColors(withClearColor: Swift.Bool) -> [SwiftUICore.Color]
}

extension FlomniChat.ColorPickerBar {
  public struct Config {
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init(addOpacityToPicker: Swift.Bool = true, addResetButton: Swift.Bool = false, resetButtonValue: SwiftUICore.Color? = nil)
    #else
    public init(addOpacityToPicker: Swift.Bool = true, addResetButton: Swift.Bool = false, resetButtonValue: SwiftUICore.Color? = nil)
    #endif
    public var addOpacityToPicker: Swift.Bool
    public var addResetButton: Swift.Bool
    public var resetButtonValue: SwiftUICore.Color?
    public static var standard: FlomniChat.ColorPickerBar.Config
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func colorPickerBarConfig(_ config: FlomniChat.ColorPickerBar.Config) -> some SwiftUICore.View
  
}
extension SwiftUICore.EnvironmentValues {
  public var colorPickerBarConfig: FlomniChat.ColorPickerBar.Config {
    get
    set
  }
}
extension FlomniChat.ColorPickerBar {
  public struct Style {
    public init(animation: SwiftUICore.Animation = .default, spacing: Swift.Double = 10.0, colorSize: Swift.Double = 20.0, selectedColorSize: Swift.Double = 30.0, resetButtonImage: SwiftUICore.Image = Image(systemName: "xmark.circle"))
    public var animation: SwiftUICore.Animation
    public var spacing: Swift.Double
    public var colorSize: Swift.Double
    public var selectedColorSize: Swift.Double
    public var resetButtonImage: SwiftUICore.Image
    public static var standard: FlomniChat.ColorPickerBar.Style
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func colorPickerBarStyle(_ style: FlomniChat.ColorPickerBar.Style) -> some SwiftUICore.View
  
}
extension SwiftUICore.EnvironmentValues {
  public var colorPickerBarStyle: FlomniChat.ColorPickerBar.Style {
    get
    set
  }
}
public enum CompressionError : Swift.Error {
  case invalidImage
  case fileSizeExceeded
  case savingFailed(any Swift.Error)
  case invalidFilePath(Swift.String)
  case accessRestricted
  case emptyData
  case initError
  case processError
  case compressionFailed(_: Swift.String = "Compression failed")
  public var localizedDescription: Swift.String {
    get
  }
}
@available(iOS 9.0, macOS 10.11, watchOS 2.0, tvOS 9.0, *)
public enum CompressionAlgorithm {
  case lz4
  case zlib
  case lzma
  case lzfse
  public static func == (a: FlomniChat.CompressionAlgorithm, b: FlomniChat.CompressionAlgorithm) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 9.0, macOS 10.11, watchOS 2.0, tvOS 9.0, *)
extension Foundation.Data {
  public func compress() throws -> Foundation.Data
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func compress(algorithm compression: FlomniChat.CompressionAlgorithm) throws -> Foundation.Data?
  #else
  public func compress(algorithm compression: FlomniChat.CompressionAlgorithm) throws -> Foundation.Data?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func compress(algorithm compression: FlomniChat.CompressionAlgorithm, bufferSize: Darwin.size_t) throws -> Foundation.Data?
  #else
  public func compress(algorithm compression: FlomniChat.CompressionAlgorithm, bufferSize: Darwin.size_t) throws -> Foundation.Data?
  #endif
  public func decompress() throws -> Foundation.Data
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func decompress(algorithm compression: FlomniChat.CompressionAlgorithm) throws -> Foundation.Data?
  #else
  public func decompress(algorithm compression: FlomniChat.CompressionAlgorithm) throws -> Foundation.Data?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func decompress(algorithm compression: FlomniChat.CompressionAlgorithm, bufferSize: Darwin.size_t) throws -> Foundation.Data?
  #else
  public func decompress(algorithm compression: FlomniChat.CompressionAlgorithm, bufferSize: Darwin.size_t) throws -> Foundation.Data?
  #endif
}
extension SwiftUI.Button {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(_ type: SwiftUI.Button<Label>.StandardType, _ title: SwiftUICore.LocalizedStringKey? = nil, _ icon: SwiftUICore.Image? = nil, bundle: Foundation.Bundle? = nil, action: @escaping () -> Swift.Void) where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image?>
  #else
  @_Concurrency.MainActor @preconcurrency public init(_ type: SwiftUI.Button<Label>.StandardType, _ title: SwiftUICore.LocalizedStringKey? = nil, _ icon: SwiftUICore.Image? = nil, bundle: Foundation.Bundle? = nil, action: @escaping () -> Swift.Void) where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image?>
  #endif
  public enum StandardType : Swift.String, Swift.CaseIterable, Swift.Identifiable {
    case add, addFavorite, addToFavorites, cancel, call, copy, delete, deselect, done, edit, email, ok, paste, removeFavorite, removeFromFavorites, select, share
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init?(rawValue: Swift.String)
    #else
    public init?(rawValue: Swift.String)
    #endif
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias AllCases = [SwiftUI.Button<Label>.StandardType]
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias ID = Swift.String
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias RawValue = Swift.String
    public static var allCases: [SwiftUI.Button<Label>.StandardType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension SwiftUICore.Binding {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable public func unwrapped<T>(_ defaultValue: T) -> SwiftUICore.Binding<T> where Value == T? {
        Binding<T>(get: { self.wrappedValue ?? defaultValue }, set: { self.wrappedValue = $0 })
    }
  #else
  @inlinable public func unwrapped<T>(_ defaultValue: T) -> SwiftUICore.Binding<T> where Value == T? {
        Binding<T>(get: { self.wrappedValue ?? defaultValue }, set: { self.wrappedValue = $0 })
    }
  #endif
}
#if compiler(>=5.3) && $NoncopyableGenerics
public func OptionalBinding<T>(_ binding: SwiftUICore.Binding<T?>, _ defaultValue: T) -> SwiftUICore.Binding<T>
#else
public func OptionalBinding<T>(_ binding: SwiftUICore.Binding<T?>, _ defaultValue: T) -> SwiftUICore.Binding<T>
#endif
#if compiler(>=5.3) && $NoncopyableGenerics
public func ?? <T>(left: SwiftUICore.Binding<T?>, right: T) -> SwiftUICore.Binding<T>
#else
public func ?? <T>(left: SwiftUICore.Binding<T?>, right: T) -> SwiftUICore.Binding<T>
#endif
@_Concurrency.MainActor @preconcurrency public struct ListButtonStyle : SwiftUI.ButtonStyle {
  @_Concurrency.MainActor @preconcurrency public init(pressedOpacity: Swift.Double = 0.5)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: FlomniChat.ListButtonStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat15ListButtonStyleV8makeBody13configurationQr7SwiftUI0dE13ConfigurationV_tF", 0) __
}
extension SwiftUI.ButtonStyle where Self == FlomniChat.ListButtonStyle {
  @_Concurrency.MainActor @preconcurrency public static var list: FlomniChat.ListButtonStyle {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static func list(pressedOpacity: Swift.Double) -> Self
}
extension SwiftUI.ButtonStyle where Self == FlomniChat.RefreshButtonStyle {
  @_Concurrency.MainActor @preconcurrency public static var refresh: FlomniChat.RefreshButtonStyle {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct RefreshButtonStyle : SwiftUI.ButtonStyle {
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: FlomniChat.RefreshButtonStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat18RefreshButtonStyleV8makeBody13configurationQr7SwiftUI0dE13ConfigurationV_tF", 0) __
}
extension SwiftUI.Button.StandardType {
  public var id: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var image: SwiftUICore.Image? {
    get
  }
  #else
  public var image: SwiftUICore.Image? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var imageName: Swift.String? {
    get
  }
  #else
  public var imageName: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var role: SwiftUI.ButtonRole? {
    get
  }
  #else
  public var role: SwiftUI.ButtonRole? {
    get
  }
  #endif
  public var title: SwiftUICore.LocalizedStringKey {
    get
  }
}
extension SwiftUI.Button where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  @_Concurrency.MainActor @preconcurrency public init(_ text: SwiftUICore.LocalizedStringKey, _ icon: SwiftUICore.Image, _ bundle: Foundation.Bundle = .main, action: @escaping () -> Swift.Void)
}

public enum DataUnits : Swift.String {
  case byte, kilobyte, megabyte, gigabyte
  public typealias Value = Swift.Double
  public var bytes: FlomniChat.DataUnits.Value {
    get
  }
  public typealias Unit = (size: Swift.Double, unit: FlomniChat.DataUnits)
  public static func getInBytes(from unit: FlomniChat.DataUnits.Unit) -> FlomniChat.DataUnits.Value
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.String)
  #else
  public init?(rawValue: Swift.String)
  #endif
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIImage {
  public func getSizeString(in units: FlomniChat.DataUnits) -> Swift.String
  public func getSizeValue(in type: FlomniChat.DataUnits) -> Swift.Double
}
extension Swift.UInt64 {
  public func getSizeIn(_ type: FlomniChat.DataUnits) -> Swift.String
}
extension Foundation.ISO8601DateFormatter {
  public static var full: Foundation.ISO8601DateFormatter {
    get
  }
}
extension Foundation.DateFormatter {
  convenience public init(dateFormat: Swift.String = ISO8601DateFormatter.string(from: .now, timeZone: .autoupdatingCurrent))
  public static let timeFormatter: Foundation.DateFormatter
  public static let relativeDateFormatter: Foundation.DateFormatter
  public static func timeString(_ seconds: Swift.Int) -> Swift.String
}
extension Foundation.Date {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(string dateString: Swift.String?, format: Swift.String? = nil) throws
  #else
  public init?(string dateString: Swift.String?, format: Swift.String? = nil) throws
  #endif
  public var string: Swift.String {
    get
  }
  public var time: Swift.String {
    get
  }
}
extension Foundation.Date {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func fullDistance(from date: Foundation.Date, resultIn component: Foundation.Calendar.Component, calendar: Foundation.Calendar = .current) -> Swift.Int?
  #else
  public func fullDistance(from date: Foundation.Date, resultIn component: Foundation.Calendar.Component, calendar: Foundation.Calendar = .current) -> Swift.Int?
  #endif
  public func distance(from date: Foundation.Date, only component: Foundation.Calendar.Component, calendar: Foundation.Calendar = .current) -> Swift.Int
  public func hasSame(_ component: Foundation.Calendar.Component, as date: Foundation.Date) -> Swift.Bool
}
extension Foundation.Date {
  public var timestamp: Swift.Int64 {
    get
  }
  public static var currentTimeStamp: Swift.Int64 {
    get
  }
}
extension UIKit.UIImage.Orientation {
  public init(_ cgOrientation: ImageIO.CGImagePropertyOrientation)
}
extension SwiftUICore.Image {
  public static func system(_ name: Swift.String) -> SwiftUICore.Image
}
extension UIKit.UIImage {
  public func fixOrientation() -> UIKit.UIImage
  public func scaleToFill(in targetSize: CoreFoundation.CGSize) -> UIKit.UIImage
  #if compiler(>=5.3) && $NoncopyableGenerics
  convenience public init?(photo: AVFoundation.AVCapturePhoto)
  #else
  convenience public init?(photo: AVFoundation.AVCapturePhoto)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func resized(withPercentage percentage: CoreFoundation.CGFloat, isOpaque: Swift.Bool = true) -> UIKit.UIImage?
  #else
  public func resized(withPercentage percentage: CoreFoundation.CGFloat, isOpaque: Swift.Bool = true) -> UIKit.UIImage?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var png: Foundation.Data? {
    get
  }
  #else
  public var png: Foundation.Data? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func jpg(quality: CoreFoundation.CGFloat) -> Foundation.Data?
  #else
  public func jpg(quality: CoreFoundation.CGFloat) -> Foundation.Data?
  #endif
}
public func runOnMainActor(_ action: @escaping @_Concurrency.MainActor () -> Swift.Void)
public func asyncOnMainActor(_ action: @escaping @_Concurrency.MainActor @Sendable () async -> Swift.Void)
public func runOnMainQueue(_ action: @escaping () -> Swift.Void)
#if compiler(>=5.3) && $NoncopyableGenerics
public func unwrapOrThrow<T>(_ optional: T?, _ error: any Swift.Error) throws -> T
#else
public func unwrapOrThrow<T>(_ optional: T?, _ error: any Swift.Error) throws -> T
#endif
extension Swift.Bool {
  public func trueOrThrow(_ error: any Swift.Error) throws
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional {
  public var isNil: Swift.Bool {
    get
  }
  public var isSet: Swift.Bool {
    get
  }
}
#else
extension Swift.Optional {
  public var isNil: Swift.Bool {
    get
  }
  public var isSet: Swift.Bool {
    get
  }
}
#endif
public struct TypeWrapper<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public let object: T
  public init(object: T)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class Utils {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func image(data: Foundation.Data) -> UIKit.UIImage?
  #else
  public static func image(data: Foundation.Data) -> UIKit.UIImage?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func data(image: UIKit.UIImage) -> Foundation.Data?
  #else
  public static func data(image: UIKit.UIImage) -> Foundation.Data?
  #endif
  @objc deinit
}
public struct File {
  public let name: Swift.String
  public let url: Foundation.URL
  public let modificationDate: Foundation.Date?
  public let size: Swift.UInt64?
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(name: Swift.String, url: Foundation.URL, modificationDate: Foundation.Date?, size: Swift.UInt64?)
  #else
  public init(name: Swift.String, url: Foundation.URL, modificationDate: Foundation.Date?, size: Swift.UInt64?)
  #endif
}
extension FlomniChat.File {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(url: Foundation.URL)
  #else
  public init?(url: Foundation.URL)
  #endif
}
extension UIKit.UIView {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func closestVC() -> UIKit.UIViewController?
  #else
  @_Concurrency.MainActor @preconcurrency public func closestVC() -> UIKit.UIViewController?
  #endif
}
extension CoreFoundation.CGFloat {
  @inline(__always) public static var screenWidth: CoreFoundation.CGFloat {
    get
  }
  @inline(__always) public static var screenHeight: CoreFoundation.CGFloat {
    get
  }
}
extension Swift.Dictionary {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func removingValues(forKeys keys: [Key]) -> [Key : Value]?
  #else
  public func removingValues(forKeys keys: [Key]) -> [Key : Value]?
  #endif
}
extension UIKit.UIApplication {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public var keyWindow: UIKit.UIWindow? {
    get
  }
  #else
  @_Concurrency.MainActor @preconcurrency public var keyWindow: UIKit.UIWindow? {
    get
  }
  #endif
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor @preconcurrency public func endEditing(action: () -> Swift.Void = {})
}
public func uuid() -> Swift.String
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional where Wrapped : Swift.Collection {
  public var isEmpty: Swift.Bool {
    get
  }
  public var nonEmpty: Swift.Bool {
    get
  }
}
#else
extension Swift.Optional where Wrapped : Swift.Collection {
  public var isEmpty: Swift.Bool {
    get
  }
  public var nonEmpty: Swift.Bool {
    get
  }
}
#endif
extension Swift.Array {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable public var nilOrEmpty: Swift.Array<Element>? {
    get {
		isEmpty ? self : nil
	}
  }
  #else
  @inlinable public var nilOrEmpty: Swift.Array<Element>? {
    get {
		isEmpty ? self : nil
	}
  }
  #endif
  @inlinable public func appending(contentsOf other: [Element]) -> [Element] {
		var result = self
		result.append(contentsOf: other)
		return result
	}
  @inlinable public var lastIndex: Swift.Int {
    get { endIndex - 1 }
  }
}
extension Swift.Collection {
  public func indexed() -> [(offset: Swift.Int, element: Self.Element)]
  public func asyncMap<T>(_ transform: (Self.Element) async throws -> T) async rethrows -> [T]
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func asyncCompactMap<T>(_ transform: (Self.Element) async throws -> T?) async rethrows -> [T]
  #else
  public func asyncCompactMap<T>(_ transform: (Self.Element) async throws -> T?) async rethrows -> [T]
  #endif
}
extension Swift.Array where Element : Swift.Equatable, Element : Swift.Identifiable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public subscript(safe index: Swift.Int) -> Element? {
    get
    set
  }
  #else
  public subscript(safe index: Swift.Int) -> Element? {
    get
    set
  }
  #endif
}
extension Swift.RangeReplaceableCollection where Self.Element : Swift.Equatable, Self.Element : Swift.Identifiable, Self.Index == Swift.Int {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public subscript(safe index: Swift.Int) -> Self.Element? {
    get
    set
  }
  #else
  public subscript(safe index: Swift.Int) -> Self.Element? {
    get
    set
  }
  #endif
}
extension Swift.RangeReplaceableCollection where Self.Index : Swift.Hashable {
  public var hasContent: Swift.Bool {
    get
  }
  public mutating func removeAll(at collection: some Collection<Index>) -> Self
}
extension Swift.Sequence where Self.Element : Swift.Comparable, Self.Element : Swift.Hashable {
  public func grouped<T>(by grouper: (Self.Element) -> T) -> [T : [Self.Element]] where T : Swift.Hashable
  public func unique() -> [Self.Iterator.Element]
  public func unique(by areInIncreasingOrder: (Self.Iterator.Element, Self.Iterator.Element) -> Swift.Bool) -> [Self.Iterator.Element]
}
extension Swift.Dictionary where Value == Any? {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func removingNilValues() -> [Key : Any]
  #else
  public func removingNilValues() -> [Key : Any]
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func removingEmptyValues() -> [Key : Any]
  #else
  public func removingEmptyValues() -> [Key : Any]
  #endif
}
extension Swift.Dictionary {
  public var keyValuePairs: [(key: Swift.String, value: Swift.String)] {
    get
  }
  public func removingEmptyValues() -> [Key : Any]
  public func print() -> Swift.String
}
extension Foundation.ComparisonResult {
  public static var ascending: Foundation.ComparisonResult {
    get
  }
  public static var descending: Foundation.ComparisonResult {
    get
  }
}
extension Swift.String {
  public subscript(value: Swift.Int) -> Swift.Character {
    get
  }
}
extension Swift.Set : Swift.RawRepresentable where Element == Swift.String {
  public typealias RawValue = Swift.String
}
extension Swift.Set : FlomniChat.StorageCodable where Element == Swift.String {
  public var rawValue: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.String)
  #else
  public init?(rawValue: Swift.String)
  #endif
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.String {
  @available(*, deprecated, message: "Use the new options-based version instead.")
  public func replacing(_ string: Swift.String, with: Swift.String, caseSensitive: Swift.Bool) -> Swift.String
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func replacing(_ string: Swift.String, with other: Swift.String, _ options: Foundation.NSString.CompareOptions? = nil) -> Swift.String
  #else
  public func replacing(_ string: Swift.String, with other: Swift.String, _ options: Foundation.NSString.CompareOptions? = nil) -> Swift.String
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public mutating func replace(_ string: Swift.String, with other: Swift.String, _ options: Foundation.NSString.CompareOptions? = nil)
  #else
  public mutating func replace(_ string: Swift.String, with other: Swift.String, _ options: Foundation.NSString.CompareOptions? = nil)
  #endif
  public func trimmed(for set: Foundation.CharacterSet = .whitespacesAndNewlines) -> Swift.String
  public var hasContent: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var nilOrEmpty: Swift.String? {
    get
  }
  #else
  public var nilOrEmpty: Swift.String? {
    get
  }
  #endif
  public var hasTrimmedContent: Swift.Bool {
    get
  }
  public func contains(_ string: Swift.String, caseSensitive: Swift.Bool = false) -> Swift.Bool
}
extension Swift.String {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var date: Foundation.Date? {
    get
  }
  #else
  public var date: Foundation.Date? {
    get
  }
  #endif
  public var lastPathComponent: Swift.String {
    get
  }
  public var pathExtension: Swift.String {
    get
  }
  public subscript(value: Foundation.NSRange) -> Swift.Substring {
    get
  }
}
extension Swift.String {
  public static var none: Swift.String {
    get
  }
  public subscript(value: Swift.CountableClosedRange<Swift.Int>) -> Swift.Substring {
    get
  }
  public subscript(value: Swift.CountableRange<Swift.Int>) -> Swift.Substring {
    get
  }
  public subscript(value: Swift.PartialRangeUpTo<Swift.Int>) -> Swift.Substring {
    get
  }
  public subscript(value: Swift.PartialRangeThrough<Swift.Int>) -> Swift.Substring {
    get
  }
  public subscript(value: Swift.PartialRangeFrom<Swift.Int>) -> Swift.Substring {
    get
  }
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional where Wrapped == Swift.String {
  public func matches(regex: Swift.String?) -> Swift.Bool
}
#else
extension Swift.Optional where Wrapped == Swift.String {
  public func matches(regex: Swift.String?) -> Swift.Bool
}
#endif
extension Swift.String {
  public func matches(regex: Swift.String) -> Swift.Bool
  public func mask(with regex: Swift.String) -> Swift.String
  public func format(with mask: Swift.String = "+X (XXX) XXX XX XX", symbol: Swift.Character = "X") -> Swift.String
  public func width(withConstrainedWidth width: CoreFoundation.CGFloat, font: UIKit.UIFont, messageUseMarkdown: Swift.Bool) -> CoreFoundation.CGFloat
  public func toAttrString(font: UIKit.UIFont = .preferredFont(forTextStyle: .body), messageUseMarkdown: Swift.Bool = true) -> Foundation.NSAttributedString
  public func lastLineWidth(labelWidth: CoreFoundation.CGFloat, font: UIKit.UIFont, messageUseMarkdown: Swift.Bool) -> CoreFoundation.CGFloat
  public func numberOfLines(labelWidth: CoreFoundation.CGFloat, font: UIKit.UIFont, messageUseMarkdown: Swift.Bool) -> Swift.Int
}
extension Swift.String {
  public func levenshteinDistanceScore(to string: Swift.String, caseSensitive: Swift.Bool = false, trimWhiteSpacesAndNewLines: Swift.Bool = true) -> Swift.Double
}
extension Swift.Array where Element == Swift.String {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func mostSimilar(to string: Swift.String) -> Swift.String?
  #else
  public func mostSimilar(to string: Swift.String) -> Swift.String?
  #endif
}
extension UserNotifications.UNNotificationSound {
  public static let flomniMessage: UserNotifications.UNNotificationSound
}
extension UserNotifications.UNNotificationSoundName {
  public static let flomniMessageRaw: Swift.String
}
@objc final public class FlomniNotification : ObjectiveC.NSObject, Swift.Codable, Swift.Identifiable {
  public struct APS : Swift.Codable {
    public struct Alert : Swift.Codable {
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public var alert: FlomniChat.FlomniNotification.APS.Alert
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  @FlomniChat.DateValue<FlomniChat.ISO8601Strategy> final public var timestamp: Foundation.Date {
    get
    set
    _modify
  }
  final public var _id: Swift.String
  final public var aps: FlomniChat.FlomniNotification.APS
  final public var flomni: FlomniChat.CoreMessage
  final public var sessionId: Swift.String {
    get
  }
  final public var userHash: Swift.String {
    get
  }
  public init(id _: Swift.String, aps: FlomniChat.FlomniNotification.APS, flomni: FlomniChat.CoreMessage, timestamp: Foundation.Date = .now)
  public init(from decoder: any Swift.Decoder) throws
  public init(from userInfo: [Swift.AnyHashable : Any]) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
  @objc deinit
}
extension FlomniChat.FlomniNotification : CoreData.NSFetchRequestResult {
  public static var entityName: Swift.String {
    get
  }
}
extension FlomniChat.FlomniNotification {
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  public static func == (lhs: FlomniChat.FlomniNotification, rhs: FlomniChat.FlomniNotification) -> Swift.Bool
  final public var notificationRequest: UserNotifications.UNNotificationRequest {
    get
  }
  public static var entityDescription: CoreData.NSEntityDescription {
    get
  }
}
extension Swift.Double {
  public init(nanoseconds: Swift.Double)
  public init(microseconds: Swift.Double)
  public init(milliseconds: Swift.Double)
  public init(seconds: Swift.Double)
  public init(minutes: Swift.Double)
  public init(hours: Swift.Double)
  public var nanoseconds: Swift.UInt64 {
    get
  }
  public var microseconds: Swift.Double {
    get
  }
  public var milliseconds: Swift.Double {
    get
  }
  public var seconds: Swift.Double {
    get
  }
  public var minutes: Swift.Double {
    get
  }
  public var hours: Swift.Double {
    get
  }
  public var timeString: Swift.String {
    get
  }
}
extension UIKit.UIScreen {
  @nonobjc @_Concurrency.MainActor @preconcurrency public static var mainScreen: UIKit.UIScreen {
    get
  }
  @nonobjc @_Concurrency.MainActor @preconcurrency public static var orientation: UIKit.UIDeviceOrientation {
    get
  }
}
public protocol SwiftPreviewInspector {
  var isSwiftUIPreview: Swift.Bool { get }
}
extension FlomniChat.SwiftPreviewInspector {
  public var isSwiftUIPreview: Swift.Bool {
    get
  }
}
extension Foundation.ProcessInfo : FlomniChat.SwiftPreviewInspector {
}
extension Foundation.ProcessInfo {
  public var isSwiftUIPreview: Swift.Bool {
    get
  }
  public static var isSwiftUIPreview: Swift.Bool {
    get
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor @preconcurrency public static var isIPad: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static var isIPhone: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static var deviceId: Swift.String {
    get
  }
}
open class DeviceIdentifier {
  public init(keychainService: FlomniChat.KeychainService, store: Foundation.UserDefaults = .standard)
  open func getDeviceIdentifier() -> Swift.String
  open func resetDeviceIdentifier()
  open func setDeviceIdentifier(_ id: Swift.String)
  @objc deinit
}
extension Foundation.Bundle {
  public var buildNumber: Swift.String {
    get
  }
  public var displayName: Swift.String {
    get
  }
  public var versionNumber: Swift.String {
    get
  }
}
extension Foundation.URLComponents {
  public mutating func setQueryItems(with parameters: [Swift.String : Swift.String])
}
extension Foundation.URLRequest {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var queryItems: [Foundation.URLQueryItem]? {
    get
    set
  }
  #else
  public var queryItems: [Foundation.URLQueryItem]? {
    get
    set
  }
  #endif
}
extension Foundation.URL {
  @available(iOS, introduced: 14, deprecated: 16, obsoleted: 16)
  public func appending(path: Swift.String, isDirectory: Swift.Bool = false) -> Foundation.URL
  @available(iOS, introduced: 14, deprecated: 16, obsoleted: 16)
  public mutating func append(path: Swift.String, isDirectory: Swift.Bool = false)
  public mutating func append(query: [Foundation.URLQueryItem])
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func appending(query: [Foundation.URLQueryItem]) -> Foundation.URL?
  #else
  public func appending(query: [Foundation.URLQueryItem]) -> Foundation.URL?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var attributes: [Foundation.FileAttributeKey : Any]? {
    get
  }
  #else
  public var attributes: [Foundation.FileAttributeKey : Any]? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var fileSize: Swift.UInt64? {
    get
  }
  #else
  public var fileSize: Swift.UInt64? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var fileSizeString: Swift.String? {
    get
  }
  #else
  public var fileSizeString: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var creationDate: Foundation.Date? {
    get
  }
  #else
  public var creationDate: Foundation.Date? {
    get
  }
  #endif
}
@available(iOS, deprecated: 16.0, message: "URLCompatibilityKit is only useful when targeting iOS versions earlier than 16")
@available(macOS, deprecated: 13.0, message: "URLCompatibilityKit is only useful when targeting macOS versions earlier than 13")
@available(tvOS, deprecated: 16.0, message: "URLCompatibilityKit is only useful when targeting tvOS versions earlier than 16")
@available(watchOS, deprecated: 9.0, message: "URLCompatibilityKit is only useful when targeting watchOS versions earlier than 9")
extension Foundation.URL {
  public mutating func append<S>(path: S) where S : Swift.StringProtocol
  public func appending<S>(path: S) -> Foundation.URL where S : Swift.StringProtocol
}
extension Foundation.URL {
  @available(iOS, introduced: 11.0, obsoleted: 16.0)
  @available(macOS, introduced: 10.12, obsoleted: 13.0)
  @available(tvOS, introduced: 10.0, obsoleted: 16.0)
  @available(watchOS, introduced: 3.0, obsoleted: 9.0)
  public static func currentDirectory() -> Foundation.URL
}
extension Foundation.URL {
  @available(iOS, introduced: 11.0, obsoleted: 16.0)
  @available(macOS, introduced: 10.12, obsoleted: 13.0)
  @available(tvOS, introduced: 10.0, obsoleted: 16.0)
  @available(watchOS, introduced: 3.0, obsoleted: 9.0)
  public static var application: Foundation.URL {
    get
  }
  @available(iOS, introduced: 11.0, obsoleted: 16.0)
  @available(macOS, introduced: 10.12, obsoleted: 13.0)
  @available(tvOS, introduced: 10.0, obsoleted: 16.0)
  @available(watchOS, introduced: 3.0, obsoleted: 9.0)
  public static var applicationSupport: Foundation.URL {
    get
  }
  @available(iOS, introduced: 11.0, obsoleted: 16.0)
  @available(macOS, introduced: 10.12, obsoleted: 13.0)
  @available(tvOS, introduced: 10.0, obsoleted: 16.0)
  @available(watchOS, introduced: 3.0, obsoleted: 9.0)
  public static var caches: Foundation.URL {
    get
  }
  @available(iOS, introduced: 11.0, obsoleted: 16.0)
  @available(macOS, introduced: 10.12, obsoleted: 13.0)
  @available(tvOS, introduced: 10.0, obsoleted: 16.0)
  @available(watchOS, introduced: 3.0, obsoleted: 9.0)
  public static var desktop: Foundation.URL {
    get
  }
  @available(iOS, introduced: 11.0, obsoleted: 16.0)
  @available(macOS, introduced: 10.12, obsoleted: 13.0)
  @available(tvOS, introduced: 10.0, obsoleted: 16.0)
  @available(watchOS, introduced: 3.0, obsoleted: 9.0)
  public static var documents: Foundation.URL {
    get
  }
  @available(iOS, introduced: 11.0, obsoleted: 16.0)
  @available(macOS, introduced: 10.12, obsoleted: 13.0)
  @available(tvOS, introduced: 10.0, obsoleted: 16.0)
  @available(watchOS, introduced: 3.0, obsoleted: 9.0)
  public static var downloads: Foundation.URL {
    get
  }
  @available(iOS, introduced: 11.0, obsoleted: 16.0)
  @available(macOS, introduced: 10.12, obsoleted: 13.0)
  @available(tvOS, introduced: 10.0, obsoleted: 16.0)
  @available(watchOS, introduced: 3.0, obsoleted: 9.0)
  public static var home: Foundation.URL {
    get
  }
  @available(iOS, introduced: 11.0, obsoleted: 16.0)
  @available(macOS, introduced: 10.12, obsoleted: 13.0)
  @available(tvOS, introduced: 10.0, obsoleted: 16.0)
  @available(watchOS, introduced: 3.0, obsoleted: 9.0)
  public static var library: Foundation.URL {
    get
  }
  @available(iOS, introduced: 11.0, obsoleted: 16.0)
  @available(macOS, introduced: 10.12, obsoleted: 13.0)
  @available(tvOS, introduced: 10.0, obsoleted: 16.0)
  @available(watchOS, introduced: 3.0, obsoleted: 9.0)
  public static var movies: Foundation.URL {
    get
  }
  @available(iOS, introduced: 11.0, obsoleted: 16.0)
  @available(macOS, introduced: 10.12, obsoleted: 13.0)
  @available(tvOS, introduced: 10.0, obsoleted: 16.0)
  @available(watchOS, introduced: 3.0, obsoleted: 9.0)
  public static var music: Foundation.URL {
    get
  }
  @available(iOS, introduced: 11.0, obsoleted: 16.0)
  @available(macOS, introduced: 10.12, obsoleted: 13.0)
  @available(tvOS, introduced: 10.0, obsoleted: 16.0)
  @available(watchOS, introduced: 3.0, obsoleted: 9.0)
  public static var pictures: Foundation.URL {
    get
  }
  @available(iOS, introduced: 11.0, obsoleted: 16.0)
  @available(macOS, introduced: 10.12, obsoleted: 13.0)
  @available(tvOS, introduced: 10.0, obsoleted: 16.0)
  @available(watchOS, introduced: 3.0, obsoleted: 9.0)
  public static var sharedPublic: Foundation.URL {
    get
  }
  @available(iOS, introduced: 11.0, obsoleted: 16.0)
  @available(macOS, introduced: 10.12, obsoleted: 13.0)
  @available(tvOS, introduced: 10.0, obsoleted: 16.0)
  @available(watchOS, introduced: 3.0, obsoleted: 9.0)
  public static var temporary: Foundation.URL {
    get
  }
  @available(iOS, introduced: 11.0, obsoleted: 16.0)
  @available(macOS, introduced: 10.12, obsoleted: 13.0)
  @available(tvOS, introduced: 10.0, obsoleted: 16.0)
  @available(watchOS, introduced: 3.0, obsoleted: 9.0)
  public static var user: Foundation.URL {
    get
  }
}
public func navigation(content: @escaping () -> some View) -> some SwiftUICore.View

extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func toolbar(_ visibility: SwiftUI.Visibility) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func embedInNavigation() -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func eraseToAnyView() -> SwiftUICore.AnyView
  @_Concurrency.MainActor @preconcurrency public func `if`<T>(_ condition: @autoclosure () -> Swift.Bool, _ transform: (Self) -> T) -> some SwiftUICore.View where T : SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func `if`<T, F>(_ condition: @autoclosure () -> Swift.Bool, _ transform: (Self) -> T, else _transform: (Self) -> F) -> some SwiftUICore.View where T : SwiftUICore.View, F : SwiftUICore.View
  
  @inlinable @_Concurrency.MainActor @preconcurrency public func frame(box: CoreFoundation.CGFloat) -> some SwiftUICore.View { frame(width: box, height: box, alignment: .center) }
  
  @inlinable @_Concurrency.MainActor @preconcurrency public func frame(_ size: CoreFoundation.CGSize) -> some SwiftUICore.View { frame(width: size.width, height: size.height, alignment: .center) }
  
  @inlinable nonisolated public func color<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
		foregroundStyle(style)
	}
  
  @inlinable @_Concurrency.MainActor @preconcurrency public func padding(_ vertical: CoreFoundation.CGFloat, _ horizontal: CoreFoundation.CGFloat) -> some SwiftUICore.View {
		padding(.vertical, vertical)
			.padding(.horizontal, horizontal)
	}
  
  @inlinable @_Concurrency.MainActor @preconcurrency public func backgroundStyled<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
		if #available(iOS 16, *) {
			return backgroundStyle(style)
		} else {
			return background(style)
		}
	}
  
  @_Concurrency.MainActor @preconcurrency public func isHidden(_ isHidden: Swift.Bool) -> some SwiftUICore.View
  
  @inlinable @_Concurrency.MainActor @preconcurrency public func spacing() -> some SwiftUICore.View { HStack { self; Spacer() } }
  
}
extension SwiftUICore.Font {
  public static func system(_ style: SwiftUICore.Font.TextStyle = .body, _ design: SwiftUICore.Font.Design = .default, _ weight: SwiftUICore.Font.Weight = .regular) -> SwiftUICore.Font
  public static func system(_ style: SwiftUICore.Font.TextStyle = .body, _ weight: SwiftUICore.Font.Weight = .regular) -> SwiftUICore.Font
}
extension UIKit.UIColor {
  public class func adaptiveColor(withSeed seed: Swift.String) -> UIKit.UIColor
}
extension SwiftUICore.Color {
  @inlinable public static func adaptiveColor(withSeed seed: Swift.String) -> SwiftUICore.Color {
		Color(UIColor.adaptiveColor(withSeed: seed))
	}
  public init(adaptWithSeed: Swift.String)
}
extension SwiftUICore.View {
  @available(iOS 15, *)
  @_Concurrency.MainActor @preconcurrency public func highlightEffect() -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func ignoreKeyboard() -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func vibrantForeground(thick: Swift.Bool = false) -> some SwiftUICore.View
  
}
public struct Audio : Swift.Identifiable, Swift.Hashable {
  public var id: Swift.String {
    get
  }
  public let url: Foundation.URL
  public static func custom(url: Foundation.URL) -> FlomniChat.Audio
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func custom(named name: Swift.String, in bundle: Foundation.Bundle = .main) -> FlomniChat.Audio?
  #else
  public static func custom(named name: Swift.String, in bundle: Foundation.Bundle = .main) -> FlomniChat.Audio?
  #endif
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: FlomniChat.Audio, b: FlomniChat.Audio) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
extension FlomniChat.Audio {
  public static let busyToneANSI: FlomniChat.Audio
  public static let busyToneCEPT: FlomniChat.Audio
  public static let callWaitingToneANSI: FlomniChat.Audio
  public static let callWaitingToneCEPT: FlomniChat.Audio
  public static let ctCallWaiting: FlomniChat.Audio
  public static let dtmf0: FlomniChat.Audio
  public static let dtmf1: FlomniChat.Audio
  public static let dtmf2: FlomniChat.Audio
  public static let dtmf3: FlomniChat.Audio
  public static let dtmf4: FlomniChat.Audio
  public static let dtmf5: FlomniChat.Audio
  public static let dtmf6: FlomniChat.Audio
  public static let dtmf7: FlomniChat.Audio
  public static let dtmf8: FlomniChat.Audio
  public static let dtmf9: FlomniChat.Audio
  public static let dtmfPound: FlomniChat.Audio
  public static let dtmfStar: FlomniChat.Audio
  public static let endCallToneCEPT: FlomniChat.Audio
  public static let headphoneAudioExposureLimitExceeded: FlomniChat.Audio
  public static let healthNotificationUrgent: FlomniChat.Audio
  public static let mediaHandoff: FlomniChat.Audio
  public static let mediaPaused: FlomniChat.Audio
  public static let micMute: FlomniChat.Audio
  public static let micUnmute: FlomniChat.Audio
  public static let micUnmuteFail: FlomniChat.Audio
  public static let multiwayJoin: FlomniChat.Audio
  public static let multiwayLeave: FlomniChat.Audio
  public static let pushToTalkJoined: FlomniChat.Audio
  public static let pushToTalkLeft: FlomniChat.Audio
  public static let pushToTalkMute: FlomniChat.Audio
  public static let pushToTalkUnmute: FlomniChat.Audio
  public static let pushToTalkUnmuteFail: FlomniChat.Audio
  public static let ringbackToneANSI: FlomniChat.Audio
  public static let ringbackToneAUS: FlomniChat.Audio
  public static let ringbackToneCEPT: FlomniChat.Audio
  public static let ringbackToneHK: FlomniChat.Audio
  public static let ringbackToneUK: FlomniChat.Audio
  public static let screenCapture: FlomniChat.Audio
  public static let screenSharingStarted: FlomniChat.Audio
  public static let vcEnded: FlomniChat.Audio
  public static let vcInvitationAccepted: FlomniChat.Audio
  public static let vcRinging: FlomniChat.Audio
  public static let vcRingingWatch: FlomniChat.Audio
  public static let workoutCompleteAutodetect: FlomniChat.Audio
  public static let workoutPaceAbove: FlomniChat.Audio
  public static let workoutPaceBelow: FlomniChat.Audio
  public static let workoutPausedAutoDetect: FlomniChat.Audio
  public static let workoutResumedAutoDetect: FlomniChat.Audio
  public static let workoutStartAutodetect: FlomniChat.Audio
  public static let critical: FlomniChat.Audio
  public static let accessScanComplete: FlomniChat.Audio
  public static let acknowledgmentReceived: FlomniChat.Audio
  public static let acknowledgmentSent: FlomniChat.Audio
  public static let alarm: FlomniChat.Audio
  public static let beginRecord: FlomniChat.Audio
  public static let cameraTimerCountdown: FlomniChat.Audio
  public static let cameraTimerFinalSecond: FlomniChat.Audio
  public static let connectPower: FlomniChat.Audio
  public static let ctBusy: FlomniChat.Audio
  public static let ctCongestion: FlomniChat.Audio
  public static let ctError: FlomniChat.Audio
  public static let ctKeytone2: FlomniChat.Audio
  public static let ctPathACK: FlomniChat.Audio
  public static let deviceShutdown: FlomniChat.Audio
  public static let doorbell: FlomniChat.Audio
  public static let endRecord: FlomniChat.Audio
  public static let focusChangeAppIcon: FlomniChat.Audio
  public static let focusChangeKeyboard: FlomniChat.Audio
  public static let focusChangeLarge: FlomniChat.Audio
  public static let focusChangeSmall: FlomniChat.Audio
  public static let gotoSleepAlert: FlomniChat.Audio
  public static let healthNotification: FlomniChat.Audio
  public static let jblAmbiguous: FlomniChat.Audio
  public static let jblBegin: FlomniChat.Audio
  public static let jblBeginShort: FlomniChat.Audio
  public static let jblBeginShortCarplay: FlomniChat.Audio
  public static let jblCancel: FlomniChat.Audio
  public static let jblConfirm: FlomniChat.Audio
  public static let jblNoMatch: FlomniChat.Audio
  public static let keyPressClick: FlomniChat.Audio
  public static let keyPressDelete: FlomniChat.Audio
  public static let keyPressModifier: FlomniChat.Audio
  public static let keyboardPressClear: FlomniChat.Audio
  public static let keyboardPressDelete: FlomniChat.Audio
  public static let keyboardPressNormal: FlomniChat.Audio
  public static let lock: FlomniChat.Audio
  public static let longLowShortHigh: FlomniChat.Audio
  public static let lowPower: FlomniChat.Audio
  public static let mailSent: FlomniChat.Audio
  public static let middle9ShortDoubleLow: FlomniChat.Audio
  public static let multiwayInvitation: FlomniChat.Audio
  public static let navigationPop: FlomniChat.Audio
  public static let navigationPush: FlomniChat.Audio
  public static let navigationGenericManeuver: FlomniChat.Audio
  public static let newMail: FlomniChat.Audio
  public static let nfcScanComplete: FlomniChat.Audio
  public static let nfcScanFailure: FlomniChat.Audio
  public static let paymentFailure: FlomniChat.Audio
  public static let paymentSuccess: FlomniChat.Audio
  public static let paymentReceived: FlomniChat.Audio
  public static let paymentReceivedFailure: FlomniChat.Audio
  public static let photoShutter: FlomniChat.Audio
  public static let pinDelete: FlomniChat.Audio
  public static let pinDeleteAX: FlomniChat.Audio
  public static let pinEnterDigit: FlomniChat.Audio
  public static let pinEnterDigitAX: FlomniChat.Audio
  public static let pinSubmitAX: FlomniChat.Audio
  public static let pinUnexpected: FlomniChat.Audio
  public static let receivedMessage: FlomniChat.Audio
  public static let ringerChanged: FlomniChat.Audio
  public static let sentMessage: FlomniChat.Audio
  public static let shake: FlomniChat.Audio
  public static let shortDoubleHigh: FlomniChat.Audio
  public static let shortDoubleLow: FlomniChat.Audio
  public static let shortLowHigh: FlomniChat.Audio
  public static let simToolkitCallDropped: FlomniChat.Audio
  public static let simToolkitGeneralBeep: FlomniChat.Audio
  public static let simToolkitNegativeACK: FlomniChat.Audio
  public static let simToolkitPositiveACK: FlomniChat.Audio
  public static let simToolkitSMS: FlomniChat.Audio
  public static let smsReceived1: FlomniChat.Audio
  public static let smsReceived2: FlomniChat.Audio
  public static let smsReceived3: FlomniChat.Audio
  public static let smsReceived4: FlomniChat.Audio
  public static let smsReceived5: FlomniChat.Audio
  public static let smsReceived6: FlomniChat.Audio
  public static let swish: FlomniChat.Audio
  public static let tink: FlomniChat.Audio
  public static let tock: FlomniChat.Audio
  public static let tweetSent: FlomniChat.Audio
  public static let ussd: FlomniChat.Audio
  public static let warsaw: FlomniChat.Audio
  public static let webcamStart: FlomniChat.Audio
  public static let wheelsOfTime: FlomniChat.Audio
  public static let anticipate: FlomniChat.Audio
  public static let bloom: FlomniChat.Audio
  public static let calypso: FlomniChat.Audio
  public static let chooChoo: FlomniChat.Audio
  public static let descent: FlomniChat.Audio
  public static let fanfare: FlomniChat.Audio
  public static let ladder: FlomniChat.Audio
  public static let minuet: FlomniChat.Audio
  public static let newsFlash: FlomniChat.Audio
  public static let noir: FlomniChat.Audio
  public static let sherwoodForest: FlomniChat.Audio
  public static let spell: FlomniChat.Audio
  public static let suspense: FlomniChat.Audio
  public static let telegraph: FlomniChat.Audio
  public static let tiptoes: FlomniChat.Audio
  public static let typewriters: FlomniChat.Audio
  public static let update: FlomniChat.Audio
  public static let cameraShutterBurst: FlomniChat.Audio
  public static let cameraShutterBurstBegin: FlomniChat.Audio
  public static let cameraShutterBurstEnd: FlomniChat.Audio
}

extension FlomniChat.AnyFeedback {
  public static func audio(_ audio: FlomniChat.Audio) -> FlomniChat.AnyFeedback
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func audio(_ audio: FlomniChat.Audio) -> some SwiftUICore.View
  
}
extension FlomniChat.Audio {
  @_Concurrency.MainActor public func play() async throws
}
public struct AudioPlayerEnvironmentKey : SwiftUICore.EnvironmentKey {
  public static let defaultValue: FlomniChat.AudioPlayer
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Value = FlomniChat.AudioPlayer
}
extension SwiftUICore.EnvironmentValues {
  public var audioPlayer: FlomniChat.AudioPlayer {
    get
    set
  }
}
@_Concurrency.MainActor @preconcurrency public struct AudioFeedback : FlomniChat.Feedback, SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func body(content: FlomniChat.AudioFeedback.Content) -> some SwiftUICore.View
  
  @_Concurrency.MainActor public func perform() async
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat13AudioFeedbackV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor final public class AudioPlayer : ObjectiveC.NSObject, FlomniChat.Observable, AVFAudio.AVAudioPlayerDelegate {
  @_Concurrency.MainActor public static let shared: FlomniChat.AudioPlayer
  @_Concurrency.MainActor final public func play(audio: FlomniChat.Audio) async throws
  @objc nonisolated final public func audioPlayerDidFinishPlaying(_ player: AVFAudio.AVAudioPlayer, successfully flag: Swift.Bool)
  @_Concurrency.MainActor @objc override dynamic public init()
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct AnyFeedback : FlomniChat.Feedback {
  public init(_ haptic: any FlomniChat.Feedback)
  @_Concurrency.MainActor public func perform() async
  @_Concurrency.MainActor public func play() async
}
extension SwiftUICore.Binding {
  public func feedback(_ feedback: FlomniChat.AnyFeedback) -> SwiftUICore.Binding<Value>
}
extension SwiftUICore.Binding where Value : Swift.BinaryFloatingPoint {
  public func feedback(_ feedback: FlomniChat.AnyFeedback, step: Value) -> SwiftUICore.Binding<Value>
}
extension SwiftUICore.Binding where Value : Swift.BinaryInteger {
  public func feedback(_ feedback: FlomniChat.AnyFeedback, step: Value) -> SwiftUICore.Binding<Value>
}
@available(iOS 14, *)
@available(macOS, unavailable)
extension FlomniChat.AnyFeedback {
  public static var flash: FlomniChat.AnyFeedback {
    get
  }
  public static func flash(_ color: SwiftUICore.Color, duration: Swift.Double = 0.15) -> FlomniChat.AnyFeedback
}
public func withHaptic<Result>(_ style: FlomniChat.HapticStyle = .selection, _ body: () throws -> Result) rethrows -> Result
public func withHaptic<Result>(intensity: Swift.Double, sharpness: Swift.Double, relativeTime: Foundation.TimeInterval = 0, duration: Foundation.TimeInterval = 0, _ body: () throws -> Result) rethrows -> Result
public func withHaptic<Result>(_ events: [FlomniChat.HapticEvent], _ body: () throws -> Result) rethrows -> Result
public func withHaptic<Result>(_ pattern: CoreHaptics.CHHapticPattern, _ body: () throws -> Result) rethrows -> Result
public func withHaptic<Result>(_ url: Foundation.URL, _ body: () throws -> Result) rethrows -> Result
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func haptic<V>(_ style: FlomniChat.HapticStyle, value: V) -> some SwiftUICore.View where V : Swift.Equatable
  
  @_Concurrency.MainActor @preconcurrency public func haptic<V>(_ events: [FlomniChat.HapticEvent], value: V) -> some SwiftUICore.View where V : Swift.Equatable
  
  @_Concurrency.MainActor @preconcurrency public func haptic<V>(_ pattern: CoreHaptics.CHHapticPattern, value: V) -> some SwiftUICore.View where V : Swift.Equatable
  
  @_Concurrency.MainActor @preconcurrency public func haptic<V>(_ url: Foundation.URL, value: V) -> some SwiftUICore.View where V : Swift.Equatable
  
}
extension FlomniChat.AnyFeedback {
  public static func haptic(intensity: Swift.Double, sharpness: Swift.Double, relativeTime: Foundation.TimeInterval = 0, duration: Foundation.TimeInterval = 0) -> FlomniChat.AnyFeedback
  public static func haptic(_ events: FlomniChat.HapticEvent...) -> FlomniChat.AnyFeedback
  public static func haptic(_ events: [FlomniChat.HapticEvent]) -> FlomniChat.AnyFeedback
  public static func haptic(_ pattern: CoreHaptics.CHHapticPattern) -> FlomniChat.AnyFeedback
  @available(iOS 16, *)
  public static func haptic(url: Foundation.URL) -> FlomniChat.AnyFeedback
}
public enum HapticEvent : Swift.CustomStringConvertible {
  case haptic(intensity: Swift.Double, sharpness: Swift.Double, relativeTime: Foundation.TimeInterval = 0, duration: Foundation.TimeInterval = 0.01)
  public var description: Swift.String {
    get
  }
}
extension FlomniChat.AnyFeedback {
  public static func haptic(_ style: FlomniChat.HapticStyle) -> FlomniChat.AnyFeedback
}
extension FlomniChat.HapticStyle {
  public static var selection: FlomniChat.HapticStyle {
    get
  }
  public static var notification: FlomniChat.HapticStyle {
    get
  }
  public static var impact: FlomniChat.HapticStyle {
    get
  }
  public static func notification(_ style: FlomniChat.NotificationStyle) -> FlomniChat.HapticStyle
  public static func impact(_ style: FlomniChat.ImpactStyle, intensity: Swift.Double = 1) -> FlomniChat.HapticStyle
}
public enum NotificationStyle : Swift.String {
  case success
  case warning
  case error
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.String)
  #else
  public init?(rawValue: Swift.String)
  #endif
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ImpactStyle : Swift.String {
  case light
  case soft
  case medium
  case heavy
  case rigid
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.String)
  #else
  public init?(rawValue: Swift.String)
  #endif
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct HapticStyle : Swift.CustomStringConvertible {
}
extension FlomniChat.HapticStyle {
  public var description: Swift.String {
    get
  }
}
extension FlomniChat.AnyFeedback {
  public func delay(_ delay: Swift.Double) -> FlomniChat.AnyFeedback
}
public protocol Feedback {
  func perform() async
}
public func withFeedback<Result>(_ feedback: FlomniChat.AnyFeedback = .haptic(.selection), _ body: () throws -> Result) rethrows -> Result
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func feedback<V>(_ feedback: FlomniChat.AnyFeedback, value: V) -> some SwiftUICore.View where V : Swift.Equatable
  
}
extension SwiftUICore.ModifiedContent : @unchecked Swift.Sendable {
}
extension SwiftUICore.ModifiedContent : FlomniChat.Feedback where Content : FlomniChat.Feedback, Modifier : FlomniChat.Feedback {
  public func perform() async
}
extension FlomniChat.Feedback {
  public func combined(with feedback: FlomniChat.AnyFeedback) -> FlomniChat.AnyFeedback
}
@_Concurrency.MainActor @preconcurrency public struct FittingGeometryReader<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(axis: SwiftUICore.Axis = .vertical, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.GeometryProxy) -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat21FittingGeometryReaderV4bodyQrvp", 0) __<Content>
}
public struct PushDevice {
  public let deviceId: FlomniChat.DeviceId
  public let pushProvider: Swift.String
  public let providerName: Swift.String?
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func apn(token: Foundation.Data, providerName: Swift.String? = nil) -> FlomniChat.PushDevice
  #else
  public static func apn(token: Foundation.Data, providerName: Swift.String? = nil) -> FlomniChat.PushDevice
  #endif
}
public typealias DeviceId = Swift.String
public struct Device : Swift.Codable, Swift.Equatable {
  public let id: FlomniChat.DeviceId
  public let createdAt: Foundation.Date?
  public static func == (a: FlomniChat.Device, b: FlomniChat.Device) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.RangeReplaceableCollection {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public subscript(safe index: Self.Index) -> Self.Iterator.Element? {
    get
    set
  }
  #else
  public subscript(safe index: Self.Index) -> Self.Iterator.Element? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public subscript(safe bounds: Swift.Range<Self.Index>) -> Self.SubSequence? {
    get
  }
  #else
  public subscript(safe bounds: Swift.Range<Self.Index>) -> Self.SubSequence? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public subscript(safe bounds: Swift.ClosedRange<Self.Index>) -> Self.SubSequence? {
    get
  }
  #else
  public subscript(safe bounds: Swift.ClosedRange<Self.Index>) -> Self.SubSequence? {
    get
  }
  #endif
}
extension Swift.StaticString {
  public var lastPathComponent: Swift.String {
    get
  }
}
public protocol LogTagging : Swift.Hashable {
  var value: Swift.String { get }
}
@_Concurrency.MainActor @preconcurrency public struct LoggerView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(logger: FlomniChat.SwiftUILogger = .default, shareAction: @escaping (Swift.String) -> Swift.Void = { print($0) })
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat10LoggerViewV4bodyQrvp", 0) __
}
open class SwiftUILogger : Combine.ObservableObject, Swift.TextOutputStream {
  open func write(_ string: Swift.String)
  public enum Level : Swift.Int {
    case success, info, warning, error, fatal, debug, trace
    public var description: Swift.String {
      get
    }
    public var color: SwiftUICore.Color {
      get
    }
    public var emoji: SwiftUICore.Image {
      get
    }
    public var symbol: Swift.String {
      get
    }
    public var osLogType: os.OSLogType {
      get
    }
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init?(rawValue: Swift.Int)
    #else
    public init?(rawValue: Swift.Int)
    #endif
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public struct Event : Swift.Identifiable {
    public struct Metadata {
      public let file: Swift.StaticString
      public let line: Swift.Int
      public let tags: [any FlomniChat.LogTagging]
      public init(file: Swift.StaticString, line: Swift.Int, tags: [any FlomniChat.LogTagging])
    }
    public let id: Foundation.UUID
    public let dateCreated: Foundation.Date
    public let level: FlomniChat.SwiftUILogger.Level
    public let message: Foundation.NSAttributedString
    public let error: (any Swift.Error)?
    public let metadata: FlomniChat.SwiftUILogger.Event.Metadata
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init(level: FlomniChat.SwiftUILogger.Level, message: Swift.String, error: (any Swift.Error)? = nil, tags: [any FlomniChat.LogTagging] = [], _ file: Swift.StaticString = #fileID, _ line: Swift.Int = #line)
    #else
    public init(level: FlomniChat.SwiftUILogger.Level, message: Swift.String, error: (any Swift.Error)? = nil, tags: [any FlomniChat.LogTagging] = [], _ file: Swift.StaticString = #fileID, _ line: Swift.Int = #line)
    #endif
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias ID = Foundation.UUID
  }
  public static var `default`: FlomniChat.SwiftUILogger
  @usableFromInline
  internal var lock: Foundation.NSLock
  final public let name: Swift.String?
  @Combine.Published @_projectedValueProperty($logs) public var logs: [FlomniChat.SwiftUILogger.Event] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $logs: Combine.Published<[FlomniChat.SwiftUILogger.Event]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var displayedLogs: [FlomniChat.SwiftUILogger.Event] {
    get
  }
  open var blob: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(name: Swift.String? = nil, logs: [FlomniChat.SwiftUILogger.Event] = [])
  #else
  public init(name: Swift.String? = nil, logs: [FlomniChat.SwiftUILogger.Event] = [])
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable open func log(_ level: FlomniChat.SwiftUILogger.Level, _ message: Swift.String, _ error: (any Swift.Error)? = nil, _ tags: [any FlomniChat.LogTagging] = [], _ file: Swift.StaticString = #fileID, _ line: Swift.Int = #line) {
		guard Thread.isMainThread else {
			return DispatchQueue.main.async { [weak self] in
				self?.log(level, message, error, tags, file, line)
			}
		}

		lock.lock()
		defer {
 
 
 
 
 
				os.Logger.shared.log(level: level.osLogType, "\(message) \n error: \(error?.localizedDescription ?? "nil")")
 

 
			lock.unlock()
		}
		DispatchQueue.main.async { [weak self] in
			self?.logs.append(
				Event(
					level: level,
					message: message,
					error: error,
					tags: tags,
					file,
					line
				)
			)
		}
	}
  #else
  @inlinable open func log(_ level: FlomniChat.SwiftUILogger.Level, _ message: Swift.String, _ error: (any Swift.Error)? = nil, _ tags: [any FlomniChat.LogTagging] = [], _ file: Swift.StaticString = #fileID, _ line: Swift.Int = #line) {
		guard Thread.isMainThread else {
			return DispatchQueue.main.async { [weak self] in
				self?.log(level, message, error, tags, file, line)
			}
		}

		lock.lock()
		defer {
 
 
 
 
 
				os.Logger.shared.log(level: level.osLogType, "\(message) \n error: \(error?.localizedDescription ?? "nil")")
 

 
			lock.unlock()
		}
		DispatchQueue.main.async { [weak self] in
			self?.logs.append(
				Event(
					level: level,
					message: message,
					error: error,
					tags: tags,
					file,
					line
				)
			)
		}
	}
  #endif
  @inlinable open func trace(_ message: Swift.String, _ tags: [any FlomniChat.LogTagging] = [], _ file: Swift.StaticString = #fileID, _ line: Swift.Int = #line) {
		log(
			.trace,
			message,
			nil,
			tags,
			file,
			line
		)
	}
  @inlinable open func success(_ message: Swift.String, _ tags: [any FlomniChat.LogTagging] = [], _ file: Swift.StaticString = #fileID, _ line: Swift.Int = #line) {
		log(
			.success,
			message,
			nil,
			tags,
			file,
			line
		)
	}
  @inlinable open func debug(_ message: Swift.String, _ tags: [any FlomniChat.LogTagging] = [], _ file: Swift.StaticString = #fileID, _ line: Swift.Int = #line) {
		log(
			.info,
			message,
			nil,
			tags,
			file,
			line
		)
	}
  @inlinable open func info(_ message: Swift.String, _ tags: [any FlomniChat.LogTagging] = [], _ file: Swift.StaticString = #fileID, _ line: Swift.Int = #line) {
		log(
			.info,
			message,
			nil,
			tags,
			file,
			line
		)
	}
  @inlinable open func warning(_ message: Swift.String, _ tags: [any FlomniChat.LogTagging] = [], _ file: Swift.StaticString = #fileID, _ line: Swift.Int = #line) {
		log(
			.warning,
			message,
			nil,
			tags,
			file,
			line
		)
	}
  @inlinable open func fault(_ message: Swift.String, _ tags: [any FlomniChat.LogTagging] = [], _ file: Swift.StaticString = #fileID, _ line: Swift.Int = #line) {
		log(
			.warning,
			message,
			nil,
			tags,
			file,
			line
		)
	}
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable open func error(_ message: Swift.String, error: (any Swift.Error)?, _ tags: [any FlomniChat.LogTagging] = [], _ file: Swift.StaticString = #fileID, _ line: Swift.Int = #line) {
		log(
			.error,
			message,
			error,
			tags,
			file,
			line
		)
	}
  #else
  @inlinable open func error(_ message: Swift.String, error: (any Swift.Error)?, _ tags: [any FlomniChat.LogTagging] = [], _ file: Swift.StaticString = #fileID, _ line: Swift.Int = #line) {
		log(
			.error,
			message,
			error,
			tags,
			file,
			line
		)
	}
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable open func error(_ message: Swift.String, _ error: (any Swift.Error)? = nil, _ file: Swift.StaticString = #fileID, _ line: Swift.Int = #line) {
		log(
			.error,
			message,
			error,
			[],
			file,
			line
		)
	}
  #else
  @inlinable open func error(_ message: Swift.String, _ error: (any Swift.Error)? = nil, _ file: Swift.StaticString = #fileID, _ line: Swift.Int = #line) {
		log(
			.error,
			message,
			error,
			[],
			file,
			line
		)
	}
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable open func fatal(_ message: Swift.String, error: (any Swift.Error)?, _ tags: [any FlomniChat.LogTagging] = [], _ file: Swift.StaticString = #fileID, _ line: Swift.Int = #line) {
		log(
			.fatal,
			message,
			error,
			tags,
			file,
			line
		)
	}
  #else
  @inlinable open func fatal(_ message: Swift.String, error: (any Swift.Error)?, _ tags: [any FlomniChat.LogTagging] = [], _ file: Swift.StaticString = #fileID, _ line: Swift.Int = #line) {
		log(
			.fatal,
			message,
			error,
			tags,
			file,
			line
		)
	}
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension os.Logger {
  public static var shared: os.Logger
}
extension Swift.Array where Element : FlomniChat.NBScreen {
  public mutating func push(_ screen: Element)
  public mutating func pop(_ count: Swift.Int = 1)
  public mutating func popTo(index: Swift.Int)
  public mutating func popToRoot()
  @discardableResult
  public mutating func popTo(where condition: (Element) -> Swift.Bool) -> Swift.Bool
}
extension Swift.Array where Element : FlomniChat.NBScreen {
  @discardableResult
  public mutating func popTo(_ screen: Element) -> Swift.Bool
}
extension Swift.Array where Element : FlomniChat.NBScreen, Element : Swift.Identifiable {
  @discardableResult
  public mutating func popTo(id: Element.ID) -> Swift.Bool
}
extension SwiftUICore.Binding where Value : Swift.Collection {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload @_Concurrency.MainActor public func withDelaysIfUnsupported<Screen>(_ transform: (inout [Screen]) -> Swift.Void, onCompletion: (() -> Swift.Void)? = nil) where Value == [Screen]
  #else
  @_disfavoredOverload @_Concurrency.MainActor public func withDelaysIfUnsupported<Screen>(_ transform: (inout [Screen]) -> Swift.Void, onCompletion: (() -> Swift.Void)? = nil) where Value == [Screen]
  #endif
  @_Concurrency.MainActor public func withDelaysIfUnsupported<Screen>(_ transform: (inout [Screen]) -> Swift.Void) async where Value == [Screen]
}
extension SwiftUICore.Binding where Value == FlomniChat.NBNavigationPath {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload @_Concurrency.MainActor public func withDelaysIfUnsupported(_ transform: (inout FlomniChat.NBNavigationPath) -> Swift.Void, onCompletion: (() -> Swift.Void)? = nil)
  #else
  @_disfavoredOverload @_Concurrency.MainActor public func withDelaysIfUnsupported(_ transform: (inout FlomniChat.NBNavigationPath) -> Swift.Void, onCompletion: (() -> Swift.Void)? = nil)
  #endif
  @_Concurrency.MainActor public func withDelaysIfUnsupported(_ transform: (inout Value) -> Swift.Void) async
}
extension SwiftUICore.Binding {
  @_Concurrency.MainActor public func withDelaysIfUnsupported<Screen>(from start: [Screen], to end: [Screen], keyPath: Swift.WritableKeyPath<Value, [Screen]>) async
  @_Concurrency.MainActor public func scheduleRemainingSteps<Screen>(steps: [[Screen]], keyPath: Swift.WritableKeyPath<Value, [Screen]>) async
}
extension FlomniChat.NBNavigationPath {
  public struct CodableRepresentation {
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var codable: FlomniChat.NBNavigationPath.CodableRepresentation? {
    get
  }
  #else
  public var codable: FlomniChat.NBNavigationPath.CodableRepresentation? {
    get
  }
  #endif
  public init(_ codable: FlomniChat.NBNavigationPath.CodableRepresentation)
}
extension FlomniChat.NBNavigationPath.CodableRepresentation : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension FlomniChat.NBNavigationPath.CodableRepresentation : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension FlomniChat.NBNavigationPath.CodableRepresentation : Swift.Equatable {
  public static func == (lhs: FlomniChat.NBNavigationPath.CodableRepresentation, rhs: FlomniChat.NBNavigationPath.CodableRepresentation) -> Swift.Bool
}
@_hasMissingDesignatedInitializers open class DestinationBuilderHolder : Foundation.ObservableObject {
  open func build<T>(_ typedData: T) -> SwiftUICore.AnyView
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct DestinationBuilderModifier<TypedData> : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func body(content: FlomniChat.DestinationBuilderModifier<TypedData>.Content) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat26DestinationBuilderModifierV4body7contentQr7SwiftUI05_ViewE8_ContentVyACyxGG_tF", 0) __<TypedData>
}
@_Concurrency.MainActor @preconcurrency public struct DestinationBuilderView<Data> : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat22DestinationBuilderViewV4bodyQrvp", 0) __<Data>
}
public struct UseNavigationStackPolicyKey : SwiftUICore.EnvironmentKey {
  public static let defaultValue: FlomniChat.UseNavigationStackPolicy
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Value = FlomniChat.UseNavigationStackPolicy
}
public struct IsWithinNavigationStackKey : SwiftUICore.EnvironmentKey {
  public static let defaultValue: Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Value = Swift.Bool
}
extension SwiftUICore.EnvironmentValues {
  public var useNavigationStack: FlomniChat.UseNavigationStackPolicy {
    get
    set
  }
  public var isWithinNavigationStack: Swift.Bool {
    get
    set
  }
}
@_hasMissingDesignatedInitializers public class LocalDestinationIDHolder : Combine.ObservableObject {
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
@_Concurrency.MainActor @preconcurrency public struct LocalDestinationBuilderModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func body(content: FlomniChat.LocalDestinationBuilderModifier.Content) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat31LocalDestinationBuilderModifierV4body7contentQr7SwiftUI05_ViewF8_ContentVyACG_tF", 0) __
}
public typealias DestinationBuilder<T> = (T) -> SwiftUICore.AnyView
public enum NavigationBackport {
  public static func calculateSteps<Screen>(from start: [Screen], to end: [Screen]) -> [[Screen]]
}
@_hasMissingDesignatedInitializers public class NavigationPathHolder : Combine.ObservableObject {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public typealias PathNavigator = FlomniChat.Navigator<Swift.AnyHashable>
@_hasMissingDesignatedInitializers @_Concurrency.MainActor public class Navigator<Screen> : Combine.ObservableObject {
  @_Concurrency.MainActor public var path: [Screen] {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension FlomniChat.Navigator where Screen : FlomniChat.NBScreen {
  @_Concurrency.MainActor public func push(_ screen: Screen)
  @_Concurrency.MainActor public func pop(_ count: Swift.Int = 1)
  @_Concurrency.MainActor public func popTo(index: Swift.Int)
  @_Concurrency.MainActor public func popToRoot()
  @discardableResult
  @_Concurrency.MainActor public func popTo(where condition: (Screen) -> Swift.Bool) -> Swift.Bool
}
extension FlomniChat.Navigator where Screen : FlomniChat.NBScreen {
  @discardableResult
  @_Concurrency.MainActor public func popTo(_ screen: Screen) -> Swift.Bool
}
extension FlomniChat.Navigator where Screen : FlomniChat.NBScreen, Screen : Swift.Identifiable {
  @discardableResult
  @_Concurrency.MainActor public func popTo(id: Screen.ID) -> Swift.Bool
}
extension FlomniChat.Navigator where Screen == Swift.AnyHashable {
  @discardableResult
  @_Concurrency.MainActor public func popTo<T>(_: T.Type) -> Swift.Bool where T : Swift.Hashable
}
extension FlomniChat.Navigator {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload @_Concurrency.MainActor public func withDelaysIfUnsupported(transform: (inout [Screen]) -> Swift.Void, onCompletion: (() -> Swift.Void)? = nil)
  #else
  @_disfavoredOverload @_Concurrency.MainActor public func withDelaysIfUnsupported(transform: (inout [Screen]) -> Swift.Void, onCompletion: (() -> Swift.Void)? = nil)
  #endif
  @_Concurrency.MainActor public func withDelaysIfUnsupported(transform: (inout [Screen]) -> Swift.Void) async
}
@available(iOS, deprecated: 16.0, message: "Use SwiftUI's Navigation API beyond iOS 15")
@_Concurrency.MainActor @preconcurrency public struct NBNavigationLink<P, Label> : SwiftUICore.View where P : Swift.Hashable, Label : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(value: P?, @SwiftUICore.ViewBuilder label: () -> Label)
  #else
  @_Concurrency.MainActor @preconcurrency public init(value: P?, @SwiftUICore.ViewBuilder label: () -> Label)
  #endif
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "Use SwiftUI's Navigation API beyond iOS 15")
  @available(tvOS, introduced: 13.0, message: "Use SwiftUI's Navigation API beyond iOS 15")
  @available(watchOS, introduced: 6.0, message: "Use SwiftUI's Navigation API beyond iOS 15")
  @available(macOS, introduced: 10.15, message: "Use SwiftUI's Navigation API beyond iOS 15")
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat16NBNavigationLinkV4bodyQrvp", 0) __<P, Label>
}
extension FlomniChat.NBNavigationLink where Label == SwiftUICore.Text {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: P?)
  #else
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: P?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init<S>(_ title: S, value: P?) where S : Swift.StringProtocol
  #else
  @_Concurrency.MainActor @preconcurrency public init<S>(_ title: S, value: P?) where S : Swift.StringProtocol
  #endif
}
@available(iOS, deprecated: 16.0, message: "Use SwiftUI's Navigation API beyond iOS 15")
public struct NBNavigationPath : Swift.Equatable {
  public var elements: [Swift.AnyHashable]
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var last: Swift.AnyHashable? {
    get
  }
  #else
  public var last: Swift.AnyHashable? {
    get
  }
  #endif
  public init(_ elements: [Swift.AnyHashable] = [])
  public init<S>(_ elements: S) where S : Swift.Sequence, S.Element : Swift.Hashable
  public mutating func append<V>(_ value: V) where V : Swift.Hashable
  public mutating func removeLast(_ k: Swift.Int = 1)
  public static func == (a: FlomniChat.NBNavigationPath, b: FlomniChat.NBNavigationPath) -> Swift.Bool
}
extension FlomniChat.NBNavigationPath {
  public mutating func push(_ screen: Swift.AnyHashable)
  public mutating func pop(_ count: Swift.Int = 1)
  public mutating func popTo(index: Swift.Int)
  public mutating func popToRoot()
  @discardableResult
  public mutating func popTo(where condition: (Swift.AnyHashable) -> Swift.Bool) -> Swift.Bool
}
extension FlomniChat.NBNavigationPath {
  @discardableResult
  public mutating func popTo(_ screen: Swift.AnyHashable) -> Swift.Bool
  @discardableResult
  public mutating func popTo<T>(_: T.Type) -> Swift.Bool where T : Swift.Hashable
}
@available(iOS, deprecated: 16.0, message: "Use SwiftUI's Navigation API beyond iOS 15")
@_Concurrency.MainActor @preconcurrency public struct NBNavigationStack<Data> : SwiftUICore.View where Data : Swift.Hashable {
  @_Concurrency.MainActor @preconcurrency public var content: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(path: SwiftUICore.Binding<[Data]>?, @SwiftUICore.ViewBuilder emptyView: @escaping () -> some View = { ContentUnavailableView("No Destination :(", subheadline: "Missing Destination Anchor NBNavigationStack path", symbol: .rectangleAndTextMagnifyingglass)}, @SwiftUICore.ViewBuilder root: @escaping () -> some View)
  #else
  @_Concurrency.MainActor @preconcurrency public init(path: SwiftUICore.Binding<[Data]>?, @SwiftUICore.ViewBuilder emptyView: @escaping () -> some View = { ContentUnavailableView("No Destination :(", subheadline: "Missing Destination Anchor NBNavigationStack path", symbol: .rectangleAndTextMagnifyingglass)}, @SwiftUICore.ViewBuilder root: @escaping () -> some View)
  #endif
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "Use SwiftUI's Navigation API beyond iOS 15")
  @available(tvOS, introduced: 13.0, message: "Use SwiftUI's Navigation API beyond iOS 15")
  @available(watchOS, introduced: 6.0, message: "Use SwiftUI's Navigation API beyond iOS 15")
  @available(macOS, introduced: 10.15, message: "Use SwiftUI's Navigation API beyond iOS 15")
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat17NBNavigationStackV4bodyQrvp", 0) __<Data>
}
extension FlomniChat.NBNavigationStack where Data == Swift.AnyHashable {
  @_Concurrency.MainActor @preconcurrency public init(@SwiftUICore.ViewBuilder emptyView: @escaping () -> some View = { ContentUnavailableView("No Destination :(", subheadline: "Missing Destination Anchor NBNavigationStack path", symbol: .rectangleAndTextMagnifyingglass)}, @SwiftUICore.ViewBuilder root: @escaping () -> some View)
}
extension FlomniChat.NBNavigationStack where Data == Swift.AnyHashable {
  @_Concurrency.MainActor @preconcurrency public init(path: SwiftUICore.Binding<FlomniChat.NBNavigationPath>, @SwiftUICore.ViewBuilder emptyView: @escaping () -> some View = { ContentUnavailableView("No Destination :(", subheadline: "Missing Destination Anchor NBNavigationStack path", symbol: .rectangleAndTextMagnifyingglass)}, @SwiftUICore.ViewBuilder root: @escaping () -> some View)
}
public protocol NBScreen : Swift.Hashable {
}
extension Swift.AnyHashable : FlomniChat.NBScreen {
}
@_Concurrency.MainActor @preconcurrency public struct Node<Screen> : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat4NodeV4bodyQrvp", 0) __<Screen>
}
extension Combine.ObservableObject {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload @_Concurrency.MainActor public func withDelaysIfUnsupported<Screen>(_ keyPath: Swift.WritableKeyPath<Self, [Screen]>, transform: (inout [Screen]) -> Swift.Void, onCompletion: (() -> Swift.Void)? = nil)
  #else
  @_disfavoredOverload @_Concurrency.MainActor public func withDelaysIfUnsupported<Screen>(_ keyPath: Swift.WritableKeyPath<Self, [Screen]>, transform: (inout [Screen]) -> Swift.Void, onCompletion: (() -> Swift.Void)? = nil)
  #endif
  @_Concurrency.MainActor public func withDelaysIfUnsupported<Screen>(_ keyPath: Swift.WritableKeyPath<Self, [Screen]>, transform: (inout [Screen]) -> Swift.Void) async
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload @_Concurrency.MainActor public func withDelaysIfUnsupported(_ keyPath: Swift.WritableKeyPath<Self, FlomniChat.NBNavigationPath>, transform: (inout FlomniChat.NBNavigationPath) -> Swift.Void, onCompletion: (() -> Swift.Void)? = nil)
  #else
  @_disfavoredOverload @_Concurrency.MainActor public func withDelaysIfUnsupported(_ keyPath: Swift.WritableKeyPath<Self, FlomniChat.NBNavigationPath>, transform: (inout FlomniChat.NBNavigationPath) -> Swift.Void, onCompletion: (() -> Swift.Void)? = nil)
  #endif
  @_Concurrency.MainActor public func withDelaysIfUnsupported(_ keyPath: Swift.WritableKeyPath<Self, FlomniChat.NBNavigationPath>, transform: (inout FlomniChat.NBNavigationPath) -> Swift.Void) async
}
@_hasMissingDesignatedInitializers public class PathAppender : Combine.ObservableObject {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct Router<Screen, RootView> : SwiftUICore.View where RootView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat6RouterV4bodyQrvp", 0) __<Screen, RootView>
}
public enum UseNavigationStackPolicy {
  case whenAvailable
  case never
  public static func == (a: FlomniChat.UseNavigationStackPolicy, b: FlomniChat.UseNavigationStackPolicy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct NavigationLinkModifier<Destination> : SwiftUICore.ViewModifier where Destination : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func body(content: FlomniChat.NavigationLinkModifier<Destination>.Content) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat22NavigationLinkModifierV4body7contentQr7SwiftUI05_ViewE8_ContentVyACyxGG_tF", 0) __<Destination>
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func _navigationDestination<Destination>(isActive: SwiftUICore.Binding<Swift.Bool>, destination: Destination) -> some SwiftUICore.View where Destination : SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS, deprecated: 16.0, message: "Use SwiftUI's Navigation API beyond iOS 15")
  @_Concurrency.MainActor @preconcurrency public func nbNavigationDestination<D, C>(for pathElementType: D.Type, @SwiftUICore.ViewBuilder destination builder: @escaping (D) -> C) -> some SwiftUICore.View where D : Swift.Hashable, C : SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS, deprecated: 16.0, message: "Use SwiftUI's Navigation API beyond iOS 15")
  @_Concurrency.MainActor @preconcurrency public func nbNavigationDestination<V>(isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder destination: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS, deprecated: 16.0, message: "Use SwiftUI's Navigation API beyond iOS 15")
  @_Concurrency.MainActor @preconcurrency public func nbUseNavigationStack(_ policy: FlomniChat.UseNavigationStackPolicy) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func onFirstAppear(perform action: (() -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  #else
  @_Concurrency.MainActor @preconcurrency public func onFirstAppear(perform action: (() -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  #endif
}
public struct PHPickerAsset : Swift.Identifiable, Swift.Hashable {
  public var id: Swift.String
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: FlomniChat.PHPickerAsset, b: FlomniChat.PHPickerAsset) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.NSItemProvider {
  public func loadObject<T>(of type: T.Type) async throws -> T where T : Swift._ObjectiveCBridgeable, T._ObjectiveCType : Foundation.NSItemProviderReading
}
extension Foundation.NSData : Foundation.NSItemProviderReading {
  @objc public static var readableTypeIdentifiersForItemProvider: [Swift.String] {
    @objc get
  }
  @objc public static func object(withItemProviderData data: Foundation.Data, typeIdentifier: Swift.String) throws -> Self
}
extension PhotosUI.PHPickerResult : Swift.Identifiable {
  public var id: Swift.Int {
    get
  }
  public func image() async throws -> UIKit.UIImage
  public func fileAttributes() async throws -> (Swift.String, Swift.String)
  @available(iOS 14.0, macOS 13.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias ID = Swift.Int
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func _photoPicker(isPresented: SwiftUICore.Binding<Swift.Bool>, selection: SwiftUICore.Binding<[PhotosUI.PHPickerResult]>, filter: PhotosUI.PHPickerFilter?, maxSelectionCount: Swift.Int?, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode, library: Photos.PHPhotoLibrary) -> some SwiftUICore.View
  
  #else
  @_Concurrency.MainActor @preconcurrency public func _photoPicker(isPresented: SwiftUICore.Binding<Swift.Bool>, selection: SwiftUICore.Binding<[PhotosUI.PHPickerResult]>, filter: PhotosUI.PHPickerFilter?, maxSelectionCount: Swift.Int?, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode, library: Photos.PHPhotoLibrary) -> some SwiftUICore.View
  
  #endif
}
@_Concurrency.MainActor @preconcurrency public struct PhotoPicker<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat11PhotoPickerV4bodyQrvp", 0) __<Label>
}
extension FlomniChat.PhotoPicker {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(selection: SwiftUICore.Binding<PhotosUI.PHPickerResult?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic, @SwiftUICore.ViewBuilder label: () -> Label)
  #else
  @_Concurrency.MainActor @preconcurrency public init(selection: SwiftUICore.Binding<PhotosUI.PHPickerResult?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic, @SwiftUICore.ViewBuilder label: () -> Label)
  #endif
}
extension FlomniChat.PhotoPicker {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(selection: SwiftUICore.Binding<PhotosUI.PHPickerResult?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic, photoLibrary: Photos.PHPhotoLibrary, @SwiftUICore.ViewBuilder label: () -> Label)
  #else
  @_Concurrency.MainActor @preconcurrency public init(selection: SwiftUICore.Binding<PhotosUI.PHPickerResult?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic, photoLibrary: Photos.PHPhotoLibrary, @SwiftUICore.ViewBuilder label: () -> Label)
  #endif
}
extension FlomniChat.PhotoPicker where Label == SwiftUICore.Text {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<PhotosUI.PHPickerResult?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic)
  #else
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<PhotosUI.PHPickerResult?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init<S>(_ title: S, selection: SwiftUICore.Binding<PhotosUI.PHPickerResult?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic) where S : Swift.StringProtocol
  #else
  @_Concurrency.MainActor @preconcurrency public init<S>(_ title: S, selection: SwiftUICore.Binding<PhotosUI.PHPickerResult?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<PhotosUI.PHPickerResult?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic, photoLibrary: Photos.PHPhotoLibrary)
  #else
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<PhotosUI.PHPickerResult?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic, photoLibrary: Photos.PHPhotoLibrary)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init<S>(_ title: S, selection: SwiftUICore.Binding<PhotosUI.PHPickerResult?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic, photoLibrary: Photos.PHPhotoLibrary) where S : Swift.StringProtocol
  #else
  @_Concurrency.MainActor @preconcurrency public init<S>(_ title: S, selection: SwiftUICore.Binding<PhotosUI.PHPickerResult?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic, photoLibrary: Photos.PHPhotoLibrary) where S : Swift.StringProtocol
  #endif
}
extension FlomniChat.PhotoPicker {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(selection: SwiftUICore.Binding<[PhotosUI.PHPickerResult]>, maxSelectionCount: Swift.Int? = nil, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic, @SwiftUICore.ViewBuilder label: () -> Label)
  #else
  @_Concurrency.MainActor @preconcurrency public init(selection: SwiftUICore.Binding<[PhotosUI.PHPickerResult]>, maxSelectionCount: Swift.Int? = nil, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic, @SwiftUICore.ViewBuilder label: () -> Label)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(selection: SwiftUICore.Binding<[PhotosUI.PHPickerResult]>, maxSelectionCount: Swift.Int? = nil, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic, photoLibrary: Photos.PHPhotoLibrary, @SwiftUICore.ViewBuilder label: () -> Label)
  #else
  @_Concurrency.MainActor @preconcurrency public init(selection: SwiftUICore.Binding<[PhotosUI.PHPickerResult]>, maxSelectionCount: Swift.Int? = nil, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic, photoLibrary: Photos.PHPhotoLibrary, @SwiftUICore.ViewBuilder label: () -> Label)
  #endif
}
extension FlomniChat.PhotoPicker where Label == SwiftUICore.Text {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<[PhotosUI.PHPickerResult]>, maxSelectionCount: Swift.Int? = nil, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic)
  #else
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<[PhotosUI.PHPickerResult]>, maxSelectionCount: Swift.Int? = nil, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init<S>(_ title: S, selection: SwiftUICore.Binding<[PhotosUI.PHPickerResult]>, maxSelectionCount: Swift.Int? = nil, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic) where S : Swift.StringProtocol
  #else
  @_Concurrency.MainActor @preconcurrency public init<S>(_ title: S, selection: SwiftUICore.Binding<[PhotosUI.PHPickerResult]>, maxSelectionCount: Swift.Int? = nil, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<[PhotosUI.PHPickerResult]>, maxSelectionCount: Swift.Int? = nil, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic, photoLibrary: Photos.PHPhotoLibrary)
  #else
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<[PhotosUI.PHPickerResult]>, maxSelectionCount: Swift.Int? = nil, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic, photoLibrary: Photos.PHPhotoLibrary)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init<S>(_ title: S, selection: SwiftUICore.Binding<[PhotosUI.PHPickerResult]>, maxSelectionCount: Swift.Int? = nil, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic, photoLibrary: Photos.PHPhotoLibrary) where S : Swift.StringProtocol
  #else
  @_Concurrency.MainActor @preconcurrency public init<S>(_ title: S, selection: SwiftUICore.Binding<[PhotosUI.PHPickerResult]>, maxSelectionCount: Swift.Int? = nil, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic, photoLibrary: Photos.PHPhotoLibrary) where S : Swift.StringProtocol
  #endif
}
extension PhotosUI.PHPickerResult {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func loadTransfer<T>(_type: T.Type) async throws -> T?
  #else
  public func loadTransfer<T>(_type: T.Type) async throws -> T?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func loadTransfer<T>(_type: T.Type, completion: @escaping (Swift.Result<T?, any Swift.Error>) -> Swift.Void)
  #else
  public func loadTransfer<T>(_type: T.Type, completion: @escaping (Swift.Result<T?, any Swift.Error>) -> Swift.Void)
  #endif
}
extension Foundation.NSItemProvider {
  public func loadData() async throws -> Foundation.Data
  public func loadDataRepresentation(forTypeIdentifier typeIdentifier: Swift.String) async throws -> Foundation.Data
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func photoPicker(isPresented: SwiftUICore.Binding<Swift.Bool>, selection: SwiftUICore.Binding<PhotosUI.PHPickerResult?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic, photoLibrary: Photos.PHPhotoLibrary = .shared()) -> some SwiftUICore.View
  
  #else
  @_Concurrency.MainActor @preconcurrency public func photoPicker(isPresented: SwiftUICore.Binding<Swift.Bool>, selection: SwiftUICore.Binding<PhotosUI.PHPickerResult?>, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .automatic, photoLibrary: Photos.PHPhotoLibrary = .shared()) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func photosPicker(isPresented: SwiftUICore.Binding<Swift.Bool>, selection: SwiftUICore.Binding<[PhotosUI.PHPickerResult]>, maxSelectionCount: Swift.Int? = nil, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .compatible, photoLibrary: Photos.PHPhotoLibrary = .shared()) -> some SwiftUICore.View
  
  #else
  @_Concurrency.MainActor @preconcurrency public func photosPicker(isPresented: SwiftUICore.Binding<Swift.Bool>, selection: SwiftUICore.Binding<[PhotosUI.PHPickerResult]>, maxSelectionCount: Swift.Int? = nil, matching filter: PhotosUI.PHPickerFilter? = nil, preferredAssetRepresentationMode: PhotosUI.PHPickerConfiguration.AssetRepresentationMode = .compatible, photoLibrary: Photos.PHPhotoLibrary = .shared()) -> some SwiftUICore.View
  
  #endif
}
@_Concurrency.MainActor @preconcurrency public struct AsyncButton<Label, Trigger> : SwiftUICore.View where Label : SwiftUICore.View, Trigger : Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat11AsyncButtonV4bodyQrvp", 0) __<Label, Trigger>
}
extension FlomniChat.AsyncButton where Trigger == Swift.Never {
  @_Concurrency.MainActor @preconcurrency public init(action: @escaping () async -> Swift.Void, @SwiftUICore.ViewBuilder label: () -> Label)
}
extension UIKit.UIImage : Swift.Identifiable {
  public var id: Swift.Int {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.Int
}

extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func cameraSheet(isPresented: SwiftUICore.Binding<Swift.Bool>, captureResult: SwiftUICore.Binding<UIKit.UIImage?>) -> some SwiftUICore.View
  
  #else
  @_Concurrency.MainActor @preconcurrency public func cameraSheet(isPresented: SwiftUICore.Binding<Swift.Bool>, captureResult: SwiftUICore.Binding<UIKit.UIImage?>) -> some SwiftUICore.View
  
  #endif
}
@frozen @_Concurrency.MainActor @preconcurrency public struct CameraView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency private var _dismiss: SwiftUICore.Environment<SwiftUI.DismissAction>
  @_Concurrency.MainActor @preconcurrency private let camera: FlomniChat.Camera = .init()
  @_Concurrency.MainActor @preconcurrency private var _viewfinderImage: SwiftUICore.State<SwiftUICore.Image?>
  @_Concurrency.MainActor @preconcurrency private var _outputImage: SwiftUICore.Binding<UIKit.UIImage?>
  @_Concurrency.MainActor @preconcurrency private var _capturedImage: SwiftUICore.State<UIKit.UIImage?>
  @_Concurrency.MainActor @preconcurrency private var _authorizationStatus: SwiftUICore.State<AVFoundation.AVAuthorizationStatus>
  @_Concurrency.MainActor @preconcurrency private var _outputSize: SwiftUICore.State<CoreFoundation.CGSize>
  @_Concurrency.MainActor @preconcurrency private let options: FlomniChat.CameraView.CameraViewOptions = .init()
  @_Concurrency.MainActor @preconcurrency private let barHeightFactor: Swift.Double = 0.15
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(_ outputImage: SwiftUICore.Binding<UIKit.UIImage?>)
  #else
  @_Concurrency.MainActor @preconcurrency public init(_ outputImage: SwiftUICore.Binding<UIKit.UIImage?>)
  #endif
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency private var _cameraNotAutorizedAfterAppear: SwiftUICore.State<Swift.Bool>
  public struct CameraViewOptions {
    public init(automaticallyRequestAuthorization: Swift.Bool = true, isTakePictureFeedbackEnabled: Swift.Bool = true)
    public static var `default`: FlomniChat.CameraView.CameraViewOptions {
      get
    }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat10CameraViewV4bodyQrvp", 0) __
}
@objc @_inheritsConvenienceInitializers public class Camera : ObjectiveC.NSObject, AVFoundation.AVCapturePhotoCaptureDelegate {
  @usableFromInline
  @objc override dynamic internal init()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc public func photoOutput(_: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: (any Swift.Error)?)
  #else
  @objc public func photoOutput(_: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: (any Swift.Error)?)
  #endif
  @objc deinit
}
extension FlomniChat.Camera : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @objc dynamic public func captureOutput(_: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
public enum CameraError : Swift.Error {
  case missingPhotoOutput, missingVideoOutput
  public static func == (a: FlomniChat.CameraError, b: FlomniChat.CameraError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension CoreImage.CIImage {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var image: SwiftUICore.Image? {
    get
  }
  #else
  public var image: SwiftUICore.Image? {
    get
  }
  #endif
}
public struct TakePictureAction {
  public func callAsFunction()
}
extension SwiftUICore.EnvironmentValues {
  public var takePicture: FlomniChat.TakePictureAction {
    get
  }
}

extension FlomniChat.ContentUnavailableView where Content == SwiftUICore.EmptyView {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(_ title: Swift.String, subheadline: Swift.String, symbol: FlomniChat.SFSymbol, actionTitle: Swift.String = "Retry", actionSymbol: FlomniChat.SFSymbol = .arrowClockwise, action: (() -> Swift.Void)? = nil)
  #else
  @_Concurrency.MainActor @preconcurrency public init(_ title: Swift.String, subheadline: Swift.String, symbol: FlomniChat.SFSymbol, actionTitle: Swift.String = "Retry", actionSymbol: FlomniChat.SFSymbol = .arrowClockwise, action: (() -> Swift.Void)? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(_ title: Swift.String, subheadline: Swift.String, image: SwiftUICore.Image, actionTitle: Swift.String = "Retry", actionSymbol: FlomniChat.SFSymbol = .arrowClockwise, action: (() -> Swift.Void)? = nil)
  #else
  @_Concurrency.MainActor @preconcurrency public init(_ title: Swift.String, subheadline: Swift.String, image: SwiftUICore.Image, actionTitle: Swift.String = "Retry", actionSymbol: FlomniChat.SFSymbol = .arrowClockwise, action: (() -> Swift.Void)? = nil)
  #endif
}
@available(iOS, introduced: 14.0, deprecated: 16.0, renamed: "ContentUnavailableView")
@_Concurrency.MainActor @preconcurrency public struct ContentUnavailableView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(_ title: Swift.String, message: Swift.String, image: SwiftUICore.Image, actionTitle: Swift.String = "Retry", actionSymbol: FlomniChat.SFSymbol = .arrowClockwise, action: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content)
  #else
  @_Concurrency.MainActor @preconcurrency public init(_ title: Swift.String, message: Swift.String, image: SwiftUICore.Image, actionTitle: Swift.String = "Retry", actionSymbol: FlomniChat.SFSymbol = .arrowClockwise, action: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(_ title: Swift.String, image: FlomniChat.SFSymbol, actionTitle: Swift.String = "Retry", actionSymbol: FlomniChat.SFSymbol = .arrowClockwise, action: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content)
  #else
  @_Concurrency.MainActor @preconcurrency public init(_ title: Swift.String, image: FlomniChat.SFSymbol, actionTitle: Swift.String = "Retry", actionSymbol: FlomniChat.SFSymbol = .arrowClockwise, action: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(_ title: Swift.String, symbol: Swift.String, actionTitle: Swift.String = "Retry", actionSymbol: FlomniChat.SFSymbol = .arrowClockwise, action: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content)
  #else
  @_Concurrency.MainActor @preconcurrency public init(_ title: Swift.String, symbol: Swift.String, actionTitle: Swift.String = "Retry", actionSymbol: FlomniChat.SFSymbol = .arrowClockwise, action: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(_ title: Swift.String, symbol: FlomniChat.SFSymbol, description: Swift.String, actionTitle: Swift.String = "Retry", actionSymbol: FlomniChat.SFSymbol = .arrowClockwise, action: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content)
  #else
  @_Concurrency.MainActor @preconcurrency public init(_ title: Swift.String, symbol: FlomniChat.SFSymbol, description: Swift.String, actionTitle: Swift.String = "Retry", actionSymbol: FlomniChat.SFSymbol = .arrowClockwise, action: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content)
  #endif
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS, introduced: 14.0, deprecated: 16.0, renamed: "ContentUnavailableView")
  @available(tvOS, introduced: 13.0, renamed: "ContentUnavailableView")
  @available(watchOS, introduced: 6.0, renamed: "ContentUnavailableView")
  @available(macOS, introduced: 10.15, renamed: "ContentUnavailableView")
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat22ContentUnavailableViewV4bodyQrvp", 0) __<Content>
}

public protocol ErrorAlertConvertible : Swift.Error {
  var errorTitle: Swift.String { get }
  var errorMessage: Swift.String { get }
  var errorButtonText: Swift.String { get }
}
extension FlomniChat.ErrorAlertConvertible {
  public var errorAlert: SwiftUI.Alert {
    get
  }
}
public protocol ErrorAlerter {
  var alert: FlomniChat.AlertContext { get }
}
@_Concurrency.MainActor extension FlomniChat.ErrorAlerter {
  @_Concurrency.MainActor public func alert(error: any Swift.Error, okButtonText: Swift.String = "OK")
}
extension FlomniChat.ErrorAlerter {
  public typealias AsyncOperation = () async throws -> Swift.Void
  public typealias BlockCompletion<ErrorType> = (Self.BlockResult<ErrorType>) -> Swift.Void where ErrorType : Swift.Error
  public typealias BlockResult<ErrorType> = Swift.Result<Swift.Void, ErrorType> where ErrorType : Swift.Error
  public typealias BlockOperation<ErrorType> = ((Self.BlockResult<ErrorType>) -> Swift.Void) -> Swift.Void where ErrorType : Swift.Error
  public func alertAsync(error: any Swift.Error, okButtonText: Swift.String = "OK")
  public func tryWithErrorAlert<ErrorType>(_ operation: @escaping Self.BlockOperation<ErrorType>, completion: @escaping Self.BlockCompletion<ErrorType>) where ErrorType : Swift.Error
  public func tryWithErrorAlert(_ operation: @escaping Self.AsyncOperation)
}
@_inheritsConvenienceInitializers public class AlertContext : FlomniChat.PresentationContext<SwiftUI.Alert> {
  public func present(_ alert: @autoclosure @escaping () -> SwiftUI.Alert)
  override public init()
  @objc deinit
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func alert(_ context: FlomniChat.AlertContext) -> some SwiftUICore.View
  
}
open class PresentationContext<Content> : Combine.ObservableObject {
  public init()
  @Combine.Published @_projectedValueProperty($isActive) public var isActive: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isActive: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @Combine.Published @_projectedValueProperty($content) public var content: (() -> Content)? {
    get
  }
  #else
  @Combine.Published @_projectedValueProperty($content) public var content: (() -> Content)? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var $content: Combine.Published<(() -> Content)?>.Publisher {
    get
  }
  #else
  public var $content: Combine.Published<(() -> Content)?>.Publisher {
    get
  }
  #endif
  public var isActiveBinding: SwiftUICore.Binding<Swift.Bool> {
    get
  }
  public func dismiss()
  public func presentContent(_ content: @autoclosure @escaping () -> Content)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct DroppableView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(thumbnail: FlomniChat.DroppableView.Thumbnail, expanded: FlomniChat.DroppableView.Expanded, thumbnailViewBackgroundColor: SwiftUICore.Color = Color(.tertiarySystemGroupedBackground), expandedViewBackgroundColor: SwiftUICore.Color = Color(.systemGroupedBackground), thumbnailViewCornerRadius: CoreFoundation.CGFloat = 6, expandedViewCornerRadius: CoreFoundation.CGFloat = 6, textToCopy: Swift.String)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public struct Thumbnail : SwiftUICore.View, Swift.Identifiable {
    @_Concurrency.MainActor @preconcurrency public var id: Foundation.UUID
    @_Concurrency.MainActor @preconcurrency public var content: any SwiftUICore.View
    @_Concurrency.MainActor @preconcurrency public init(id: Foundation.UUID = UUID(), @SwiftUICore.ViewBuilder content: () -> any SwiftUICore.View)
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat13DroppableViewV9ThumbnailV4bodyQrvp", 0) __
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias ID = Foundation.UUID
  }
  @_Concurrency.MainActor @preconcurrency public struct Expanded : SwiftUICore.View, Swift.Identifiable {
    @_Concurrency.MainActor @preconcurrency public var id: Foundation.UUID
    @_Concurrency.MainActor @preconcurrency public var content: any SwiftUICore.View
    @_Concurrency.MainActor @preconcurrency public init(id: Foundation.UUID = UUID(), @SwiftUICore.ViewBuilder content: () -> any SwiftUICore.View)
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat13DroppableViewV8ExpandedV4bodyQrvp", 0) __
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias ID = Foundation.UUID
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat13DroppableViewV4bodyQrvp", 0) __
}
extension Swift.Bool : Swift.Identifiable {
  public var id: Swift.Bool {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.Bool
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func floatingPopover<Item>(item: SwiftUICore.Binding<Item?>, @SwiftUICore.ViewBuilder content: @escaping (Item) -> some View) -> some SwiftUICore.View where Item : Swift.Identifiable
  
  #else
  @_Concurrency.MainActor @preconcurrency public func floatingPopover<Item>(item: SwiftUICore.Binding<Item?>, @SwiftUICore.ViewBuilder content: @escaping (Item) -> some View) -> some SwiftUICore.View where Item : Swift.Identifiable
  
  #endif
  @_Concurrency.MainActor @preconcurrency public func floatingPopover(isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: @escaping () -> some View) -> some SwiftUICore.View
  
}
@_Concurrency.MainActor @preconcurrency public struct PositionObservingView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(coordinateSpace: SwiftUICore.CoordinateSpace, position: SwiftUICore.Binding<CoreFoundation.CGPoint>, @SwiftUICore.ViewBuilder content: @escaping () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat21PositionObservingViewV4bodyQrvp", 0) __<Content>
}
@_Concurrency.MainActor @preconcurrency public struct OffsetObservingScrollView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(axes: SwiftUICore.Axis.Set, showsIndicators: Swift.Bool = true, offset: SwiftUICore.Binding<CoreFoundation.CGPoint>, @SwiftUICore.ViewBuilder content: @escaping () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat25OffsetObservingScrollViewV4bodyQrvp", 0) __<Content>
}

extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func popup<PopupContent, Item>(alignment: SwiftUICore.Alignment, item: SwiftUICore.Binding<Item?>, @SwiftUICore.ViewBuilder content: @escaping (Item) -> PopupContent) -> some SwiftUICore.View where PopupContent : SwiftUICore.View, Item : Swift.Hashable
  
  #else
  @_Concurrency.MainActor @preconcurrency public func popup<PopupContent, Item>(alignment: SwiftUICore.Alignment, item: SwiftUICore.Binding<Item?>, @SwiftUICore.ViewBuilder content: @escaping (Item) -> PopupContent) -> some SwiftUICore.View where PopupContent : SwiftUICore.View, Item : Swift.Hashable
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func popup<PopupContent, Item>(popup: SwiftUICore.Binding<FlomniChat.Popup<PopupContent, Item>?>) -> some SwiftUICore.View where PopupContent : SwiftUICore.View, Item : Swift.Hashable
  
  #else
  @_Concurrency.MainActor @preconcurrency public func popup<PopupContent, Item>(popup: SwiftUICore.Binding<FlomniChat.Popup<PopupContent, Item>?>) -> some SwiftUICore.View where PopupContent : SwiftUICore.View, Item : Swift.Hashable
  
  #endif
  @_Concurrency.MainActor @preconcurrency public func popup<PopupContent>(alignment: SwiftUICore.Alignment, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: @escaping (Swift.Bool) -> PopupContent) -> some SwiftUICore.View where PopupContent : SwiftUICore.View
  
}
@_Concurrency.MainActor @preconcurrency public struct Popup<PopupContent, Item> : SwiftUICore.ViewModifier, Swift.Hashable where PopupContent : SwiftUICore.View, Item : Swift.Hashable {
  @_Concurrency.MainActor @preconcurrency public static func == (lhs: FlomniChat.Popup<PopupContent, Item>, rhs: FlomniChat.Popup<PopupContent, Item>) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func hash(into hasher: inout Swift.Hasher)
  @_Concurrency.MainActor @preconcurrency public func body(content: FlomniChat.Popup<PopupContent, Item>.Content) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat5PopupV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACyxq_GG_tF", 0) __<PopupContent, Item>
  nonisolated public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func saveSize(in size: SwiftUICore.Binding<CoreFoundation.CGSize>) -> some SwiftUICore.View
  
}
@_Concurrency.MainActor @preconcurrency public struct SizeCalculator : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func body(content: FlomniChat.SizeCalculator.Content) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat14SizeCalculatorV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}

extension FlomniChat.ChatModule {
  public static func makeChat(thread: FlomniChat.ChatThread) -> some SwiftUICore.View
  
  public static func makeChat(session: FlomniChat.Session) -> some SwiftUICore.View
  
  public static func makeChat(push: FlomniChat.FlomniNotification) -> some SwiftUICore.View
  
}
public struct PresentationStyle {
}
extension FlomniChat.PresentationStyle {
  public static var sheet: FlomniChat.PresentationStyle {
    get
  }
  public static var fullScreenCover: FlomniChat.PresentationStyle {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct PresentationLink<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init<S, P>(_ title: S, value: P?) where Label == SwiftUICore.Text, S : Swift.StringProtocol, P : Swift.Identifiable
  #else
  @_Concurrency.MainActor @preconcurrency public init<S, P>(_ title: S, value: P?) where Label == SwiftUICore.Text, S : Swift.StringProtocol, P : Swift.Identifiable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init<P>(_ titleKey: SwiftUICore.LocalizedStringKey, value: P?) where Label == SwiftUICore.Text, P : Swift.Identifiable
  #else
  @_Concurrency.MainActor @preconcurrency public init<P>(_ titleKey: SwiftUICore.LocalizedStringKey, value: P?) where Label == SwiftUICore.Text, P : Swift.Identifiable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init<P>(value: P?, @SwiftUICore.ViewBuilder label: () -> Label) where P : Swift.Identifiable
  #else
  @_Concurrency.MainActor @preconcurrency public init<P>(value: P?, @SwiftUICore.ViewBuilder label: () -> Label) where P : Swift.Identifiable
  #endif
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat16PresentationLinkV4bodyQrvp", 0) __<Label>
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func presentationDestination<D, C>(for data: D.Type, style: FlomniChat.PresentationStyle = .sheet, @SwiftUICore.ViewBuilder destination: @escaping (D) -> C) -> some SwiftUICore.View where D : Swift.Identifiable, C : SwiftUICore.View
  
}
@available(iOS, deprecated: 14)
@available(macOS, deprecated: 11)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func quickLookPreview<Items>(_ selection: SwiftUICore.Binding<Items.Element?>, in items: Items) -> some SwiftUICore.View where Items : Swift.RandomAccessCollection, Items.Element == Foundation.URL
  
  #else
  @_Concurrency.MainActor @preconcurrency public func quickLookPreview<Items>(_ selection: SwiftUICore.Binding<Items.Element?>, in items: Items) -> some SwiftUICore.View where Items : Swift.RandomAccessCollection, Items.Element == Foundation.URL
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func quickLook(_ item: SwiftUICore.Binding<Foundation.URL?>) -> some SwiftUICore.View
  
  #else
  @_Concurrency.MainActor @preconcurrency public func quickLook(_ item: SwiftUICore.Binding<Foundation.URL?>) -> some SwiftUICore.View
  
  #endif
}
public struct ViewShadowStyle {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(color: SwiftUICore.Color? = nil, radius: CoreFoundation.CGFloat = 0, x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0)
  #else
  public init(color: SwiftUICore.Color? = nil, radius: CoreFoundation.CGFloat = 0, x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0)
  #endif
  public let color: SwiftUICore.Color?
  public let radius: CoreFoundation.CGFloat
  public let x: CoreFoundation.CGFloat
  public let y: CoreFoundation.CGFloat
}
extension FlomniChat.ViewShadowStyle {
  public static let none: FlomniChat.ViewShadowStyle
  public static var badge: FlomniChat.ViewShadowStyle
  public static var elevated: FlomniChat.ViewShadowStyle
  public static var sticker: FlomniChat.ViewShadowStyle
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func shadow(_ style: FlomniChat.ViewShadowStyle) -> some SwiftUICore.View
  
}

@available(iOS 15, tvOS 15, macOS 12, watchOS 8, *)
@_Concurrency.MainActor extension SwiftUICore.OpenURLAction.Result {
  @_Concurrency.MainActor public static func safari(_ url: Foundation.URL) -> SwiftUICore.OpenURLAction.Result
  @_Concurrency.MainActor public static func safari(_ url: Foundation.URL, configure: (inout SwiftUICore.OpenURLAction.Result.SafariConfiguration) -> Swift.Void) -> SwiftUICore.OpenURLAction.Result
  public struct SafariConfiguration {
    public enum DismissStyle {
      case done
      case close
      case cancel
      public static func == (a: SwiftUICore.OpenURLAction.Result.SafariConfiguration.DismissStyle, b: SwiftUICore.OpenURLAction.Result.SafariConfiguration.DismissStyle) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum PresentationStyle {
      case automatic
      case sheet
      case fullScreenCover
      public static func == (a: SwiftUICore.OpenURLAction.Result.SafariConfiguration.PresentationStyle, b: SwiftUICore.OpenURLAction.Result.SafariConfiguration.PresentationStyle) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public var prefersReader: Swift.Bool
    public var barCollapsingEnabled: Swift.Bool
    public var dismissStyle: SwiftUICore.OpenURLAction.Result.SafariConfiguration.DismissStyle
    public var tintColor: SwiftUICore.Color
    public var presentationStyle: SwiftUICore.OpenURLAction.Result.SafariConfiguration.PresentationStyle
  }
}
@frozen public enum SFSymbol : Swift.String {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number0Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number0CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number0Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number0SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number00Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number00CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number00Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number00SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number01Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number01CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number01Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number01SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number02Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number02CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number02Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number02SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number03Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number03CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number03Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number03SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number04Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number04CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number04Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number04SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number05Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number05CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number05Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number05SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number06Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number06CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number06Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number06SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number07Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number07CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number07Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number07SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number08Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number08CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number08Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number08SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number09Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number09CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number09Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number09SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number1Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number1CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number1Magnifyingglass
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number1Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number1SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number10Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number10CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number10Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number10SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number11Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number11CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number11Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number11SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number12Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number12CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number12Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number12SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number13Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number13CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number13Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number13SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number14Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number14CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number14Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number14SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number15Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number15CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number15Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number15SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number16Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number16CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number16Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number16SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number17Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number17CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number17Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number17SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number18Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number18CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number18Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number18SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number19Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number19CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number19Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number19SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number2Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number2CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number2Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number2SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number20Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number20CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number20Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number20SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number21Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number21CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number21Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number21SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number22Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number22CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number22Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number22SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number23Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number23CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number23Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number23SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number24Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number24CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number24Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number24SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number25Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number25CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number25Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number25SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number26Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number26CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number26Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number26SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number27Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number27CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number27Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number27SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number28Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number28CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number28Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number28SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number29Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number29CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number29Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number29SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number3Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number3CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number3Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number3SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number30Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number30CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number30Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number30SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number31Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number31CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number31Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number31SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number32Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number32CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number32Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number32SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number33Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number33CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number33Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number33SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number34Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number34CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number34Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number34SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number35Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number35CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number35Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number35SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number36Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number36CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number36Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number36SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number37Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number37CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number37Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number37SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number38Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number38CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number38Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number38SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number39Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number39CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number39Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number39SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number4AltCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number4AltCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number4AltSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number4AltSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number4Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number4CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number4Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number4SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number40Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number40CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number40Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number40SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number41Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number41CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number41Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number41SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number42Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number42CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number42Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number42SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number43Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number43CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number43Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number43SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number44Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number44CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number44Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number44SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number45Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number45CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number45Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number45SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number46Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number46CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number46Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number46SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number47Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number47CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number47Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number47SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number48Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number48CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number48Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number48SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number49Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number49CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number49Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number49SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number5Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number5CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number5Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number5SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number50Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number50CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number50Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number50SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number6AltCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number6AltCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number6AltSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number6AltSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number6Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number6CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number6Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number6SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number7Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number7CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number7Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number7SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number8Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number8CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number8Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number8SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number9AltCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number9AltCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number9AltSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number9AltSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number9Circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number9CircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number9Square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number9SquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case a
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case aCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case aCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case aSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case aSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case airplane
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case airplayaudio
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case airplayvideo
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case alarm
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case alarmFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case alt
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case ant
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case antCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case antCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case antFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case antennaRadiowavesLeftAndRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case app
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case appBadge
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case appBadgeFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case appFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case appGift
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case appGiftFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case archivebox
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case archiveboxFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arkit
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrow2Circlepath
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrow2CirclepathCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrow2CirclepathCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrow2Squarepath
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrow3Trianglepath
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowBranch
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowClockwise
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowClockwiseCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowClockwiseCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowClockwiseIcloud
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowClockwiseIcloudFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowCounterclockwise
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowCounterclockwiseCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowCounterclockwiseCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowCounterclockwiseIcloud
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowCounterclockwiseIcloudFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDown
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDownCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDownCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDownDoc
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDownDocFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDownLeft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDownLeftCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDownLeftCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDownLeftSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDownLeftSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDownLeftVideo
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDownLeftVideoFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDownRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDownRightAndArrowUpLeft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDownRightCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDownRightCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDownRightSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDownRightSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDownSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDownSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDownToLine
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowDownToLineAlt
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowLeft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowLeftAndRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowLeftAndRightCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowLeftAndRightCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowLeftAndRightSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowLeftAndRightSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowLeftCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowLeftCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowLeftSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowLeftSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowLeftToLine
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowLeftToLineAlt
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowMerge
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowRightArrowLeft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowRightArrowLeftCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowRightArrowLeftCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowRightArrowLeftSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowRightArrowLeftSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowRightCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowRightCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowRightSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowRightSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowRightToLine
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowRightToLineAlt
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowSwap
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowTurnDownLeft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowTurnDownRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowTurnLeftDown
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowTurnLeftUp
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowTurnRightDown
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowTurnRightUp
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowTurnUpLeft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowTurnUpRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUp
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpAndDown
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpAndDownCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpAndDownCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpAndDownSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpAndDownSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpArrowDown
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpArrowDownCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpArrowDownCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpArrowDownSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpArrowDownSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpBin
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpBinFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpDoc
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpDocFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpLeft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpLeftAndArrowDownRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpLeftCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpLeftCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpLeftSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpLeftSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpRightCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpRightCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpRightDiamond
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpRightDiamondFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpRightSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpRightSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpRightVideo
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpRightVideoFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpToLine
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUpToLineAlt
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUturnDown
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUturnDownCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUturnDownCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUturnDownSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUturnDownSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUturnLeft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUturnLeftCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUturnLeftCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUturnLeftSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUturnLeftSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUturnRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUturnRightCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUturnRightCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUturnRightSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUturnRightSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUturnUp
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUturnUpCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUturnUpCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUturnUpSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowUturnUpSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowshapeTurnUpLeft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowshapeTurnUpLeft2
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowshapeTurnUpLeft2Fill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowshapeTurnUpLeftCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowshapeTurnUpLeftCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowshapeTurnUpLeftFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowshapeTurnUpRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowshapeTurnUpRightCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowshapeTurnUpRightCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowshapeTurnUpRightFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleDown
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleDownCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleDownCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleDownFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleDownSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleDownSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleLeft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleLeftCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleLeftCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleLeftFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleLeftSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleLeftSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleRightCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleRightCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleRightFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleRightSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleRightSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleUp
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleUpCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleUpCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleUpFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleUpSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case arrowtriangleUpSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case asteriskCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case asteriskCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case at
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case atBadgeMinus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case atBadgePlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case australsignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case australsignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case australsignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case australsignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case backward
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case backwardEnd
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case backwardEndAlt
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case backwardEndAltFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case backwardEndFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case backwardFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case badgePlusRadiowavesRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bag
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bagBadgeMinus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bagBadgePlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bagFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bagFillBadgeMinus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bagFillBadgePlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bahtsignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bahtsignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bahtsignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bahtsignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bandage
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bandageFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case barcode
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case barcodeViewfinder
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case battery0
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case battery100
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case battery25
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bedDouble
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bedDoubleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bell
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bellCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bellCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bellFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bellSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bellSlashFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case binXmark
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case binXmarkFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bitcoinsignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bitcoinsignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bitcoinsignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bitcoinsignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bold
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case boldItalicUnderline
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case boldUnderline
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bolt
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case boltBadgeA
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case boltBadgeAFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case boltCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case boltCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case boltFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case boltHorizontal
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case boltHorizontalCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case boltHorizontalCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case boltHorizontalFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case boltHorizontalIcloud
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case boltHorizontalIcloudFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case boltSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case boltSlashFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case book
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bookCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bookCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bookFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bookmark
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bookmarkFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case briefcase
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case briefcaseFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bubbleLeft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bubbleLeftAndBubbleRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bubbleLeftAndBubbleRightFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bubbleLeftFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bubbleMiddleBottom
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bubbleMiddleBottomFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bubbleMiddleTop
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bubbleMiddleTopFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bubbleRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case bubbleRightFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case burn
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case burst
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case burstFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case calendar
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case calendarBadgeMinus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case calendarBadgePlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case calendarCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case calendarCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case camera
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cameraCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cameraCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cameraFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cameraOnRectangle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cameraOnRectangleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cameraRotate
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cameraRotateFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cameraViewfinder
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case capslock
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case capslockFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case capsule
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case capsuleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case captionsBubble
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case captionsBubbleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case carFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cart
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cartBadgeMinus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cartBadgePlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cartFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cartFillBadgeMinus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cartFillBadgePlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cedisignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cedisignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cedisignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cedisignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case centsignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case centsignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case centsignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case centsignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chartBar
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chartBarFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chartPie
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chartPieFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case checkmark
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case checkmarkCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case checkmarkCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case checkmarkRectangle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case checkmarkRectangleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case checkmarkSeal
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case checkmarkSealFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case checkmarkShield
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case checkmarkShieldFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case checkmarkSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case checkmarkSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronCompactDown
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronCompactLeft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronCompactRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronCompactUp
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronDown
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronDownCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronDownCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronDownSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronDownSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronLeft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronLeft2
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronLeftCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronLeftCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronLeftSlashChevronRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronLeftSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronLeftSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronRight2
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronRightCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronRightCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronRightSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronRightSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronUp
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronUpChevronDown
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronUpCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronUpCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronUpSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case chevronUpSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case circle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case circleBottomthirdSplit
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case circleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case circleGrid3x3
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case circleGrid3x3Fill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case circleGridHex
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case circleGridHexFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case circleLefthalfFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case circleRighthalfFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case clear
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case clearFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case clock
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case clockFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloud
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudBolt
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudBoltFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudBoltRain
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudBoltRainFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudDrizzle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudDrizzleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudFog
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudFogFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudHail
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudHailFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudHeavyrain
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudHeavyrainFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudMoon
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudMoonBolt
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudMoonBoltFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudMoonFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudMoonRain
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudMoonRainFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudRain
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudRainFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudSleet
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudSleetFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudSnow
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudSnowFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudSun
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudSunBolt
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudSunBoltFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudSunFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudSunRain
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cloudSunRainFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case coloncurrencysignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case coloncurrencysignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case coloncurrencysignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case coloncurrencysignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case command
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case control
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case creditcard
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case creditcardFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case crop
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cropRotate
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cruzeirosignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cruzeirosignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cruzeirosignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cruzeirosignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cube
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cubeBox
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cubeBoxFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cubeFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case cursorRays
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case dCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case dCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case dSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case dSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case decreaseIndent
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case decreaseQuotelevel
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case deleteLeft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case deleteLeftFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case deleteRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case deleteRightFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case desktopcomputer
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case dial
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case dialFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case divide
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case divideCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case divideCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case divideSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case divideSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case doc
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case docAppend
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case docCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case docCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case docFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case docOnClipboard
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case docOnClipboardFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case docOnDoc
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case docOnDocFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case docPlaintext
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case docRichtext
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case docText
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case docTextFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case docTextMagnifyingglass
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case docTextViewfinder
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case dollarsignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case dollarsignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case dollarsignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case dollarsignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case dongsignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case dongsignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case dongsignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case dongsignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case dotRadiowavesLeftAndRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case dotRadiowavesRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case dotSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case dotSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case dropTriangle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case dropTriangleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case eCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case eCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case eSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case eSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case ear
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case eject
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case ejectFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case ellipsesBubble
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case ellipsesBubbleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case ellipsis
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case ellipsisCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case ellipsisCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case envelope
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case envelopeBadge
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case envelopeBadgeFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case envelopeCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case envelopeCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case envelopeFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case envelopeOpen
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case envelopeOpenFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case equal
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case equalCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case equalCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case equalSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case equalSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case escape
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case eurosignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case eurosignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case eurosignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case eurosignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case exclamationmark
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case exclamationmarkBubble
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case exclamationmarkBubbleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case exclamationmarkCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case exclamationmarkCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case exclamationmarkIcloud
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case exclamationmarkIcloudFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case exclamationmarkOctagon
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case exclamationmarkOctagonFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case exclamationmarkShield
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case exclamationmarkShieldFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case exclamationmarkSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case exclamationmarkSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case exclamationmarkTriangle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case exclamationmarkTriangleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case eye
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case eyeFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case eyeSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case eyeSlashFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case eyedropper
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case eyedropperFull
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case eyedropperHalffull
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case eyeglasses
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case fCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case fCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case fCursive
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case fCursiveCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case fCursiveCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case fSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case fSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case faceid
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case film
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case filmFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case flag
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case flagCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case flagCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case flagFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case flagSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case flagSlashFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case flame
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case flameFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case florinsignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case florinsignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case florinsignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case florinsignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case flowchart
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case flowchartFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case folder
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case folderBadgeMinus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case folderBadgePersonCrop
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case folderBadgePlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case folderCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case folderCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case folderFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case folderFillBadgeMinus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case folderFillBadgePersonCrop
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case folderFillBadgePlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case forward
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case forwardEnd
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case forwardEndAlt
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case forwardEndAltFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case forwardEndFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case forwardFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case francsignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case francsignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case francsignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case francsignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case function
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case fx
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gamecontroller
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gamecontrollerFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gauge
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gaugeBadgeMinus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gaugeBadgePlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gear
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gift
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case giftFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case globe
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward10
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward10Ar
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward10Hi
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward15
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward15Ar
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward15Hi
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward30
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward30Ar
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward30Hi
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward45
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward45Ar
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward45Hi
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward60
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward60Ar
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward60Hi
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward75
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward75Ar
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward75Hi
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward90
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward90Ar
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackward90Hi
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gobackwardMinus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward10
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward10Ar
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward10Hi
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward15
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward15Ar
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward15Hi
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward30
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward30Ar
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward30Hi
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward45
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward45Ar
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward45Hi
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward60
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward60Ar
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward60Hi
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward75
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward75Ar
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward75Hi
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward90
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward90Ar
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforward90Hi
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case goforwardPlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case greaterthan
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case greaterthanCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case greaterthanCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case greaterthanSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case greaterthanSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case grid
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gridCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case gridCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case guaranisignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case guaranisignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case guaranisignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case guaranisignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case guitars
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case hCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case hCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case hSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case hSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case hammer
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case hammerFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case handDraw
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case handDrawFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case handPointLeft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case handPointLeftFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case handPointRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case handPointRightFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case handRaised
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case handRaisedFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case handRaisedSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case handRaisedSlashFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case handThumbsdown
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case handThumbsdownFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case handThumbsup
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case handThumbsupFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case hare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case hareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case headphones
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case heart
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case heartCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case heartCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case heartFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case heartSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case heartSlashCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case heartSlashCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case heartSlashFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case helm
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case hexagon
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case hexagonFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case hifispeaker
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case hifispeakerFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case hourglass
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case hourglassBottomhalfFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case hourglassTophalfFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case house
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case houseFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case hryvniasignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case hryvniasignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case hryvniasignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case hryvniasignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case hurricane
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case iCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case iCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case iSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case iSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case icloud
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case icloudAndArrowDown
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case icloudAndArrowDownFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case icloudAndArrowUp
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case icloudAndArrowUpFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case icloudCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case icloudCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case icloudFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case icloudSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case icloudSlashFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case increaseIndent
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case increaseQuotelevel
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case indianrupeesignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case indianrupeesignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case indianrupeesignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case indianrupeesignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case info
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case infoCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case infoCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case italic
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case jCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case jCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case jSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case jSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case kCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case kCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case kSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case kSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case keyboard
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case keyboardChevronCompactDown
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case kipsignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case kipsignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case kipsignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case kipsignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case largecircleFillCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case larisignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case larisignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case larisignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case larisignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lasso
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case leafArrowCirclepath
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lessthan
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lessthanCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lessthanCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lessthanSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lessthanSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lightMax
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lightMin
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lightbulb
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lightbulbFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lightbulbSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lightbulbSlashFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lineHorizontal3
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lineHorizontal3Decrease
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lineHorizontal3DecreaseCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lineHorizontal3DecreaseCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case link
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case linkCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case linkCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case linkIcloud
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case linkIcloudFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lirasignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lirasignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lirasignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lirasignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case listBullet
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case listBulletBelowRectangle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case listBulletIndent
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case listDash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case listNumber
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case listNumberRtl
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case livephoto
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case livephotoPlay
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case livephotoSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case location
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case locationCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case locationCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case locationFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case locationNorth
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case locationNorthFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case locationNorthLine
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case locationNorthLineFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case locationSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case locationSlashFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lock
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lockCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lockCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lockFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lockIcloud
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lockIcloudFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lockOpen
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lockOpenFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lockRotation
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lockRotationOpen
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lockShield
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lockShieldFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lockSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case lockSlashFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case mCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case mCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case mSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case mSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case macwindow
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case magnifyingglass
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case magnifyingglassCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case magnifyingglassCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case manatsignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case manatsignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case manatsignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case manatsignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case map
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case mapFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case mappin
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case mappinAndEllipse
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case mappinSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case memories
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case memoriesBadgeMinus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case memoriesBadgePlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case message
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case messageCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case messageCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case messageFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case metronome
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case mic
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case micCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case micCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case micFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case micSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case micSlashFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case millsignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case millsignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case millsignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case millsignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case minus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case minusCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case minusCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case minusMagnifyingglass
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case minusRectangle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case minusRectangleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case minusSlashPlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case minusSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case minusSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case moon
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case moonCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case moonCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case moonFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case moonStars
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case moonStarsFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case moonZzz
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case moonZzzFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case multiply
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case multiplyCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case multiplyCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case multiplySquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case multiplySquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case musicHouse
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case musicHouseFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case musicMic
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case musicNote
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case musicNoteList
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case nCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case nCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case nSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case nSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case nairasignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case nairasignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case nairasignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case nairasignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case nosign
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case number
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case numberCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case numberCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case numberSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case numberSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case oCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case oCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case oSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case oSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case option
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case paintbrush
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case paintbrushFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pano
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case panoFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case paperclip
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case paperplane
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case paperplaneFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case paragraph
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pause
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pauseCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pauseCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pauseFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pauseRectangle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pauseRectangleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pencil
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pencilAndEllipsisRectangle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pencilAndOutline
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pencilCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pencilCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pencilSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pencilTip
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pencilTipCropCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pencilTipCropCircleBadgeMinus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pencilTipCropCircleBadgePlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case percent
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case person
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case person2
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case person2Fill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case person2SquareStack
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case person2SquareStackFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case person3
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case person3Fill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personBadgeMinus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personBadgeMinusFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personBadgePlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personBadgePlusFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personCropCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personCropCircleBadgeCheckmark
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personCropCircleBadgeExclam
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personCropCircleBadgeMinus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personCropCircleBadgePlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personCropCircleBadgeXmark
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personCropCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personCropCircleFillBadgeCheckmark
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personCropCircleFillBadgeExclam
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personCropCircleFillBadgeMinus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personCropCircleFillBadgePlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personCropCircleFillBadgeXmark
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personCropRectangle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personCropRectangleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personCropSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personCropSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personIcloud
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personIcloudFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case personalhotspot
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case perspective
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pesetasignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pesetasignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pesetasignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pesetasignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pesosignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pesosignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pesosignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pesosignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case phone
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case phoneArrowDownLeft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case phoneArrowRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case phoneArrowUpRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case phoneBadgePlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case phoneCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case phoneCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case phoneDown
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case phoneDownCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case phoneDownCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case phoneDownFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case phoneFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case phoneFillArrowDownLeft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case phoneFillArrowRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case phoneFillArrowUpRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case phoneFillBadgePlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case photo
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case photoFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case photoFillOnRectangleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case photoOnRectangle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pin
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pinFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pinSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case pinSlashFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case play
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case playCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case playCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case playFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case playRectangle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case playRectangleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case playpause
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case playpauseFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case plus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case plusApp
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case plusAppFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case plusBubble
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case plusBubbleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case plusCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case plusCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case plusMagnifyingglass
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case plusRectangle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case plusRectangleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case plusRectangleFillOnRectangleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case plusRectangleOnRectangle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case plusSlashMinus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case plusSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case plusSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case plusSquareFillOnSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case plusSquareOnSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case plusminus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case plusminusCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case plusminusCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case power
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case printer
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case printerFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case projective
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case purchased
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case purchasedCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case purchasedCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case qCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case qCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case qSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case qSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case qrcode
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case qrcodeViewfinder
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case questionmark
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case questionmarkCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case questionmarkCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case questionmarkDiamond
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case questionmarkDiamondFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case questionmarkSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case questionmarkSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case questionmarkVideo
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case questionmarkVideoFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case questionmarkVideoFillRtl
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case questionmarkVideoRtl
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case quoteBubble
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case quoteBubbleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case radiowavesLeft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case radiowavesRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rays
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case recordingtape
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangle3Offgrid
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangle3OffgridFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleAndArrowUpRightAndArrowDownLeft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleAndArrowUpRightAndArrowDownLeftSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleAndPaperclip
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleBadgeCheckmark
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleBadgeXmark
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleCompressVertical
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleDock
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleExpandVertical
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleFillBadgeCheckmark
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleFillBadgeXmark
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleFillOnRectangleAngledFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleFillOnRectangleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleGrid1x2
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleGrid1x2Fill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleGrid2x2
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleGrid2x2Fill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleGrid3x2
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleGrid3x2Fill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleOnRectangle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleOnRectangleAngled
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleSplit3x1
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleSplit3x1Fill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleSplit3x3
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleSplit3x3Fill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleStack
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleStackBadgeMinus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleStackBadgePersonCrop
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleStackBadgePlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleStackFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleStackFillBadgeMinus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleStackFillBadgePersonCrop
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleStackFillBadgePlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleStackPersonCrop
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rectangleStackPersonCropFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case `repeat`
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case repeat1
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case `return`
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rhombus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rhombusFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rosette
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rotateLeft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rotateLeftFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rotateRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rotateRightFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rublesignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rublesignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rublesignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rublesignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rupeesignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rupeesignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rupeesignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case rupeesignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case safari
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case safariFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case scissors
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case scope
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case scribble
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case selectionPinInOut
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sheqelsignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sheqelsignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sheqelsignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sheqelsignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case shield
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case shieldFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case shieldLefthalfFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case shieldSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case shieldSlashFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case shift
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case shiftFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case shuffle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sidebarLeft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sidebarRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case signature
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case skew
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case slashCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case slashCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sliderHorizontal3
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sliderHorizontalBelowRectangle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case slowmo
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case smallcircleCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case smallcircleCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case smallcircleFillCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case smallcircleFillCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case smiley
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case smileyFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case smoke
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case smokeFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case snow
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sparkles
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case speaker
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case speaker1
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case speaker1Fill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case speaker2
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case speaker2Fill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case speaker3
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case speaker3Fill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case speakerFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case speakerSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case speakerSlashFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case speakerSlashFillRtl
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case speakerSlashRtl
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case speakerZzz
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case speakerZzzFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case speakerZzzFillRtl
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case speakerZzzRtl
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case speedometer
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sportscourt
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sportscourtFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case square
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareAndArrowDown
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareAndArrowDownFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareAndArrowDownOnSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareAndArrowDownOnSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareAndArrowUp
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareAndArrowUpFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareAndArrowUpOnSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareAndArrowUpOnSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareAndLineVerticalAndSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareAndLineVerticalAndSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareAndPencil
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareFillAndLineVerticalAndSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareFillAndLineVerticalSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareFillOnCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareFillOnSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareGrid2x2
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareGrid2x2Fill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareGrid3x2
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareGrid3x2Fill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareGrid4x3Fill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareLefthalfFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareOnCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareOnSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareRighthalfFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareSplit1x2
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareSplit1x2Fill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareSplit2x1
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareSplit2x1Fill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareSplit2x2
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareSplit2x2Fill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareStack
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareStack3dDownDottedline
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareStack3dDownRight
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareStack3dDownRightFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareStack3dUp
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareStack3dUpFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareStack3dUpSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareStack3dUpSlashFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squareStackFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case squaresBelowRectangle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case star
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case starCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case starCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case starFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case starLefthalfFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case starSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case starSlashFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case staroflife
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case staroflifeFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sterlingsignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sterlingsignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sterlingsignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sterlingsignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case stop
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case stopCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case stopCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case stopFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case stopwatch
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case stopwatchFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case strikethrough
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case suitClub
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case suitClubFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case suitDiamond
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case suitDiamondFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case suitHeart
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case suitHeartFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case suitSpade
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case suitSpadeFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sum
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sunDust
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sunDustFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sunHaze
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sunHazeFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sunMax
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sunMaxFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sunMin
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sunMinFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sunrise
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sunriseFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sunset
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case sunsetFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tBubble
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tBubbleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case table
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tableBadgeMore
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tableBadgeMoreFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tableFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tag
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tagCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tagCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tagFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case teletype
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case teletypeAnswer
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tengesignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tengesignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tengesignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tengesignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textAligncenter
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textAlignleft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textAlignright
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textAppend
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textBadgeCheckmark
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textBadgeMinus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textBadgePlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textBadgeStar
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textBadgeXmark
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textBubble
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textBubbleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textCursor
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textInsert
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textJustify
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textJustifyleft
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textJustifyright
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textQuote
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textbox
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textformat
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textformat123
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textformatAbc
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textformatAbcDottedunderline
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textformatAlt
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textformatSize
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textformatSubscript
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case textformatSuperscript
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case thermometer
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case thermometerSnowflake
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case thermometerSun
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case timelapse
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case timer
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tornado
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tortoise
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tortoiseFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tramFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case trash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case trashCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case trashCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case trashFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case trashSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case trashSlashFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tray
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tray2
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tray2Fill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case trayAndArrowDown
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case trayAndArrowDownFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case trayAndArrowUp
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case trayAndArrowUpFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case trayFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case trayFull
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case trayFullFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case triangle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case triangleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case triangleLefthalfFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case triangleRighthalfFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tropicalstorm
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tugriksignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tugriksignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tugriksignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tugriksignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tuningfork
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case turkishlirasignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case turkishlirasignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case turkishlirasignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case turkishlirasignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tv
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tvCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tvCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tvFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tvMusicNote
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case tvMusicNoteFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case uCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case uCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case uSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case uSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case uiwindowSplit2x1
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case umbrella
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case umbrellaFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case underline
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case vCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case vCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case vSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case vSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case video
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case videoBadgePlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case videoBadgePlusFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case videoCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case videoCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case videoFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case videoSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case videoSlashFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case view2d
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case view3d
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case viewfinder
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case viewfinderCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case viewfinderCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case wCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case wCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case wSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case wSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case wandAndRays
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case wandAndRaysInverse
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case wandAndStars
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case wandAndStarsInverse
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case waveform
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case waveformCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case waveformCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case waveformPath
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case waveformPathBadgeMinus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case waveformPathBadgePlus
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case waveformPathEcg
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case wifi
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case wifiExclamationmark
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case wifiSlash
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case wind
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case windSnow
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case wonsignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case wonsignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case wonsignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case wonsignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case wrench
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case wrenchFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case xCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case xCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case xSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case xSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case xSquareroot
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case xmark
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case xmarkCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case xmarkCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case xmarkIcloud
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case xmarkIcloudFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case xmarkOctagon
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case xmarkOctagonFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case xmarkRectangle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case xmarkRectangleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case xmarkSeal
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case xmarkSealFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case xmarkShield
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case xmarkShieldFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case xmarkSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case xmarkSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case yCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case yCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case ySquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case ySquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case yensignCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case yensignCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case yensignSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case yensignSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case zCircle
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case zCircleFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case zSquare
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case zSquareFill
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  case zzz
  @available(iOS 13.1, macOS 10.15, tvOS 13.0, watchOS 6.1, *)
  case arrowUturnLeftCircleBadgeEllipsis
  @available(iOS 13.1, macOS 10.15, tvOS 13.0, watchOS 6.1, *)
  case aspectratio
  @available(iOS 13.1, macOS 10.15, tvOS 13.0, watchOS 6.1, *)
  case aspectratioFill
  @available(iOS 13.1, macOS 10.15, tvOS 13.0, watchOS 6.1, *)
  case car
  @available(iOS 13.1, macOS 10.15, tvOS 13.0, watchOS 6.1, *)
  case circleGrid2x2
  @available(iOS 13.1, macOS 10.15, tvOS 13.0, watchOS 6.1, *)
  case circleGrid2x2Fill
  @available(iOS 13.1, macOS 10.15, tvOS 13.0, watchOS 6.1, *)
  case flashlightOffFill
  @available(iOS 13.1, macOS 10.15, tvOS 13.0, watchOS 6.1, *)
  case flashlightOnFill
  @available(iOS 13.1, macOS 10.15, tvOS 13.0, watchOS 6.1, *)
  case flipHorizontal
  @available(iOS 13.1, macOS 10.15, tvOS 13.0, watchOS 6.1, *)
  case flipHorizontalFill
  @available(iOS 13.1, macOS 10.15, tvOS 13.0, watchOS 6.1, *)
  case mappinCircle
  @available(iOS 13.1, macOS 10.15, tvOS 13.0, watchOS 6.1, *)
  case mappinCircleFill
  @available(iOS 13.1, macOS 10.15, tvOS 13.0, watchOS 6.1, *)
  case paperclipCircle
  @available(iOS 13.1, macOS 10.15, tvOS 13.0, watchOS 6.1, *)
  case paperclipCircleFill
  @available(iOS 13.1, macOS 10.15, tvOS 13.0, watchOS 6.1, *)
  case pinCircle
  @available(iOS 13.1, macOS 10.15, tvOS 13.0, watchOS 6.1, *)
  case pinCircleFill
  @available(iOS 13.1, macOS 10.15, tvOS 13.0, watchOS 6.1, *)
  case scissorsBadgeEllipsis
  @available(iOS 13.1, macOS 10.15, tvOS 13.0, watchOS 6.1, *)
  case studentdesk
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case number1MagnifyingglassAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case number4kTv
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case number4kTvFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case aBookClosed
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case aBookClosedAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case aBookClosedFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case aBookClosedFillAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case aBookClosedFillHe
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case aBookClosedFillHi
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case aBookClosedFillJa
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case aBookClosedFillKo
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case aBookClosedFillTh
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case aBookClosedFillZh
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case aBookClosedHe
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case aBookClosedHi
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case aBookClosedJa
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case aBookClosedKo
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case aBookClosedTh
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case aBookClosedZh
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case aMagnify
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case abc
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case airplaneCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case airplaneCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case airpodLeft
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case airpodRight
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case airpodproLeft
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case airpodproRight
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case airpods
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case airpodspro
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case airportExpress
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case airportExtreme
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case airportExtremeTower
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case amplifier
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case appclip
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case applelogo
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case applescript
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case applescriptFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case appletv
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case appletvFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case applewatch
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case applewatchRadiowavesLeftAndRight
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case applewatchSlash
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case applewatchWatchface
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case appsIpad
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case appsIpadLandscape
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case appsIphone
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case appsIphoneBadgePlus
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case appsIphoneLandscape
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case appsIphoneLandscapeRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case archiveboxCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case archiveboxCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowBackward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowBackwardCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowBackwardCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowBackwardSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowBackwardSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowClockwiseHeart
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowClockwiseHeartFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowDownApp
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowDownAppFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowDownBackward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowDownBackwardCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowDownBackwardCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowDownBackwardSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowDownBackwardSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowDownForward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowDownForwardAndArrowUpBackward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowDownForwardAndArrowUpBackwardCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowDownForwardAndArrowUpBackwardCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowDownForwardCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowDownForwardCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowDownForwardSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowDownForwardSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowDownHeart
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowDownHeartFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowDownRightAndArrowUpLeftCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowDownRightAndArrowUpLeftCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowForward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowForwardCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowForwardCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowForwardSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowForwardSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowLeftAndRightRighttriangleLeftRighttriangleRight
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowLeftAndRightRighttriangleLeftRighttriangleRightFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowLeftArrowRight
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowLeftArrowRightCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowLeftArrowRightCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowLeftArrowRightSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowLeftArrowRightSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowRectanglepath
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowRightDocOnClipboard
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowTriangle2Circlepath
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowTriangle2CirclepathCamera
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowTriangle2CirclepathCameraFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowTriangle2CirclepathCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowTriangle2CirclepathCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowTriangle2CirclepathDocOnClipboard
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowTriangleBranch
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowTriangleCapsulepath
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowTriangleMerge
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowTrianglePull
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowTriangleSwap
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowTriangleTurnUpRightCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowTriangleTurnUpRightCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowTriangleTurnUpRightDiamond
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowTriangleTurnUpRightDiamondFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowTurnUpForwardIphone
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowTurnUpForwardIphoneFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpAndDownAndArrowLeftAndRight
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpAndDownRighttriangleUpFillRighttriangleDownFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpAndDownRighttriangleUpRighttriangleDown
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpAndPersonRectanglePortrait
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpAndPersonRectangleTurnLeft
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpAndPersonRectangleTurnRight
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpBackward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpBackwardAndArrowDownForward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpBackwardAndArrowDownForwardCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpBackwardAndArrowDownForwardCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpBackwardCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpBackwardCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpBackwardSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpBackwardSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpDocOnClipboard
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpForward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpForwardApp
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpForwardAppFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpForwardCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpForwardCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpForwardSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpForwardSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpHeart
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpHeartFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpLeftAndArrowDownRightCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpLeftAndArrowDownRightCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpLeftAndDownRightAndArrowUpRightAndDownLeft
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpLeftAndDownRightMagnifyingglass
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpMessage
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpMessageFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpRightAndArrowDownLeftRectangle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUpRightAndArrowDownLeftRectangleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUturnBackward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUturnBackwardCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUturnBackwardCircleBadgeEllipsis
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUturnBackwardCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUturnBackwardSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUturnBackwardSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUturnForward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUturnForwardCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUturnForwardCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUturnForwardSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowUturnForwardSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeBounceForward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeBounceForwardFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeBounceRight
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeBounceRightFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeTurnUpBackward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeTurnUpBackward2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeTurnUpBackward2Circle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeTurnUpBackward2CircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeTurnUpBackward2Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeTurnUpBackwardCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeTurnUpBackwardCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeTurnUpBackwardFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeTurnUpForward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeTurnUpForwardCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeTurnUpForwardCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeTurnUpForwardFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeTurnUpLeft2Circle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeTurnUpLeft2CircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeZigzagForward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeZigzagForwardFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeZigzagRight
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowshapeZigzagRightFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowtriangleBackward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowtriangleBackwardCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowtriangleBackwardCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowtriangleBackwardFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowtriangleBackwardSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowtriangleBackwardSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowtriangleForward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowtriangleForwardCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowtriangleForwardCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowtriangleForwardFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowtriangleForwardSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowtriangleForwardSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowtriangleLeftAndLineVerticalAndArrowtriangleRight
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowtriangleLeftFillAndLineVerticalAndArrowtriangleRightFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowtriangleRightAndLineVerticalAndArrowtriangleLeft
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case arrowtriangleRightFillAndLineVerticalAndArrowtriangleLeftFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case atCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case atCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case atom
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case backwardFrame
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case backwardFrameFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case badgePlusRadiowavesForward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case bagCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case bagCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case banknote
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case banknoteFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case barometer
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case battery100Bolt
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case battery100BoltRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case bellBadge
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case bellBadgeFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case bellSlashCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case bellSlashCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case bicycle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case bicycleCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case bicycleCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case binoculars
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case binocularsFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case boltCar
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case boltCarFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case boltFillBatteryblock
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case boltFillBatteryblockFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case boltHeart
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case boltHeartFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case boltSlashCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case boltSlashCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case bonjour
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case bookClosed
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case bookClosedFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case bookmarkCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case bookmarkCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case bookmarkSlash
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case bookmarkSlashFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case booksVertical
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case booksVerticalFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case building
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case building2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case building2CropCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case building2CropCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case building2Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case buildingColumns
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case buildingColumnsFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case buildingFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case bus
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case busDoubledecker
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case busDoubledeckerFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case busFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case calendarBadgeClock
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case calendarBadgeClockRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case calendarBadgeExclamationmark
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cameraAperture
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cameraBadgeEllipsis
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cameraFillBadgeEllipsis
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cameraFilters
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cameraMeteringCenterWeighted
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cameraMeteringCenterWeightedAverage
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cameraMeteringMatrix
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cameraMeteringMultispot
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cameraMeteringNone
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cameraMeteringPartial
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cameraMeteringSpot
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cameraMeteringUnknown
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cameraMeteringUnknownAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case candybarphone
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case capsulePortrait
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case capsulePortraitFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case car2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case car2Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case carCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case carCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case `case`
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case caseFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case chartBarDocHorizontal
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case chartBarDocHorizontalFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case chartBarXaxis
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case checkerboardRectangle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case checkmarkIcloud
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case checkmarkIcloudFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case checkmarkRectanglePortrait
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case checkmarkRectanglePortraitFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case chevronBackward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case chevronBackward2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case chevronBackwardCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case chevronBackwardCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case chevronBackwardSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case chevronBackwardSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case chevronForward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case chevronForward2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case chevronForwardCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case chevronForwardCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case chevronForwardSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case chevronForwardSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circleBottomhalfFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circleCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circleCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circleDashed
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circleDashedInsetFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circleFillSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circleGridCross
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circleGridCrossDownFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circleGridCrossFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circleGridCrossLeftFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circleGridCrossRightFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circleGridCrossUpFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circleSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circleTophalfFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circlebadge
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circlebadge2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circlebadge2Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circlebadgeFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circlesHexagongrid
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circlesHexagongridFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circlesHexagonpath
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case circlesHexagonpathFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case clockArrowCirclepath
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case comb
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case combFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case commandCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case commandCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case commandSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case commandSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cone
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case coneFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case contextualmenuAndCursorarrow
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cpu
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case creditcardCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case creditcardCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cross
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case crossCase
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case crossCaseFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case crossCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case crossCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case crossFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case crown
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case crownFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cubeTransparent
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cubeTransparentFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case curlybraces
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case curlybracesSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case curlybracesSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cursorarrow
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cursorarrowAndSquareOnSquareDashed
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cursorarrowClick
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cursorarrowClick2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cursorarrowClickBadgeClock
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cursorarrowMotionlines
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cursorarrowMotionlinesClick
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cursorarrowRays
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cursorarrowSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cylinder
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cylinderFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cylinderSplit1x2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case cylinderSplit1x2Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case deskclock
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case deskclockFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dialMax
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dialMaxFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dialMin
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dialMinFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case diamond
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case diamondFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dieFace1
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dieFace1Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dieFace2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dieFace2Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dieFace3
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dieFace3Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dieFace4
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dieFace4Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dieFace5
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dieFace5Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dieFace6
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dieFace6Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case display
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case display2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case displayTrianglebadgeExclamationmark
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case docAppendFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case docAppendFillRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case docAppendRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case docBadgeEllipsis
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case docBadgeGearshape
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case docBadgeGearshapeFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case docBadgePlus
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case docFillBadgeEllipsis
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case docFillBadgePlus
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case docPlaintextFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case docRichtextAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case docRichtextFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case docRichtextFillAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case docRichtextFillHe
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case docRichtextHe
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case docTextBelowEcg
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case docTextBelowEcgFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case docTextFillViewfinder
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case docZipper
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dockArrowDownRectangle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dockArrowUpRectangle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dockRectangle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dotArrowtrianglesUpRightDownLeftCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dotCircleAndCursorarrow
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dotRadiowavesForward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dotSquareshape
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dotSquareshapeFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dotSquareshapeSplit2x2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dpad
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dpadDownFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dpadFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dpadLeftFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dpadRightFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dpadUpFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case drop
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case dropFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case earBadgeCheckmark
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case earFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case earTrianglebadgeExclamationmark
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case earpods
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ejectCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ejectCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ellipsisBubble
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ellipsisBubbleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ellipsisRectangle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ellipsisRectangleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case envelopeArrowTriangleBranch
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case envelopeArrowTriangleBranchFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case envelopeBadgeShieldLeadinghalfFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case envelopeFillBadgeShieldTrailinghalfFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case esim
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case esimFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case exclamationmark2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case exclamationmark3
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case exclamationmarkArrowCirclepath
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case exclamationmarkArrowTriangle2Circlepath
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case externaldrive
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case externaldriveBadgeCheckmark
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case externaldriveBadgeIcloud
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case externaldriveBadgeMinus
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case externaldriveBadgePersonCrop
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case externaldriveBadgePlus
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case externaldriveBadgeTimemachine
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case externaldriveBadgeWifi
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case externaldriveBadgeXmark
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case externaldriveConnectedToLineBelow
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case externaldriveConnectedToLineBelowFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case externaldriveFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case externaldriveFillBadgeCheckmark
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case externaldriveFillBadgeIcloud
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case externaldriveFillBadgeMinus
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case externaldriveFillBadgePersonCrop
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case externaldriveFillBadgePlus
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case externaldriveFillBadgeTimemachine
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case externaldriveFillBadgeWifi
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case externaldriveFillBadgeXmark
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case eyeCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case eyeCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case eyebrow
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case eyes
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case eyesInverse
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case faceDashed
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case faceDashedFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case faceSmiling
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case faceSmilingFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case faxmachine
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case fiberchannel
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case figureStand
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case figureStandLineDottedFigureStand
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case figureWalk
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case figureWalkCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case figureWalkCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case figureWalkDiamond
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case figureWalkDiamondFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case figureWave
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case figureWaveCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case figureWaveCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case filemenuAndCursorarrow
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case filemenuAndCursorarrowRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case filemenuAndSelection
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case flagBadgeEllipsis
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case flagBadgeEllipsisFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case flagSlashCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case flagSlashCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case flipphone
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case fn
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case folderBadgeGear
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case folderBadgeQuestionmark
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case folderBadgeQuestionmarkAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case folderFillBadgeGear
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case folderFillBadgeQuestionmark
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case folderFillBadgeQuestionmarkAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case forwardFrame
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case forwardFrameFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case gearshape
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case gearshape2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case gearshape2Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case gearshapeFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case giftCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case giftCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case giftcard
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case giftcardFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case graduationcap
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case graduationcapFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case greetingcard
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case greetingcardFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case guitarsFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case gyroscope
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case hSquareFillOnSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case hSquareOnSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case handPointDown
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case handPointDownFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case handPointUp
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case handPointUpBraille
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case handPointUpBrailleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case handPointUpFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case handPointUpLeft
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case handPointUpLeftFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case handTap
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case handTapFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case handWave
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case handWaveFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case handsClap
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case handsClapFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case handsSparkles
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case handsSparklesFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case headphonesCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case headphonesCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case hearingaidEar
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case heartTextSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case heartTextSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case hifispeaker2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case hifispeaker2Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case hifispeakerAndHomepod
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case hifispeakerAndHomepodFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case highlighter
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case homekit
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case homepod
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case homepod2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case homepod2Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case homepodFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case hourglassBadgePlus
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case houseCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case houseCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case infinity
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case internaldrive
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case internaldriveFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ipad
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ipadHomebutton
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ipadHomebuttonLandscape
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ipadLandscape
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case iphone
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case iphoneHomebutton
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case iphoneHomebuttonRadiowavesLeftAndRight
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case iphoneHomebuttonSlash
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case iphoneRadiowavesLeftAndRight
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case iphoneSlash
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ipod
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ipodshuffleGen1
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ipodshuffleGen2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ipodshuffleGen3
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ipodshuffleGen4
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ipodtouch
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case jSquareFillOnSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case jSquareOnSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case k
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case key
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case keyFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case keyIcloud
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case keyIcloudFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case keyboardBadgeEllipsis
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case keyboardChevronCompactLeft
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case keyboardMacwindow
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case keyboardOnehandedLeft
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case keyboardOnehandedRight
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lJoystick
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lJoystickDown
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lJoystickDownFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lJoystickFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lRectangleRoundedbottom
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lRectangleRoundedbottomFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case l1RectangleRoundedbottom
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case l1RectangleRoundedbottomFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case l2RectangleRoundedtop
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case l2RectangleRoundedtopFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ladybug
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ladybugFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case laptopcomputer
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case laptopcomputerAndIphone
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lassoSparkles
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case latch2Case
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case latch2CaseFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lbRectangleRoundedbottom
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lbRectangleRoundedbottomFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case leaf
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case leafArrowTriangleCirclepath
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case leafFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case level
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case levelFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lifepreserver
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lifepreserverFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case line3CrossedSwirlCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case line3CrossedSwirlCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lineDiagonal
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lineDiagonalArrow
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lineHorizontal2DecreaseCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lineHorizontal2DecreaseCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lineHorizontal3Circle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lineHorizontal3CircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lineHorizontalStarFillLineHorizontal
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lineweight
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case linkBadgePlus
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case listAndFilm
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case listBulletRectangle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case listNumberAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case listStar
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case listTriangle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case livephotoBadgeA
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case locationFillViewfinder
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case locationViewfinder
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lockDoc
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lockDocFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lockRectangle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lockRectangleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lockRectangleOnRectangle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lockRectangleOnRectangleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lockRectangleStack
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lockRectangleStackFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lockSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lockSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lockSquareStack
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lockSquareStackFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case loupe
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ltRectangleRoundedtop
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ltRectangleRoundedtopFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lungs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case lungsFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case macmini
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case macminiFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case macproGen1
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case macproGen2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case macproGen2Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case macproGen3
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case macproGen3Server
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case macwindowBadgePlus
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case macwindowOnRectangle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case macwindowOnRectangleRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case mail
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case mailAndTextMagnifyingglass
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case mailAndTextMagnifyingglassRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case mailFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case mailStack
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case mailStackFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case megaphone
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case megaphoneFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case memorychip
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case menubarArrowDownRectangle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case menubarArrowUpRectangle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case menubarDockRectangle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case menubarDockRectangleBadgeRecord
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case menubarRectangle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case metronomeFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case minusDiamond
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case minusDiamondFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case minusPlusBatteryblock
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case minusPlusBatteryblockFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case minusRectanglePortrait
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case minusRectanglePortraitFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case mosaic
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case mosaicFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case mount
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case mountFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case mouth
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case mouthFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case move3d
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case musicNoteHouse
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case musicNoteHouseFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case musicQuarternote3
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case mustache
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case mustacheFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case network
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case newspaper
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case newspaperFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case nose
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case noseFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case note
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case noteText
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case noteTextBadgePlus
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case octagon
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case octagonFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case opticaldisc
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case opticaldiscdrive
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case opticaldiscdriveFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case oval
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ovalFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ovalPortrait
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ovalPortraitFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case paintbrushPointed
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case paintbrushPointedFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case paintpalette
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case paintpaletteFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case paperclipBadgeEllipsis
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case paperplaneCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case paperplaneCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case paragraphsign
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case pc
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case pencilTipCropCircleBadgeArrowForward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case percentAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case person2Circle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case person2CircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personAndArrowLeftAndArrowRight
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personCropCircleBadgeExclamationmark
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personCropCircleBadgeQuestionmark
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personCropCircleBadgeQuestionmarkAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personCropCircleFillBadgeExclamationmark
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personCropCircleFillBadgeQuestionmark
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personCropCircleFillBadgeQuestionmarkAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personCropSquareFillAndAtRectangle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personFillAndArrowLeftAndArrowRight
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personFillBadgeMinus
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personFillBadgePlus
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personFillCheckmark
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personFillCheckmarkRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personFillQuestionmark
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personFillQuestionmarkAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personFillQuestionmarkRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personFillTurnDown
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personFillTurnLeft
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personFillTurnRight
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personFillViewfinder
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personFillXmark
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case personFillXmarkRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case phoneBubbleLeft
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case phoneBubbleLeftFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case phoneConnection
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case phoneFillConnection
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case photoOnRectangleAngled
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case pianokeys
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case pianokeysInverse
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case pills
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case pillsFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case pip
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case pipEnter
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case pipExit
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case pipFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case pipRemove
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case pipSwap
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case placeholdertextFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case playSlash
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case playSlashFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case plusDiamond
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case plusDiamondFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case plusMessage
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case plusMessageFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case plusRectangleFillOnFolderFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case plusRectangleOnFolder
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case plusRectanglePortrait
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case plusRectanglePortraitFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case plusViewfinder
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case pointFillTopleftDownCurvedtoPointFillBottomrightUp
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case pointTopleftDownCurvedtoPointBottomrightUp
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case poweroff
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case poweron
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case powersleep
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case printerDotmatrix
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case printerDotmatrixFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case printerDotmatrixFillAndPaperFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case printerFillAndPaperFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case puzzlepiece
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case puzzlepieceFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case pyramid
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case pyramidFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case questionmarkAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case questionmarkCircleAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case questionmarkCircleFillAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case questionmarkDiamondAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case questionmarkDiamondFillAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case questionmarkFolder
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case questionmarkFolderAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case questionmarkFolderFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case questionmarkFolderFillAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case questionmarkSquareAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case questionmarkSquareDashed
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case questionmarkSquareDashedAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case questionmarkSquareFillAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case questionmarkVideoAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case questionmarkVideoFillAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case quoteBubbleFillRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case quoteBubbleRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rJoystick
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rJoystickDown
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rJoystickDownFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rJoystickFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rRectangleRoundedbottom
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rRectangleRoundedbottomFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rSquareFillOnSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rSquareOnSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case r1RectangleRoundedbottom
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case r1RectangleRoundedbottomFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case r2RectangleRoundedtop
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case r2RectangleRoundedtopFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case radio
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case radioFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rbRectangleRoundedbottom
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rbRectangleRoundedbottomFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case recordCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case recordCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangle3OffgridBubbleLeft
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangle3OffgridBubbleLeftFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleAndPencilAndEllipsis
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleAndPencilAndEllipsisRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleAndTextMagnifyingglass
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleAndTextMagnifyingglassRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleArrowtriangle2Inward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleArrowtriangle2Outward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleBadgeMinus
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleBadgePlus
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleBottomthirdInsetFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleCenterInsetFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleConnectedToLineBelow
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleDashed
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleDashedAndPaperclip
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleDashedBadgeRecord
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleFillBadgeMinus
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleFillBadgePlus
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleFillOnRectangleFillCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleFillOnRectangleFillCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleFillOnRectangleFillSlashFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleInsetBottomleftFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleInsetBottomrightFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleInsetFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleInsetTopleftFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleInsetToprightFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleLefthalfFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleLefthalfInsetFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleLefthalfInsetFillArrowLeft
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleLeftthirdInsetFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleOnRectangleSlash
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectanglePortrait
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectanglePortraitArrowtriangle2Inward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectanglePortraitArrowtriangle2Outward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectanglePortraitFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleRighthalfFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleRighthalfInsetFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleRighthalfInsetFillArrowRight
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleRightthirdInsetFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleRoundedbottom
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleRoundedbottomFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleRoundedtop
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleRoundedtopFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleSlash
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleSlashFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleSplit1x2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleSplit1x2Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleSplit2x1
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleSplit2x1Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleSplit2x2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rectangleSplit2x2Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case restart
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case restartCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rotate3d
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rtRectangleRoundedtop
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rtRectangleRoundedtopFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ruler
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case rulerFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case scale3d
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case scalemass
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case scalemassFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case scanner
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case scannerFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case scribbleVariable
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case scroll
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case scrollFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case sdcard
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case sdcardFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case seal
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case sealFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case serverRack
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case shadow
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case shekelsignCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case shekelsignCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case shekelsignSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case shekelsignSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case shieldLefthalfFillSlash
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case shippingbox
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case shippingboxFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case sidebarLeading
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case sidebarSquaresLeading
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case sidebarSquaresLeft
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case sidebarSquaresRight
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case sidebarSquaresTrailing
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case sidebarTrailing
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case signatureAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case signatureHe
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case signpostLeft
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case signpostLeftFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case signpostRight
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case signpostRightFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case simcard
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case simcard2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case simcard2Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case simcardFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case sleep
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case sliderHorizontalBelowSquareFillAndSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case sliderVertical3
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case sparkle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case sparklesRectangleStack
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case sparklesRectangleStackFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case sparklesSquareFillOnSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case speakerSlashCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case speakerSlashCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case speakerSlashCircleFillRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case speakerSlashCircleRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case speakerWave1
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case speakerWave1Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case speakerWave2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case speakerWave2Circle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case speakerWave2CircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case speakerWave2Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case speakerWave3
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case speakerWave3Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case square2Stack3d
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case square2Stack3dBottomFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case square2Stack3dTopFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case square3Stack3d
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case square3Stack3dBottomFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case square3Stack3dMiddleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case square3Stack3dTopFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareAndAtRectangle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareBottomhalfFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareDashed
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareDashedInsetFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareFillOnSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareFillTextGrid1x2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareGrid3x1BelowLineGrid1x2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareGrid3x1FillBelowLineGrid1x2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareGrid3x1FolderBadgePlus
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareGrid3x1FolderFillBadgePlus
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareGrid3x3
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareGrid3x3BottomleftFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareGrid3x3BottommiddleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareGrid3x3BottomrightFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareGrid3x3Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareGrid3x3FillSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareGrid3x3MiddleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareGrid3x3MiddleleftFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareGrid3x3MiddlerightFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareGrid3x3TopleftFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareGrid3x3TopmiddleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareGrid3x3ToprightFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareOnSquareDashed
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareOnSquareSquareshapeControlhandles
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareSlash
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareSlashFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareSplitBottomrightquarter
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareSplitBottomrightquarterFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareSplitDiagonal
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareSplitDiagonal2x2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareSplitDiagonal2x2Fill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareSplitDiagonalFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareStack3dDownForward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareStack3dDownForwardFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareStack3dForwardDottedline
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareStack3dForwardDottedlineFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareStack3dUpBadgeA
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareStack3dUpBadgeAFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareTophalfFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareshape
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareshapeControlhandlesOnSquareshapeControlhandles
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareshapeDashedSquareshape
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareshapeFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareshapeSplit2x2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareshapeSplit2x2Dotted
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareshapeSplit3x3
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case squareshapeSquareshapeDashed
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case starLeadinghalfFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case starSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case starSquareFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case staroflifeCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case staroflifeCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case stethoscope
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case sumAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case swift
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case switch2
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case tBubbleAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case tBubbleFillAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case tBubbleFillHe
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case tBubbleHe
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case tablecells
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case tablecellsBadgeEllipsis
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case tablecellsBadgeEllipsisFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case tablecellsFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case tagSlash
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case tagSlashFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case target
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case teletypeCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case teletypeCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case terminal
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case terminalFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textAndCommandMacwindow
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textBadgeCheckmarkRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textBelowPhoto
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textBelowPhotoFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textBookClosed
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textBookClosedFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textBubbleFillRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textBubbleRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textCursorAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textCursorHe
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textCursorHi
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textCursorJa
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textCursorKo
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textCursorTh
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textCursorZh
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textMagnifyingglass
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textMagnifyingglassRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textQuoteRtl
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textRedaction
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textboxAr
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textboxHe
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textboxHi
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textboxJa
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textboxKo
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textboxTh
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textboxZh
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case textformat123Ar
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case thermometerSunFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ticket
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case ticketFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case timelineSelection
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case timerSquare
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case togglepower
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case touchid
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case tram
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case tramCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case tramCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case tramTunnelFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case trayCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case trayCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case triangleCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case triangleCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case tvAndHifispeakerFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case videoBadgeCheckmark
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case videoBubbleLeft
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case videoBubbleLeftFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case videoFillBadgeCheckmark
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case videoFillBadgePlus
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case wake
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case walletPass
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case walletPassFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case wave3Backward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case wave3BackwardCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case wave3BackwardCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case wave3Forward
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case wave3ForwardCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case wave3ForwardCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case wave3Left
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case wave3LeftCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case wave3LeftCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case wave3Right
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case wave3RightCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case wave3RightCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case waveformPathEcgRectangle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case waveformPathEcgRectangleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case wrenchAndScrewdriver
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case wrenchAndScrewdriverFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case xmarkBin
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case xmarkBinCircle
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case xmarkBinCircleFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case xmarkBinFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case xmarkDiamond
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case xmarkDiamondFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case xmarkRectanglePortrait
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case xmarkRectanglePortraitFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case xserve
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case zlRectangleRoundedtop
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case zlRectangleRoundedtopFill
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case zrRectangleRoundedtop
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  case zrRectangleRoundedtopFill
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case aqiHigh
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case aqiLow
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case aqiMedium
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case brazilianrealsignCircle
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case brazilianrealsignCircleFill
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case brazilianrealsignSquare
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case brazilianrealsignSquareFill
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case cartCircle
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case cartCircleFill
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case character
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterAr
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterBookClosed
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterBookClosedAr
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterBookClosedFill
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterBookClosedFillAr
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterBookClosedFillHe
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterBookClosedFillHi
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterBookClosedFillJa
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterBookClosedFillKo
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterBookClosedFillTh
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterBookClosedFillZh
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterBookClosedFillZhTraditional
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterBookClosedHe
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterBookClosedHi
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterBookClosedJa
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterBookClosedKo
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterBookClosedTh
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterBookClosedZh
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterBookClosedZhTraditional
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterHe
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterHi
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterJa
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterKo
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterTh
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterZh
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case characterZhTraditional
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case clockArrow2Circlepath
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case directcurrent
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case docTextBelowEcgFillRtl
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case docTextBelowEcgRtl
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case exclamationmarkApplewatch
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case infinityCircle
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case infinityCircleFill
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case ipadBadgePlay
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case ipadHomebuttonBadgePlay
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case ipadHomebuttonLandscapeBadgePlay
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case ipadLandscapeBadgePlay
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case iphoneBadgePlay
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case iphoneHomebuttonBadgePlay
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case iphoneHomebuttonLandscape
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case iphoneLandscape
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case ipodtouchLandscape
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case lockApplewatch
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case photoTv
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case playTv
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case playTvFill
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case rectangleBadgePersonCrop
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case rectangleFillBadgePersonCrop
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case rectangleTopthirdInset
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case repeat1Circle
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case repeat1CircleFill
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case repeatCircle
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case repeatCircleFill
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case shieldCheckerboard
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case shuffleCircle
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case shuffleCircleFill
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textBelowPhotoFillRtl
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textBelowPhotoRtl
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textCursorZhTraditional
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textboxZhTraditional
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeAr
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeHe
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeHi
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeJa
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeKo
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeLarger
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeLargerAr
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeLargerHe
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeLargerHi
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeLargerJa
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeLargerKo
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeLargerTh
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeLargerZh
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeLargerZhTraditional
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeSmaller
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeSmallerAr
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeSmallerHe
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeSmallerHi
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeSmallerJa
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeSmallerKo
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeSmallerTh
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeSmallerZh
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeSmallerZhTraditional
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeTh
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeZh
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSizeZhTraditional
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSubscriptAr
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSubscriptHe
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSubscriptHi
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSubscriptJa
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSubscriptKo
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSubscriptTh
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSubscriptZh
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSubscriptZhTraditional
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSuperscriptAr
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSuperscriptHe
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSuperscriptHi
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSuperscriptJa
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSuperscriptKo
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSuperscriptTh
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSuperscriptZh
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case textformatSuperscriptZhTraditional
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case torus
  @available(iOS 14.2, macOS 11.0, tvOS 14.2, watchOS 7.1, *)
  case tvAndMediabox
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case airpodsmax
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case applewatchSideRight
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterBubble
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterBubbleAr
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterBubbleFill
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterBubbleFillAr
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterBubbleFillHe
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterBubbleHe
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterCursorIbeam
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterCursorIbeamAr
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterCursorIbeamHe
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterCursorIbeamHi
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterCursorIbeamJa
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterCursorIbeamKo
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterCursorIbeamTh
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterCursorIbeamZh
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterCursorIbeamZhTraditional
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterTextbox
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterTextboxAr
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterTextboxHe
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterTextboxHi
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterTextboxJa
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterTextboxKo
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterTextboxTh
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterTextboxZh
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case characterTextboxZhTraditional
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case hifispeakerAndHomepodmini
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case hifispeakerAndHomepodminiFill
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case homepodAndHomepodmini
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case homepodAndHomepodminiFill
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case homepodmini
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case homepodmini2
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case homepodmini2Fill
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case homepodminiFill
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  case rectangleTopthirdInsetFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case number1MagnifyingglassHi
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case number123Rectangle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case number123RectangleAr
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case number123RectangleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case number123RectangleFillAr
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case number123RectangleFillHi
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case number123RectangleHi
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case airplaneArrival
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case airplaneDeparture
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case airplayaudioBadgeExclamationmark
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case airplayaudioCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case airplayaudioCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case airplayvideoBadgeExclamationmark
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case airplayvideoCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case airplayvideoCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case airpodsChargingcase
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case airpodsChargingcaseFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case airpodsChargingcaseWireless
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case airpodsChargingcaseWirelessFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case airpodsproChargingcaseWireless
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case airpodsproChargingcaseWirelessFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case airtag
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case airtagFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case airtagRadiowavesForward
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case airtagRadiowavesForwardFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case airtagRadiowavesForwardFillRtl
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case airtagRadiowavesForwardRtl
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case alignHorizontalCenter
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case alignHorizontalCenterFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case alignHorizontalLeft
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case alignHorizontalLeftFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case alignHorizontalRight
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case alignHorizontalRightFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case alignVerticalBottom
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case alignVerticalBottomFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case alignVerticalCenter
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case alignVerticalCenterFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case alignVerticalTop
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case alignVerticalTopFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case allergens
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case alternatingcurrent
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case antennaRadiowavesLeftAndRightCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case antennaRadiowavesLeftAndRightCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case antennaRadiowavesLeftAndRightSlash
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case appBadgeCheckmark
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case appBadgeCheckmarkFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case appConnectedToAppBelowFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case appDashed
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case applepencil
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case appletvremoteGen1
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case appletvremoteGen1Fill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case appletvremoteGen2
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case appletvremoteGen2Fill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case appletvremoteGen3
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case appletvremoteGen3Fill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case appletvremoteGen4
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case appletvremoteGen4Fill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case applewatchCaseInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arkitBadgeXmark
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arrowBackwardToLine
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arrowBackwardToLineCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arrowBackwardToLineCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arrowDownToLineCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arrowDownToLineCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arrowDownToLineCompact
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arrowForwardToLine
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arrowForwardToLineCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arrowForwardToLineCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arrowLeftToLineCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arrowLeftToLineCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arrowLeftToLineCompact
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arrowRightToLineCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arrowRightToLineCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arrowRightToLineCompact
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arrowUpAndDownRighttriangleUpRighttriangleDownFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arrowUpToLineCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arrowUpToLineCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arrowUpToLineCompact
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arrowtriangleLeftAndLineVerticalAndArrowtriangleRightFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case arrowtriangleRightAndLineVerticalAndArrowtriangleLeftFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case asterisk
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case backwardCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case backwardCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case battery50
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case battery75
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case beatsEarphones
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case beatsHeadphones
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case beatsPowerbeats
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case beatsPowerbeats3
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case beatsPowerbeatspro
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case beatsPowerbeatsproChargingcase
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case beatsPowerbeatsproChargingcaseFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case beatsPowerbeatsproLeft
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case beatsPowerbeatsproRight
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case beatsStudiobudLeft
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case beatsStudiobudRight
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case beatsStudiobuds
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case beatsStudiobudsChargingcase
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case beatsStudiobudsChargingcaseFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case bedDoubleCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case bedDoubleCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case bellAndWaveform
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case bellAndWaveformFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case bellBadgeCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case bellBadgeCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case bellSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case bellSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case boltBatteryblock
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case boltBatteryblockFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case boltCarCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case boltCarCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case boltShield
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case boltShieldFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case boltSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case boltSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case bookClosedCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case bookClosedCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case bookmarkSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case bookmarkSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case booksVerticalCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case booksVerticalCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case brain
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case brainHeadProfile
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case briefcaseCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case briefcaseCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case bubbleLeftAndExclamationmarkBubbleRight
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case bubbleLeftAndExclamationmarkBubbleRightFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case bubbleLeftCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case bubbleLeftCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case bubbleRightCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case bubbleRightCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case buildingColumnsCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case buildingColumnsCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case cableConnector
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case cableConnectorHorizontal
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case cablecar
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case cablecarFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case calendarDayTimelineLeading
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case calendarDayTimelineLeft
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case calendarDayTimelineRight
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case calendarDayTimelineTrailing
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case cameraShutterButton
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case cameraShutterButtonFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case capsuleBottomhalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case capsuleInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case capsuleLefthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case capsulePortraitBottomhalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case capsulePortraitInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case capsulePortraitLefthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case capsulePortraitRighthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case capsulePortraitTophalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case capsuleRighthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case capsuleTophalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case carFerry
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case carFerryFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case characterBubbleFillHi
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case characterBubbleFillJa
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case characterBubbleFillKo
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case characterBubbleFillTh
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case characterBubbleFillZh
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case characterBubbleFillZhTraditional
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case characterBubbleHi
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case characterBubbleJa
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case characterBubbleKo
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case characterBubbleTh
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case characterBubbleZh
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case characterBubbleZhTraditional
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case chartLineUptrendXyaxis
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case chartLineUptrendXyaxisCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case chartLineUptrendXyaxisCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case chartXyaxisLine
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case checkerboardShield
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case checklist
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case checklistRtl
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case checkmarkBubble
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case checkmarkBubbleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case checkmarkCircleTrianglebadgeExclamationmark
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case checkmarkDiamond
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case checkmarkDiamondFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case chevronLeftForwardslashChevronRight
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleAndLineHorizontal
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleAndLineHorizontalFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleBottomhalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleDashedInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleDotted
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleGrid2x1
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleGrid2x1Fill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleGrid2x1LeftFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleGrid2x1RightFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleGrid3x3Circle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleGrid3x3CircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleGridCrossDownFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleGridCrossLeftFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleGridCrossRightFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleGridCrossUpFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleHexagongrid
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleHexagongridCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleHexagongridCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleHexagongridFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleHexagonpath
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleHexagonpathFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleLefthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleRighthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleSlash
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleSlashFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case circleTophalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case clockBadgeCheckmark
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case clockBadgeCheckmarkFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case clockBadgeExclamationmark
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case clockBadgeExclamationmarkFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case clockCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case clockCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case computermouse
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case computermouseFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case cpuFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case creditcardAnd123
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case creditcardTrianglebadgeExclamationmark
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case crossVial
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case crossVialFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case cupAndSaucer
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case cupAndSaucerFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case deleteBackward
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case deleteBackwardFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case deleteForward
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case deleteForwardFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case desktopcomputerAndArrowDown
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case desktopcomputerTrianglebadgeExclamationmark
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case diamondBottomhalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case diamondCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case diamondCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case diamondInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case diamondLefthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case diamondRighthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case diamondTophalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case dice
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case diceFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case digitalcrownArrowClockwise
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case digitalcrownArrowClockwiseFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case digitalcrownArrowCounterclockwise
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case digitalcrownArrowCounterclockwiseFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case digitalcrownHorizontalArrowClockwise
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case digitalcrownHorizontalArrowClockwiseFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case digitalcrownHorizontalArrowCounterclockwise
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case digitalcrownHorizontalArrowCounterclockwiseFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case digitalcrownHorizontalPress
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case digitalcrownHorizontalPressFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case digitalcrownPress
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case digitalcrownPressFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case displayAndArrowDown
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case docRichtextFillHi
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case docRichtextFillJa
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case docRichtextFillKo
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case docRichtextFillTh
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case docRichtextFillZh
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case docRichtextFillZhTraditional
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case docRichtextHi
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case docRichtextJa
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case docRichtextKo
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case docRichtextTh
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case docRichtextZh
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case docRichtextZhTraditional
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case docTextImage
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case docTextImageFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case docViewfinder
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case docViewfinderFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case dotCircleAndHandPointUpLeftFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case dotCircleViewfinder
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case dotRadiowavesUpForward
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case dotViewfinder
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case dpadDownFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case dpadLeftFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case dpadRightFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case dpadUpFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case dropCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case dropCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case earAndWaveform
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case earbuds
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case earbudsCase
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case earbudsCaseFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case ellipsisCurlybraces
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case ellipsisVerticalBubble
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case ellipsisVerticalBubbleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case envelopeBadgeShieldHalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case envelopeBadgeShieldHalfFilledFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case exclamationmarkBubbleCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case exclamationmarkBubbleCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case eyeSlashCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case eyeSlashCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case eyeSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case eyeSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case eyeTrianglebadgeExclamationmark
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case eyeTrianglebadgeExclamationmarkFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case facemask
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case facemaskFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case fanblades
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case fanbladesFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case ferry
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case ferryFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case fibrechannel
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case figureRoll
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case filmCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case filmCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case flag2Crossed
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case flag2CrossedFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case flagAndFlagFilledCrossed
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case flagFilledAndFlagCrossed
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case flagSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case flagSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case flameCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case flameCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case folderBadgeGearshape
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case folderFillBadgeGearshape
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case forkKnife
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case forkKnifeCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case forkKnifeCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case forwardCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case forwardCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case fuelpump
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case fuelpumpCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case fuelpumpCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case fuelpumpFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case gearBadgeCheckmark
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case gearBadgeQuestionmark
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case gearBadgeXmark
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case gearCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case gearCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case gearshapeCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case gearshapeCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case globeAmericas
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case globeAmericasFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case globeAsiaAustralia
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case globeAsiaAustraliaFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case globeBadgeChevronBackward
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case globeEuropeAfrica
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case globeEuropeAfricaFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case gobackward5
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case gobackward5Ar
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case gobackward5Hi
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case goforward5
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case goforward5Ar
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case goforward5Hi
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case graduationcapCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case graduationcapCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case hSquareOnSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case hammerCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case hammerCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case handRaisedCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case handRaisedCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case handRaisedSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case handRaisedSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case handRaisedSquareOnSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case handRaisedSquareOnSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case handThumbsdownCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case handThumbsdownCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case handThumbsupCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case handThumbsupCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case hearingdeviceEar
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case heartRectangle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case heartRectangleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case heartSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case heartSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case hexagonBottomhalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case hexagonLefthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case hexagonRighthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case hexagonTophalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case hifispeakerAndAppletv
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case hifispeakerAndAppletvFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case homepodAndAppletv
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case homepodAndAppletvFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case homepodminiAndAppletv
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case homepodminiAndAppletvFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case hourglassBottomhalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case hourglassCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case hourglassCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case hourglassTophalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case humidity
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case humidityFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case icloudSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case icloudSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case ipadAndArrowForward
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case ipadAndIphone
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case ipadRearCamera
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case iphoneAndArrowForward
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case iphoneCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case iphoneCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case iphoneHomebuttonCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case iphoneHomebuttonCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case iphoneHomebuttonRadiowavesLeftAndRightCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case iphoneHomebuttonRadiowavesLeftAndRightCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case iphoneHomebuttonSlashCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case iphoneHomebuttonSlashCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case iphoneRadiowavesLeftAndRightCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case iphoneRadiowavesLeftAndRightCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case iphoneRearCamera
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case iphoneSlashCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case iphoneSlashCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case iphoneSmartbatterycaseGen1
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case iphoneSmartbatterycaseGen2
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case ipodtouchSlash
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case ivfluidBag
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case ivfluidBagFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case jSquareOnSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case keyboardFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lJoystickPressDown
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lJoystickPressDownFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lJoystickTiltDown
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lJoystickTiltDownFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lJoystickTiltLeft
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lJoystickTiltLeftFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lJoystickTiltRight
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lJoystickTiltRightFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lJoystickTiltUp
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lJoystickTiltUpFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lanyardcard
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lanyardcardFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case laptopcomputerAndArrowDown
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case laptopcomputerTrianglebadgeExclamationmark
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lassoAndSparkles
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case leafCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case leafCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lightbulbCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lightbulbCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case line2HorizontalDecreaseCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case line2HorizontalDecreaseCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case line3Horizontal
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case line3HorizontalCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case line3HorizontalCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case line3HorizontalDecrease
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case line3HorizontalDecreaseCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case line3HorizontalDecreaseCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case linesMeasurementHorizontal
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case listBulletCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case listBulletCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case listBulletRectangleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case listBulletRectanglePortrait
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case listBulletRectanglePortraitFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case listDashHeaderRectangle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case listNumberHi
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case locationMagnifyingglass
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case locationNorthCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case locationNorthCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case locationSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case locationSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lockDesktopcomputer
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lockDisplay
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lockIpad
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lockIphone
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lockLaptopcomputer
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lockOpenApplewatch
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lockOpenDesktopcomputer
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lockOpenDisplay
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lockOpenIpad
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lockOpenIphone
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case lockOpenLaptopcomputer
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case logoPlaystation
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case logoXbox
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case macproGen1Fill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case macproGen3Fill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case magazine
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case magazineFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case magicmouse
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case magicmouseFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case magsafeBatterypack
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case magsafeBatterypackFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case mapCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case mapCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case mappinSlashCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case mappinSlashCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case mappinSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case mappinSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case mediastick
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case memorychipFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case menucard
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case menucardFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case messageAndWaveform
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case messageAndWaveformFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case micBadgePlus
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case micFillBadgePlus
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case micSlashCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case micSlashCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case micSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case micSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case minusForwardslashPlus
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case musicMicCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case musicMicCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case musicNoteTv
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case musicNoteTvFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case networkBadgeShieldHalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case newspaperCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case newspaperCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case octagonBottomhalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case octagonLefthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case octagonRighthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case octagonTophalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case ovalBottomhalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case ovalInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case ovalLefthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case ovalPortraitBottomhalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case ovalPortraitInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case ovalPortraitLefthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case ovalPortraitRighthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case ovalPortraitTophalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case ovalRighthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case ovalTophalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case parentheses
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case parkingsign
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case parkingsignCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case parkingsignCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case pawprint
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case pawprintCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case pawprintCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case pawprintFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case peacesign
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case pentagon
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case pentagonBottomhalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case pentagonFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case pentagonLefthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case pentagonRighthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case pentagonTophalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case person2CropSquareStack
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case person2CropSquareStackFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case person2Wave2
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case person2Wave2Fill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case person3Sequence
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case person3SequenceFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personBadgeClock
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personBadgeClockFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personCropArtframe
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personCropCircleBadge
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personCropCircleBadgeClock
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personCropCircleBadgeClockFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personCropCircleBadgeExclamationmarkFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personCropCircleBadgeFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personCropCircleBadgeMoon
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personCropCircleBadgeMoonFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personCropCircleBadgeQuestionmarkFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personCropCircleBadgeQuestionmarkFillAr
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personCropRectangleStack
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personCropRectangleStackFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personCropSquareFilledAndAtRectangle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personCropSquareFilledAndAtRectangleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personTextRectangle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personTextRectangleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personWave2
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personWave2Fill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personalhotspotCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case personalhotspotCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case phoneAndWaveform
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case phoneAndWaveformFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case photoArtframe
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case photoCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case photoCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case pillsCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case pillsCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case pinSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case pinSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case platter2FilledIpad
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case platter2FilledIpadLandscape
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case platter2FilledIphone
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case platter2FilledIphoneLandscape
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case platterBottomApplewatchCase
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case platterFilledBottomApplewatchCase
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case platterFilledTopApplewatchCase
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case platterTopApplewatchCase
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case playRectangleOnRectangle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case playRectangleOnRectangleCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case playRectangleOnRectangleCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case playRectangleOnRectangleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case playSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case playSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case plusForwardslashMinus
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case plusRectangleOnFolderFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case plusSquareDashed
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case point3ConnectedTrianglepathDotted
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case point3FilledConnectedTrianglepathDotted
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case pointFilledTopleftDownCurvedtoPointBottomrightUp
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case pointTopleftDownCurvedtoPointBottomrightUpFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case pointTopleftDownCurvedtoPointFilledBottomrightUp
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case powerCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case powerCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case powerDotted
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case powerplug
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case powerplugFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case printerDotmatrixFilledAndPaper
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case printerFilledAndPaper
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case puzzlepieceExtension
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case puzzlepieceExtensionFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case questionmarkApp
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case questionmarkAppAr
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case questionmarkAppDashed
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case questionmarkAppDashedAr
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case questionmarkAppFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case questionmarkAppFillAr
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case quoteClosing
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case quoteOpening
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rJoystickPressDown
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rJoystickPressDownFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rJoystickTiltDown
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rJoystickTiltDownFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rJoystickTiltLeft
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rJoystickTiltLeftFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rJoystickTiltRight
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rJoystickTiltRightFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rJoystickTiltUp
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rJoystickTiltUpFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rSquareOnSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangle2Swap
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangle3Group
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangle3GroupBubbleLeft
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangle3GroupBubbleLeftFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangle3GroupFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleAndHandPointUpLeft
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleAndHandPointUpLeftFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleAndHandPointUpLeftFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleBottomhalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleBottomhalfInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleBottomthirdInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleCenterInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleCenterInsetFilledBadgePlus
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleFilledAndHandPointUpLeft
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleInsetBottomleadingFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleInsetBottomleftFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleInsetBottomrightFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleInsetBottomtrailingFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleInsetFilledAndPersonFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleInsetFilledOnRectangle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleInsetTopleadingFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleInsetTopleftFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleInsetToprightFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleInsetToptrailingFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleLeadinghalfInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleLeadinghalfInsetFilledArrowLeading
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleLeadingthirdInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleLefthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleLefthalfInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleLefthalfInsetFilledArrowLeft
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleLeftthirdInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleOnRectangleCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleOnRectangleCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleOnRectangleSlashCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleOnRectangleSlashCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleOnRectangleSlashFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleOnRectangleSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleOnRectangleSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitAndArrowRight
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitAndArrowRightFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitBottomhalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitBottomhalfInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitBottomleadingInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitBottomleftInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitBottomrightInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitBottomthirdInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitBottomtrailingInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitCenterInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitLeadinghalfInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitLeadingthirdInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitLefthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitLefthalfInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitLeftthirdInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitOnRectanglePortrait
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitOnRectanglePortraitFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitOnRectanglePortraitSlash
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitOnRectanglePortraitSlashFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitRighthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitRighthalfInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitRightthirdInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitSlash
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitSlashFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitSplit2x1
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitSplit2x1Fill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitSplit2x1Slash
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitSplit2x1SlashFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitTophalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitTophalfInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitTopleadingInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitTopleftInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitToprightInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitTopthirdInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitToptrailingInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitTrailinghalfInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectanglePortraitTrailingthirdInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleRighthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleRighthalfInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleRighthalfInsetFilledArrowRight
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleRightthirdInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleSplit2x1Slash
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleSplit2x1SlashFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleStackBadgePersonCropFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleStackBadgePlay
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleStackBadgePlayFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleTophalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleTophalfInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleTopthirdInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleTrailinghalfInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleTrailinghalfInsetFilledArrowTrailing
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case rectangleTrailingthirdInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case repeat1Ar
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case repeat1CircleAr
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case repeat1CircleFillAr
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case repeat1CircleFillHi
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case repeat1CircleHi
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case repeat1Hi
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case restartCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case returnLeft
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case returnRight
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case scissorsCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case scissorsCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case scooter
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case screwdriver
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case screwdriverFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case sensorTagRadiowavesForward
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case sensorTagRadiowavesForwardFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case shareplay
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case shareplaySlash
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case shieldLefthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case shieldLefthalfFilledSlash
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case shieldRighthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case shippingboxCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case shippingboxCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case signatureJa
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case signatureTh
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case signatureZh
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case signatureZhTraditional
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case sleepCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case sleepCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case sliderHorizontal2RectangleAndArrowTriangle2Circlepath
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case sliderHorizontalBelowSquareFilledAndSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case smallcircleFilledCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case smallcircleFilledCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case snowflake
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case snowflakeCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case snowflakeCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case sparkleMagnifyingglass
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case sparklesSquareFilledOnSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case sparklesTv
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case sparklesTvFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case speakerBadgeExclamationmark
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case speakerBadgeExclamationmarkFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case speakerCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case speakerCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case square2Stack3dBottomFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case square2Stack3dTopFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case square3Stack3dBottomFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case square3Stack3dMiddleFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case square3Stack3dTopFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareAndArrowUpCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareAndArrowUpCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareAndArrowUpTrianglebadgeExclamationmark
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareAndAtRectangleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareAndLineVerticalAndSquareFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareBottomhalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareDashedInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareFillAndLineVerticalAndSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareFilledAndLineVerticalAndSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareFilledOnSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareGrid3x1BelowLineGrid1x2Fill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareGrid3x3BottomleftFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareGrid3x3BottommiddleFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareGrid3x3BottomrightFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareGrid3x3MiddleFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareGrid3x3MiddleleftFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareGrid3x3MiddlerightFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareGrid3x3Square
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareGrid3x3TopleftFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareGrid3x3TopmiddleFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareGrid3x3ToprightFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareLefthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareRighthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareTextSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareTextSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case squareTophalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case starBubble
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case starBubbleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case starLeadinghalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case stethoscopeCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case stethoscopeCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case suitcase
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case suitcaseCart
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case suitcaseCartFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case suitcaseFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case sunAndHorizon
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case sunAndHorizonFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case sunMaxCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case sunMaxCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case tablecellsFillBadgeEllipsis
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case tagSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case tagSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case takeoutbagAndCupAndStraw
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case takeoutbagAndCupAndStrawFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case teletypeAnswerCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case teletypeAnswerCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case testtube2
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case textViewfinder
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case textformat123Hi
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case theatermasks
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case theatermasksCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case theatermasksCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case theatermasksFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case trainSideFrontCar
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case trainSideMiddleCar
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case trainSideRearCar
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case tramFillTunnel
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case trapezoidAndLineHorizontal
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case trapezoidAndLineHorizontalFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case trapezoidAndLineVertical
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case trapezoidAndLineVerticalFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case trashSlashCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case trashSlashCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case trashSlashSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case trashSlashSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case trashSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case trashSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case triangleBottomhalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case triangleInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case triangleLefthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case triangleRighthalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case triangleTophalfFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case tshirt
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case tshirtFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case tvInsetFilled
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case videoAndWaveform
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case videoAndWaveformFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case videoBadgeEllipsis
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case videoFillBadgeEllipsis
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case videoSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case videoSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case wakeCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case wakeCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case watchfaceApplewatchCase
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case waveformAndMagnifyingglass
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case waveformAndMic
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case waveformBadgeExclamationmark
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case waveformBadgeMinus
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case waveformBadgePlus
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case wifiCircle
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case wifiCircleFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case wifiSquare
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case wifiSquareFill
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case xmarkApp
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  case xmarkAppFill
  @available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *)
  case boltRingClosed
  @available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *)
  case platterFilledBottomAndArrowDownIphone
  @available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *)
  case platterFilledBottomIphone
  @available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *)
  case platterFilledTopAndArrowUpIphone
  @available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *)
  case platterFilledTopIphone
  @available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *)
  case square3Layers3dDownBackward
  @available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *)
  case square3Layers3dDownForward
  @available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *)
  case square3Layers3dDownLeft
  @available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *)
  case square3Layers3dDownRight
  @available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *)
  case textJustifyLeading
  @available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *)
  case textJustifyLeft
  @available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *)
  case textJustifyRight
  @available(iOS 15.1, macOS 12.0, tvOS 15.1, watchOS 8.1, *)
  case textJustifyTrailing
  @available(iOS 15.2, macOS 12.1, tvOS 15.2, watchOS 8.3, *)
  case airpodGen3Left
  @available(iOS 15.2, macOS 12.1, tvOS 15.2, watchOS 8.3, *)
  case airpodGen3Right
  @available(iOS 15.2, macOS 12.1, tvOS 15.2, watchOS 8.3, *)
  case airpodsGen3
  @available(iOS 15.2, macOS 12.1, tvOS 15.2, watchOS 8.3, *)
  case airpodsGen3ChargingcaseWireless
  @available(iOS 15.2, macOS 12.1, tvOS 15.2, watchOS 8.3, *)
  case airpodsGen3ChargingcaseWirelessFill
  @available(iOS 15.2, macOS 12.1, tvOS 15.2, watchOS 8.3, *)
  case beatsFitPro
  @available(iOS 15.2, macOS 12.1, tvOS 15.2, watchOS 8.3, *)
  case beatsFitProChargingcase
  @available(iOS 15.2, macOS 12.1, tvOS 15.2, watchOS 8.3, *)
  case beatsFitProChargingcaseFill
  @available(iOS 15.2, macOS 12.1, tvOS 15.2, watchOS 8.3, *)
  case beatsFitProLeft
  @available(iOS 15.2, macOS 12.1, tvOS 15.2, watchOS 8.3, *)
  case beatsFitProRight
  @available(iOS 15.2, macOS 12.1, tvOS 15.2, watchOS 8.3, *)
  case rectangleLeadinghalfFilled
  @available(iOS 15.2, macOS 12.1, tvOS 15.2, watchOS 8.3, *)
  case rectangleTrailinghalfFilled
  @available(iOS 15.2, macOS 12.1, tvOS 15.2, watchOS 8.3, *)
  case square3Layers3dDownLeftSlash
  @available(iOS 15.2, macOS 12.1, tvOS 15.2, watchOS 8.3, *)
  case square3Layers3dDownRightSlash
  @available(iOS 15.2, macOS 12.1, tvOS 15.2, watchOS 8.3, *)
  case square3Stack3dSlash
  @available(iOS 15.4, macOS 12.3, tvOS 15.4, watchOS 8.5, *)
  case cameraMacro
  @available(iOS 15.4, macOS 12.3, tvOS 15.4, watchOS 8.5, *)
  case cameraMacroCircle
  @available(iOS 15.4, macOS 12.3, tvOS 15.4, watchOS 8.5, *)
  case cameraMacroCircleFill
  @available(iOS 15.4, macOS 12.3, tvOS 15.4, watchOS 8.5, *)
  case dotsAndLineVerticalAndCursorarrowRectangle
  @available(iOS 15.4, macOS 12.3, tvOS 15.4, watchOS 8.5, *)
  case keyViewfinder
  @available(iOS 15.4, macOS 12.3, tvOS 15.4, watchOS 8.5, *)
  case personBadgeKey
  @available(iOS 15.4, macOS 12.3, tvOS 15.4, watchOS 8.5, *)
  case personBadgeKeyFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case absBrakesignal
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case airConditionerHorizontal
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case airConditionerHorizontalFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case airConditionerVertical
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case airConditionerVerticalFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case airPurifier
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case airPurifierFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case alarmWavesLeftAndRight
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case alarmWavesLeftAndRightFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case allergensFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case angle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case appleLogo
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowDownAndLineHorizontalAndArrowUp
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowDownMessage
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowDownMessageFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowLeftAndLineVerticalAndArrowRight
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowLeftAndRightTextVertical
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowRightAndLineVerticalAndArrowLeft
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowUpAndDownAndSparkles
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowUpAndDownTextHorizontal
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowUpAndLineHorizontalAndArrowDown
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowUpCircleBadgeClock
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowshapeBackward
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowshapeBackwardFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowshapeForward
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowshapeForwardFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowshapeLeft
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowshapeLeftFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowshapeRight
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowshapeRightFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowshapeTurnUpBackwardBadgeClock
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowshapeTurnUpBackwardBadgeClockFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowshapeTurnUpBackwardBadgeClockFillRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case arrowshapeTurnUpBackwardBadgeClockRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case australsign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case avRemote
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case avRemoteFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case backpack
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case backpackFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case backwardEndCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case backwardEndCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case bagBadgeQuestionmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case bagBadgeQuestionmarkAr
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case bagFillBadgeQuestionmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case bagFillBadgeQuestionmarkAr
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case bahtsign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case balloon
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case balloon2
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case balloon2Fill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case balloonFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case baseball
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case baseballCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case baseballCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case baseballDiamondBases
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case baseballFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case basket
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case basketFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case basketball
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case basketballCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case basketballCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case basketballFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case bathtub
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case bathtubFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case battery100Circle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case battery100CircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case beachUmbrella
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case beachUmbrellaFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case bellAndWavesLeftAndRight
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case bellAndWavesLeftAndRightFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case bird
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case birdFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case birthdayCake
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case birthdayCakeFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case bitcoinsign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case blindsHorizontalClosed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case blindsHorizontalOpen
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case blindsVerticalClosed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case blindsVerticalOpen
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case boltBadgeClock
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case boltBadgeClockFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case boltBrakesignal
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case boxTruck
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case boxTruckBadgeClock
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case boxTruckBadgeClockFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case boxTruckBadgeClockFillRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case boxTruckBadgeClockRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case boxTruckFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case brakesignal
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case brakesignalDashed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case brazilianrealsign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case bubblesAndSparkles
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case bubblesAndSparklesFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case buttonProgrammable
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case buttonProgrammableSquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case buttonProgrammableSquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cabinet
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cabinetFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case carbonDioxideCloud
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case carbonDioxideCloudFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case carbonMonoxideCloud
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case carbonMonoxideCloudFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case carrot
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case carrotFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cartBadgeQuestionmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cartBadgeQuestionmarkAr
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cartBadgeQuestionmarkRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cartFillBadgeQuestionmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cartFillBadgeQuestionmarkAr
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cartFillBadgeQuestionmarkRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cedisign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cellularbars
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case centsign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case chair
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case chairFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case chairLounge
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case chairLoungeFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case chandelier
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case chandelierFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case characterDuployan
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case characterPhonetic
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case characterSutton
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case chartLineDowntrendXyaxis
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case chartLineDowntrendXyaxisCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case chartLineDowntrendXyaxisCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case chartLineFlattrendXyaxis
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case chartLineFlattrendXyaxisCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case chartLineFlattrendXyaxisCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case checklistChecked
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case checklistCheckedRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case checklistUnchecked
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case checkmarkCircleBadgeQuestionmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case checkmarkCircleBadgeQuestionmarkAr
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case checkmarkCircleBadgeQuestionmarkFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case checkmarkCircleBadgeQuestionmarkFillAr
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case checkmarkCircleBadgeXmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case checkmarkCircleBadgeXmarkFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case checkmarkMessage
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case checkmarkMessageFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case chevronBackwardToLine
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case chevronForwardToLine
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case chevronLeftToLine
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case chevronRightToLine
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case circleDashedRectangle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case circleFilledPatternDiagonallineRectangle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case circleRectangleDashed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case circleRectangleFilledPatternDiagonalline
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case clipboard
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case clipboardFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case clockBadge
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case clockBadgeFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case clockBadgeQuestionmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case clockBadgeQuestionmarkAr
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case clockBadgeQuestionmarkFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case clockBadgeQuestionmarkFillAr
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case clockBadgeXmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case clockBadgeXmarkFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudBoltCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudBoltCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudBoltRainCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudBoltRainCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudDrizzleCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudDrizzleCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudFogCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudFogCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudHailCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudHailCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudHeavyrainCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudHeavyrainCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudMoonBoltCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudMoonBoltCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudMoonCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudMoonCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudMoonRainCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudMoonRainCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudRainCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudRainCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudSleetCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudSleetCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudSnowCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudSnowCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudSunBoltCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudSunBoltCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudSunCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudSunCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudSunRainCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cloudSunRainCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case coloncurrencysign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case compassDrawing
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case contactSensor
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case contactSensorFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cooktop
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cooktopFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case creditcardViewfinder
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cricketBall
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cricketBallCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cricketBallCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cricketBallFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cruzeirosign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case cursorarrowSquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case curtainsClosed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case curtainsOpen
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dehumidifier
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dehumidifierFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case deskview
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case deskviewFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dialHigh
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dialHighFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dialLow
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dialLowFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dialMedium
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dialMediumFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dishwasher
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dishwasherFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case distributeHorizontalCenter
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case distributeHorizontalCenterFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case distributeHorizontalLeft
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case distributeHorizontalLeftFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case distributeHorizontalRight
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case distributeHorizontalRightFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case distributeVerticalBottom
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case distributeVerticalBottomFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case distributeVerticalCenter
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case distributeVerticalCenterFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case distributeVerticalTop
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case distributeVerticalTopFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case docBadgeArrowUp
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case docBadgeArrowUpFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dollarsign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dollarsignArrowCirclepath
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dongsign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case doorFrenchClosed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case doorFrenchOpen
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case doorGarageClosed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case doorGarageClosedTrianglebadgeExclamationmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case doorGarageDoubleBayClosed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case doorGarageDoubleBayClosedTrianglebadgeExclamationmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case doorGarageDoubleBayOpen
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case doorGarageDoubleBayOpenTrianglebadgeExclamationmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case doorGarageOpen
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case doorGarageOpenTrianglebadgeExclamationmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case doorLeftHandClosed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case doorLeftHandOpen
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case doorRightHandClosed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case doorRightHandOpen
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case doorSlidingLeftHandClosed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case doorSlidingLeftHandOpen
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case doorSlidingRightHandClosed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case doorSlidingRightHandOpen
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dropDegreesign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dropDegreesignFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dropDegreesignSlash
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dropDegreesignSlashFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dropDegreesignSlashFillRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dropDegreesignSlashRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dropKeypadRectangle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dropKeypadRectangleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dryer
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dryerFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dumbbell
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case dumbbellFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case ellipsisMessage
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case ellipsisMessageFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case entryLeverKeypad
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case entryLeverKeypadFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case entryLeverKeypadTrianglebadgeExclamationmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case entryLeverKeypadTrianglebadgeExclamationmarkFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case envelopeOpenBadgeClock
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case eraser
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case eraserFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case eraserLineDashed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case eraserLineDashedFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case eurosign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case exclamationmarkBrakesignal
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case exclamationmarkLock
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case exclamationmarkLockFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case exclamationmarkQuestionmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case exclamationmarkQuestionmarkAr
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case externaldriveBadgeExclamationmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case externaldriveBadgeQuestionmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case externaldriveBadgeQuestionmarkAr
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case externaldriveFillBadgeExclamationmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case externaldriveFillBadgeQuestionmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case externaldriveFillBadgeQuestionmarkAr
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case externaldriveFillTrianglebadgeExclamationmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case externaldriveTrianglebadgeExclamationmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case faceSmilingInverse
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fanAndLightCeiling
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fanAndLightCeilingFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fanCeiling
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fanCeilingFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fanDesk
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fanDeskFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fanFloor
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fanFloorFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fanOscillation
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fanOscillationFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fanbladesSlash
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fanbladesSlashFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case faxmachineFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figure2AndChildHoldinghands
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figure2ArmsOpen
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureAmericanFootball
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureAndChildHoldinghands
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureArchery
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureArmsOpen
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureAustralianFootball
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureBadminton
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureBarre
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureBaseball
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureBasketball
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureBowling
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureBoxing
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureClimbing
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureCooldown
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureCoreTraining
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureCricket
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureCrossTraining
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureCurling
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureDance
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureDiscSports
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureDressLineVerticalFigure
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureElliptical
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureEquestrianSports
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureFall
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureFallCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureFallCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureFencing
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureFishing
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureFlexibility
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureGolf
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureGymnastics
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureHandCycling
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureHandball
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureHighintensityIntervaltraining
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureHiking
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureHockey
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureHunting
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureIndoorCycle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureJumprope
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureKickboxing
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureLacrosse
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureMartialArts
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureMindAndBody
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureMixedCardio
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureOpenWaterSwim
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureOutdoorCycle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figurePickleball
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figurePilates
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figurePlay
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figurePoolSwim
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureRacquetball
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureRollRunningpace
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureRolling
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureRower
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureRugby
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureRun
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureRunCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureRunCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureSailing
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureSkating
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureSkiingCrosscountry
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureSkiingDownhill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureSnowboarding
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureSoccer
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureSocialdance
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureSoftball
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureSquash
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureStairStepper
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureStairs
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureStepTraining
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureStrengthtrainingFunctional
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureStrengthtrainingTraditional
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureSurfing
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureTableTennis
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureTaichi
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureTennis
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureTrackAndField
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureVolleyball
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureWalkArrival
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureWalkDeparture
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureWalkMotion
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureWaterFitness
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureWaterpolo
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureWrestling
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case figureYoga
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case filmStack
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case filmStackFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fireplace
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fireplaceFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case firewall
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case firewallFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fish
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fishFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case flag2CrossedCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case flag2CrossedCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case flagCheckered
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case flagCheckered2Crossed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fleuron
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fleuronFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case florinsign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fluidBrakesignal
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case football
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case footballCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case footballCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case footballFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case forwardEndCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case forwardEndCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fossilShell
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fossilShellFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case francsign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fryingPan
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case fryingPanFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case gaugeHigh
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case gaugeLow
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case gaugeMedium
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case gaugeMediumBadgeMinus
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case gaugeMediumBadgePlus
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case gearBadge
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case gearBadgeRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case gearshapeArrowTriangle2Circlepath
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case globeCentralSouthAsia
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case globeCentralSouthAsiaFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case globeDesk
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case globeDeskFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case guaranisign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case handApp
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case handAppFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case handRaisedFingersSpread
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case handRaisedFingersSpreadFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case headlightHighBeam
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case headlightHighBeamFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case headlightLowBeam
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case headlightLowBeamFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case hearingdeviceAndSignalMeter
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case hearingdeviceAndSignalMeterFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case hearingdeviceEarFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case heaterVertical
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case heaterVerticalFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case hifireceiver
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case hifireceiverFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case hifispeakerAndAppletvFillRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case hifispeakerAndAppletvRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case hockeyPuck
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case hockeyPuckCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case hockeyPuckCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case hockeyPuckFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case holdBrakesignal
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case homepodAndAppletvFillRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case homepodAndAppletvRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case homepodminiAndAppletvFillRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case homepodminiAndAppletvRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case hryvniasign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case humidifier
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case humidifierAndDroplets
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case humidifierAndDropletsFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case humidifierFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case hurricaneCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case hurricaneCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case indianrupeesign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case infoBubble
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case infoBubbleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case infoSquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case infoSquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case keyboardBadgeEllipsisFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case keyboardBadgeEye
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case keyboardBadgeEyeFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case keyboardChevronCompactDownFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case keyboardChevronCompactLeftFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case keyboardOnehandedLeftFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case keyboardOnehandedRightFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case kipsign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lampCeiling
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lampCeilingFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lampCeilingInverse
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lampDesk
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lampDeskFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lampFloor
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lampFloorFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lampTable
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lampTableFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case laptopcomputerAndIpad
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case larisign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case laurelLeading
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case laurelTrailing
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightBeaconMax
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightBeaconMaxFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightBeaconMin
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightBeaconMinFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightCylindricalCeiling
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightCylindricalCeilingFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightCylindricalCeilingInverse
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightPanel
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightPanelFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightRecessed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightRecessed3
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightRecessed3Fill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightRecessed3Inverse
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightRecessedFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightRecessedInverse
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightRibbon
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightRibbonFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightStrip2
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightStrip2Fill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightbulb2
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightbulb2Fill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightbulbLed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightbulbLedFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightbulbLedWide
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightbulbLedWideFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightswitchOff
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightswitchOffFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightswitchOffSquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightswitchOffSquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightswitchOn
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightswitchOnFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightswitchOnSquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lightswitchOnSquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lirasign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case listBulletClipboard
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case listBulletClipboardFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case listClipboard
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case listClipboardFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lizard
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lizardFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case locationSlashCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case locationSlashCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lockOpenTrianglebadgeExclamationmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lockOpenTrianglebadgeExclamationmarkFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lockTrianglebadgeExclamationmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case lockTrianglebadgeExclamationmarkFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case macstudio
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case macstudioFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case manatsign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case medal
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case medalFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case medicalThermometer
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case medicalThermometerFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case messageBadge
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case messageBadgeCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case messageBadgeCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case messageBadgeCircleFillRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case messageBadgeCircleRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case messageBadgeFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case messageBadgeFillRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case messageBadgeFilledFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case messageBadgeFilledFillRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case messageBadgeRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case micAndSignalMeter
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case micAndSignalMeterFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case micBadgeXmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case micFillBadgeXmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case microbe
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case microbeCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case microbeCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case microbeFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case microwave
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case microwaveFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case millsign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case mirrorSideLeft
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case mirrorSideRight
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonHaze
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonHazeCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonHazeCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonHazeFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonStarsCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonStarsCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonphaseFirstQuarter
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonphaseFirstQuarterInverse
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonphaseFullMoon
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonphaseFullMoonInverse
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonphaseLastQuarter
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonphaseLastQuarterInverse
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonphaseNewMoon
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonphaseNewMoonInverse
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonphaseWaningCrescent
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonphaseWaningCrescentInverse
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonphaseWaningGibbous
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonphaseWaningGibbousInverse
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonphaseWaxingCrescent
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonphaseWaxingCrescentInverse
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonphaseWaxingGibbous
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case moonphaseWaxingGibbousInverse
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case nairasign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case nosignApp
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case nosignAppFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case numbersign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case oar2Crossed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case opticaldiscFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case oven
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case ovenFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case parkinglight
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case parkinglightFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case parkingsignBrakesignal
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case parkingsignBrakesignalSlash
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case partyPopper
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case partyPopperFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case pedestrianGateClosed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case pedestrianGateOpen
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case pencilAndRuler
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case pencilAndRulerFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case pencilLine
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case person2BadgeGearshape
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case person2BadgeGearshapeFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case person2Gobackward
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case person2Slash
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case person2SlashFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case personAndBackgroundDotted
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case personBadgeShieldCheckmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case personBadgeShieldCheckmarkFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case personBust
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case personBustFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case personCropRectangleBadgePlus
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case personCropRectangleBadgePlusFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case personLineDottedPerson
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case personLineDottedPersonFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case pesetasign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case pesosign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case phoneArrowDownLeftFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case phoneArrowRightFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case phoneArrowUpRightCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case phoneArrowUpRightCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case phoneArrowUpRightFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case phoneBadgeCheckmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case phoneConnectionFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case phoneDownWavesLeftAndRight
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case phoneFillBadgeCheckmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case photoStack
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case photoStackFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case pill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case pillCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case pillCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case pillFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case pipeAndDrop
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case pipeAndDropFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case playDesktopcomputer
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case playDisplay
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case playLaptopcomputer
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case playpauseCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case playpauseCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case playstationLogo
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case popcorn
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case popcornCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case popcornCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case popcornFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletStrip
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletStripFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeA
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeAFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeASquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeASquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeB
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeBFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeBSquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeBSquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeC
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeCFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeCSquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeCSquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeD
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeDFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeDSquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeDSquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeE
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeEFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeESquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeESquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeF
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeFFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeFSquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeFSquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeG
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeGFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeGSquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeGSquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeH
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeHFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeHSquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeHSquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeI
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeIFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeISquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeISquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeJ
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeJFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeJSquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeJSquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeK
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeKFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeKSquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeKSquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeL
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeLFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeLSquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeLSquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeM
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeMFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeMSquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeMSquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeN
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeNFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeNSquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeNSquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeO
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeOFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeOSquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case poweroutletTypeOSquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case questionmarkBubble
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case questionmarkBubbleAr
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case questionmarkBubbleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case questionmarkBubbleFillAr
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case quotelevel
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case recordingtapeCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case recordingtapeCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case rectanglePortraitAndArrowForward
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case rectanglePortraitAndArrowForwardFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case rectanglePortraitOnRectanglePortraitAngled
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case rectanglePortraitOnRectanglePortraitAngledFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case refrigerator
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case refrigeratorFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case roadLanes
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case roadLanesCurvedLeft
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case roadLanesCurvedRight
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case rollerShadeClosed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case rollerShadeOpen
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case romanShadeClosed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case romanShadeOpen
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case rublesign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case rupeesign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sailboat
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sailboatFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sensor
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sensorFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sharedWithYou
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sharedWithYouSlash
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case shazamLogo
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case shazamLogoFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case shekelsign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case shippingboxAndArrowBackward
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case shippingboxAndArrowBackwardFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case shoeprintsFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case shower
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case showerFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case showerHandheld
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case showerHandheldFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case showerSidejet
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case showerSidejetFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sink
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sinkFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sliderHorizontal2Gobackward
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sliderHorizontal2SquareBadgeArrowDown
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sliderHorizontal2SquareOnSquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sliderHorizontalBelowSquareAndSquareFilled
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case smokeCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case smokeCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case soccerball
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case soccerballCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case soccerballCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case soccerballCircleFillInverse
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case soccerballCircleInverse
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case soccerballInverse
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sofa
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sofaFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case space
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case speakerMinus
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case speakerMinusFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case speakerPlus
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case speakerPlusFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case speakerSquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case speakerSquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case speakerWave2BubbleLeft
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case speakerWave2BubbleLeftFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case speakerWave2BubbleLeftFillRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case speakerWave2BubbleLeftRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case spigot
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case spigotFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sportscourtCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sportscourtCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sprinkler
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sprinklerAndDroplets
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sprinklerAndDropletsFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sprinklerFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case square2Layers3d
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case square2Layers3dBottomFilled
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case square2Layers3dTopFilled
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case square3Layers3d
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case square3Layers3dBottomFilled
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case square3Layers3dDownBackwardSlashRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case square3Layers3dDownForwardSlashRtl
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case square3Layers3dMiddleFilled
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case square3Layers3dSlash
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case square3Layers3dTopFilled
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case squareAndPencilCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case squareAndPencilCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case squareBottomthirdInsetFilled
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case squareDotted
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case squareLeadingthirdInsetFilled
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case squareLeftthirdInsetFilled
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case squareOnSquareBadgePersonCrop
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case squareOnSquareBadgePersonCropFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case squareOnSquareIntersectionDashed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case squareRightthirdInsetFilled
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case squareTopthirdInsetFilled
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case squareTrailingthirdInsetFilled
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case squaresLeadingRectangle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case squareshapeDottedSplit2x2
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case stairs
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case starSquareOnSquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case starSquareOnSquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sterlingsign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case stove
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case stoveFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sunAndHorizonCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sunAndHorizonCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sunDustCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sunDustCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sunHazeCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sunHazeCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sunMaxTrianglebadgeExclamationmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sunMaxTrianglebadgeExclamationmarkFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sunriseCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sunriseCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sunsetCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case sunsetCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case swatchpalette
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case swatchpaletteFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case switchProgrammable
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case switchProgrammableFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case switchProgrammableSquare
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case switchProgrammableSquareFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case syringe
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case syringeFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case tableFurniture
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case tableFurnitureFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case teddybear
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case teddybearFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case tengesign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case tennisRacket
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case tennisRacketCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case tennisRacketCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case tennisball
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case tennisballCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case tennisballCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case tennisballFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case tent
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case tentFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case textLineFirstAndArrowtriangleForward
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case textLineLastAndArrowtriangleForward
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case textWordSpacing
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case textformat12
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case textformat12Ar
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case textformat12Hi
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case theatermaskAndPaintbrush
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case theatermaskAndPaintbrushFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case thermometerBrakesignal
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case thermometerHigh
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case thermometerLow
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case thermometerMedium
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case thermometerMediumSlash
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case thermometerSnowflakeCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case thermometerSnowflakeCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case thermometerSunCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case thermometerSunCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case timerCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case timerCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case toilet
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case toiletFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case tornadoCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case tornadoCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case trophy
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case trophyCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case trophyCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case trophyFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case tropicalstormCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case tropicalstormCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case tugriksign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case turkishlirasign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case tvAndMediaboxFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case umbrellaPercent
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case umbrellaPercentAr
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case umbrellaPercentFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case umbrellaPercentFillAr
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case vialViewfinder
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case videoDoorbell
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case videoDoorbellFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case videoprojector
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case videoprojectorFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case volleyball
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case volleyballCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case volleyballCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case volleyballFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case washer
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case washerFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case waterWaves
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case waterWavesAndArrowDown
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case waterWavesAndArrowDownTrianglebadgeExclamationmark
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case waterWavesAndArrowUp
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case waterWavesSlash
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case waveformSlash
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case webCamera
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case webCameraFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case wifiRouter
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case wifiRouterFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case windCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case windCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case windSnowCircle
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case windSnowCircleFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case windowAwning
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case windowAwningClosed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case windowCasement
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case windowCasementClosed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case windowCeiling
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case windowCeilingClosed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case windowHorizontal
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case windowHorizontalClosed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case windowShadeClosed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case windowShadeOpen
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case windowVerticalClosed
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case windowVerticalOpen
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case windshieldFrontAndFluid
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case windshieldFrontAndWiper
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case windshieldFrontAndWiperAndDrop
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case windshieldRearAndFluid
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case windshieldRearAndWiper
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case wineglass
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case wineglassFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case wonsign
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case wrenchAdjustable
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case wrenchAdjustableFill
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case xboxLogo
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  case yensign
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.String)
  #else
  public init?(rawValue: Swift.String)
  #endif
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension FlomniChat.SFSymbol : Swift.CaseIterable {
  public static var allCases: [FlomniChat.SFSymbol] {
    get
  }
  public typealias AllCases = [FlomniChat.SFSymbol]
}
extension FlomniChat.SFSymbol {
  public var name: Swift.String {
    get
  }
  @available(iOS 13.4, macOS 11.0, tvOS 13.0, watchOS 6.0, *)
  public var image: SwiftUICore.Image {
    get
  }
}
@available(iOS 13.0, macOS 11.0, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.Image {
  @available(iOS 13.0, macOS 11.0, tvOS 13.0, watchOS 6.0, *)
  public init(systemName symbol: FlomniChat.SFSymbol)
  @available(iOS 13.0, macOS 11.0, tvOS 13.0, watchOS 6.0, *)
  public init(sf symbol: FlomniChat.SFSymbol)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public func Label(_ title: SwiftUICore.LocalizedStringKey, systemImage symbol: FlomniChat.SFSymbol) -> SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image>
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public func Label(_ title: SwiftUICore.LocalizedStringKey, symbol: FlomniChat.SFSymbol) -> SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image>
extension FlomniChat.SFSymbol {
  public static func symbol(forFileURL fileURL: Foundation.URL) -> FlomniChat.SFSymbol
  #if compiler(>=5.3) && $NoncopyableGenerics
  @Sendable public static func findSymbol(by input: Swift.String) async -> SwiftUICore.Image?
  #else
  @Sendable public static func findSymbol(by input: Swift.String) async -> SwiftUICore.Image?
  #endif
}
extension FlomniChat.SharedContainer {
  public var symbolFinder: FlomniChat.Factory<FlomniChat.MLSymbolFinder> {
    get
  }
}
@_hasMissingDesignatedInitializers final public class MLSymbolFinder {
  public static let `default`: FlomniChat.MLSymbolFinder
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func findMostSimilarSymbol(to input: Swift.String) async -> FlomniChat.SFSymbol?
  #else
  public static func findMostSimilarSymbol(to input: Swift.String) async -> FlomniChat.SFSymbol?
  #endif
  @objc deinit
}
public enum SocialIcons : Swift.RawRepresentable, Swift.CaseIterable {
  public static let allCases: [FlomniChat.SocialIcons]
  case unknown(Swift.String)
  case etsy
  case facebook
  case facebookMessenger
  case github
  case google
  case imo
  case instagram
  case apple
  case discord
  case linkedin
  case medium
  case notion
  case paypal
  case pinterest
  case reddit
  case signal
  case skype
  case snapchat
  case telegram
  case tikTok
  case twitch
  case twitter
  case venmo
  case wechat
  case whatsApp
  case youTube
  case viber
  case vk
  case odnoklassniki
  case email
  case voicer
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public static func == (lhs: FlomniChat.SocialIcons, rhs: FlomniChat.SocialIcons) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var image: SwiftUICore.Image? {
    get
  }
  #else
  public var image: SwiftUICore.Image? {
    get
  }
  #endif
  public typealias AllCases = [FlomniChat.SocialIcons]
  public typealias RawValue = Swift.String
}

final public class NSModelObjectContextExecutor : @unchecked Swift.Sendable, _Concurrency.SerialExecutor {
  final public let context: CoreData.NSManagedObjectContext
  public init(context: CoreData.NSManagedObjectContext)
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  final public func enqueue(_ job: _Concurrency.UnownedJob)
  final public func asUnownedSerialExecutor() -> _Concurrency.UnownedSerialExecutor
  @objc deinit
}
public protocol NSModelActor : _Concurrency.Actor {
  nonisolated var modelContainer: CoreData.NSPersistentContainer { get }
  nonisolated var modelExecutor: FlomniChat.NSModelObjectContextExecutor { get }
}
extension FlomniChat.NSModelActor {
  nonisolated public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
  public var modelContext: CoreData.NSManagedObjectContext {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public subscript<T>(id: CoreData.NSManagedObjectID, as _: T.Type) -> T? where T : CoreData.NSManagedObject {
    get
  }
  #else
  public subscript<T>(id: CoreData.NSManagedObjectID, as _: T.Type) -> T? where T : CoreData.NSManagedObject {
    get
  }
  #endif
}
public struct SimultaneouslyScrollViewDirection : Swift.OptionSet {
  public var rawValue: Swift.Int
  public static let horizontal: FlomniChat.SimultaneouslyScrollViewDirection
  public static let vertical: FlomniChat.SimultaneouslyScrollViewDirection
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = FlomniChat.SimultaneouslyScrollViewDirection
  public typealias Element = FlomniChat.SimultaneouslyScrollViewDirection
  public typealias RawValue = Swift.Int
}
@available(iOS 13, tvOS 13, visionOS 1, *)
@available(macOS, unavailable)
public protocol SimultaneouslyScrollViewHandler {
  var scrolledToBottomPublisher: Combine.AnyPublisher<Swift.Bool, Swift.Never> { get }
  func register(scrollView: UIKit.UIScrollView)
  #if compiler(>=5.3) && $NoncopyableGenerics
  func register(scrollView: UIKit.UIScrollView, scrollDirections: FlomniChat.SimultaneouslyScrollViewDirection?)
  #else
  func register(scrollView: UIKit.UIScrollView, scrollDirections: FlomniChat.SimultaneouslyScrollViewDirection?)
  #endif
  func scrollAllToBottom(animated: Swift.Bool)
}
@_hasMissingDesignatedInitializers @available(iOS 13, tvOS 13, visionOS 1, *)
@available(macOS, unavailable)
public class SimultaneouslyScrollViewHandlerFactory {
  public static func create() -> any FlomniChat.SimultaneouslyScrollViewHandler
  @objc deinit
}
public actor AsyncPassthroughSubject<Element> {
  @objc deinit
  public init()
  public func notifications() -> _Concurrency.AsyncStream<Element>
  nonisolated public func send(_ element: Element)
  nonisolated public func finish()
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func materialBackground<S>(with style: UIKit.UIBlurEffect.Style = .systemMaterialDark, blur radius: CoreFoundation.CGFloat = 1, clipped shape: S = RoundedRectangle(cornerRadius: 0, style: .continuous), filled tint: SwiftUICore.Color = .black.opacity(0.11), bordered stroke: SwiftUICore.Color = .clear, width: CoreFoundation.CGFloat = 0) -> some SwiftUICore.View where S : SwiftUICore.Shape
  
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency dynamic public func dismissKeyboardGestures() -> some SwiftUICore.View
  
}
@frozen @_Concurrency.MainActor @preconcurrency public struct DismissKeyboardOnTappingOutside : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func body(content: FlomniChat.DismissKeyboardOnTappingOutside.Content) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat31DismissKeyboardOnTappingOutsideV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
public let flowLayoutDefaultItemSpacing: CoreFoundation.CGFloat
@_Concurrency.MainActor @preconcurrency public struct FlowLayout<RefreshBinding, Data, ItemView> : SwiftUICore.View where ItemView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(mode: FlomniChat.FlowLayout<RefreshBinding, Data, ItemView>.Mode, binding: SwiftUICore.Binding<RefreshBinding>, items: [Data], itemSpacing: CoreFoundation.CGFloat = flowLayoutDefaultItemSpacing, @SwiftUICore.ViewBuilder viewMapping: @escaping (Data) -> ItemView)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public enum Mode {
    case scrollable, vstack
    public static func == (a: FlomniChat.FlowLayout<RefreshBinding, Data, ItemView>.Mode, b: FlomniChat.FlowLayout<RefreshBinding, Data, ItemView>.Mode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat10FlowLayoutV4bodyQrvp", 0) __<RefreshBinding, Data, ItemView>
}
extension FlomniChat.FlowLayout where RefreshBinding == Swift.Never? {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(mode: FlomniChat.FlowLayout<RefreshBinding, Data, ItemView>.Mode, items: [Data], itemSpacing: CoreFoundation.CGFloat = flowLayoutDefaultItemSpacing, @SwiftUICore.ViewBuilder viewMapping: @escaping (Data) -> ItemView)
  #else
  @_Concurrency.MainActor @preconcurrency public init(mode: FlomniChat.FlowLayout<RefreshBinding, Data, ItemView>.Mode, items: [Data], itemSpacing: CoreFoundation.CGFloat = flowLayoutDefaultItemSpacing, @SwiftUICore.ViewBuilder viewMapping: @escaping (Data) -> ItemView)
  #endif
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func onFrameChange(coordinateSpace: SwiftUICore.CoordinateSpace = .global, _ handler: @escaping (CoreFoundation.CGRect) -> Swift.Void) -> some SwiftUICore.View
  
}
public struct OffsetKey : SwiftUICore.PreferenceKey {
  public static var defaultValue: CoreFoundation.CGRect
  public static func reduce(value: inout CoreFoundation.CGRect, nextValue: () -> CoreFoundation.CGRect)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Value = CoreFoundation.CGRect
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func offset(_ coordinateSpace: Swift.AnyHashable, completion: @escaping (CoreFoundation.CGRect) -> Swift.Void) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func checkAnimationEnded<Value>(for value: Value, onEnd: @escaping () -> Swift.Void) -> some SwiftUICore.View where Value : SwiftUICore.VectorArithmetic
  
}
public enum ColorError : Swift.Error {
  case invalidHexString
  case invalidScanHexInt64
  case invalidHexDigitInIntegerLiteral
  public static func == (a: FlomniChat.ColorError, b: FlomniChat.ColorError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@propertyWrapper public struct HexColor : Swift.Codable {
  public var wrappedValue: Swift.String
  public init(wrappedValue: Swift.String)
  public var projectedValue: SwiftUICore.Color {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SwiftUICore.Color {
  public var uiColor: UIKit.UIColor {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(hex: Swift.String) throws
  #else
  public init?(hex: Swift.String) throws
  #endif
}
extension UIKit.UIColor {
  public var color: SwiftUICore.Color {
    get
  }
}
open class KeychainWrapper {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(serviceName: Swift.String, accessGroup: Swift.String? = nil)
  #else
  public init(serviceName: Swift.String, accessGroup: Swift.String? = nil)
  #endif
  public static let standard: FlomniChat.KeychainWrapper
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func bool(for key: Swift.String) -> Swift.Bool?
  #else
  open func bool(for key: Swift.String) -> Swift.Bool?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func data(for key: Swift.String) -> Foundation.Data?
  #else
  open func data(for key: Swift.String) -> Foundation.Data?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func double(for key: Swift.String) -> Swift.Double?
  #else
  open func double(for key: Swift.String) -> Swift.Double?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func float(for key: Swift.String) -> Swift.Float?
  #else
  open func float(for key: Swift.String) -> Swift.Float?
  #endif
  open func hasValue(for key: Swift.String) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func integer(for key: Swift.String) -> Swift.Int?
  #else
  open func integer(for key: Swift.String) -> Swift.Int?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func number(for key: Swift.String) -> Foundation.NSNumber?
  #else
  open func number(for key: Swift.String) -> Foundation.NSNumber?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func object<T>(for key: Swift.String) -> T? where T : ObjectiveC.NSObject, T : Foundation.NSCoding
  #else
  open func object<T>(for key: Swift.String) -> T? where T : ObjectiveC.NSObject, T : Foundation.NSCoding
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func string(for key: Swift.String) -> Swift.String?
  #else
  open func string(for key: Swift.String) -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func dataRef(for key: Swift.String) -> Foundation.Data?
  #else
  open func dataRef(for key: Swift.String) -> Foundation.Data?
  #endif
  @discardableResult
  open func set(_ value: Swift.Int, for key: Swift.String) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Float, for key: Swift.String) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Double, for key: Swift.String) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Bool, for key: Swift.String) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.String, for key: Swift.String) -> Swift.Bool
  @discardableResult
  open func set(_ value: any Foundation.NSCoding, for key: Swift.String) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.Data, for key: Swift.String) -> Swift.Bool
  @discardableResult
  open func removeObject(for key: Swift.String) -> Swift.Bool
  open func removeAllKeys() -> Swift.Bool
  open class func wipeKeychain()
  @objc deinit
}
open class KeychainService {
  public init(wrapper: FlomniChat.KeychainWrapper = .standard)
  open func accessibility(for key: Swift.String) -> CoreFoundation.CFString
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func bool(for key: Swift.String) -> Swift.Bool?
  #else
  open func bool(for key: Swift.String) -> Swift.Bool?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func data(for key: Swift.String) -> Foundation.Data?
  #else
  open func data(for key: Swift.String) -> Foundation.Data?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func dataRef(for key: Swift.String) -> Foundation.Data?
  #else
  open func dataRef(for key: Swift.String) -> Foundation.Data?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func double(for key: Swift.String) -> Swift.Double?
  #else
  open func double(for key: Swift.String) -> Swift.Double?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func float(for key: Swift.String) -> Swift.Float?
  #else
  open func float(for key: Swift.String) -> Swift.Float?
  #endif
  open func hasValue(for key: Swift.String) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func integer(for key: Swift.String) -> Swift.Int?
  #else
  open func integer(for key: Swift.String) -> Swift.Int?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func string(for key: Swift.String) -> Swift.String?
  #else
  open func string(for key: Swift.String) -> Swift.String?
  #endif
  @discardableResult
  open func removeObject(for key: Swift.String) -> Swift.Bool
  open func removeAllKeys() -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Bool, for key: Swift.String) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.Data, for key: Swift.String) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Double, for key: Swift.String) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Float, for key: Swift.String) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Int, for key: Swift.String) -> Swift.Bool
  @discardableResult
  open func set(_ value: any Foundation.NSCoding, for key: Swift.String) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.String, for key: Swift.String) -> Swift.Bool
  @objc deinit
}
extension FlomniChat.KeychainService {
  public static var shared: FlomniChat.KeychainService {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct LazyView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(_ build: @autoclosure @escaping () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: Content {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Content
}
public enum MIMEType : Swift.Identifiable, Swift.CaseIterable, Swift.RawRepresentable {
  public var rawValue: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.String)
  #else
  public init?(rawValue: Swift.String)
  #endif
  public static var allCases: [FlomniChat.MIMEType]
  case application(FlomniChat.MIMEType.Application), audio(FlomniChat.MIMEType.Audio), image(FlomniChat.MIMEType.Image), text(FlomniChat.MIMEType.Text), video(FlomniChat.MIMEType.Video)
  public var id: Swift.String {
    get
  }
  public enum Application : Swift.String, Swift.CaseIterable, Swift.Identifiable {
    case ai, atom, bin, crt, cco, deb, der, dll, dmg, doc, docx, ear, eot, eps, exe, hqx, img, iso, jar, jardiff, jnlp, js, json, kml, kmz, m3u8, msi, msm, msp, pdb, pdf, pem, pl, pm, ppt, pptx, prc, ps, rar, rpm, rss, rtf, run, sea, sit, swf, war, tcl, wmlc, woff, x7z, xhtml, xls, xlsx, xpi, xspf, zip
    public var id: Swift.String {
      get
    }
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init?(rawValue: Swift.String)
    #else
    public init?(rawValue: Swift.String)
    #endif
    public typealias AllCases = [FlomniChat.MIMEType.Application]
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [FlomniChat.MIMEType.Application] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Audio : Swift.String, Swift.CaseIterable, Swift.Identifiable {
    case kar, m4a, midi, mp3, ogg, ra
    public var id: Swift.String {
      get
    }
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init?(rawValue: Swift.String)
    #else
    public init?(rawValue: Swift.String)
    #endif
    public typealias AllCases = [FlomniChat.MIMEType.Audio]
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [FlomniChat.MIMEType.Audio] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Image : Swift.String, Swift.CaseIterable, Swift.Identifiable {
    case bmp, gif, ico, jpeg, jng, png, svg, tiff, wbmp, webp
    public var id: Swift.String {
      get
    }
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init?(rawValue: Swift.String)
    #else
    public init?(rawValue: Swift.String)
    #endif
    public typealias AllCases = [FlomniChat.MIMEType.Image]
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [FlomniChat.MIMEType.Image] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Text : Swift.String, Swift.CaseIterable, Swift.Identifiable {
    case plain, css, csv, htc, html, jad, mathml, xml, wml
    public var id: Swift.String {
      get
    }
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init?(rawValue: Swift.String)
    #else
    public init?(rawValue: Swift.String)
    #endif
    public typealias AllCases = [FlomniChat.MIMEType.Text]
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [FlomniChat.MIMEType.Text] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Video : Swift.String, Swift.CaseIterable, Swift.Identifiable {
    case asf, asx, avi, flv, m4v, mng, mp4, mpeg, mov, ts, video3gpp, webm, wmv
    public var id: Swift.String {
      get
    }
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init?(rawValue: Swift.String)
    #else
    public init?(rawValue: Swift.String)
    #endif
    public typealias AllCases = [FlomniChat.MIMEType.Video]
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [FlomniChat.MIMEType.Video] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Archive : Swift.String, Swift.CaseIterable, Swift.Identifiable {
    case gzip, zip
    public var id: Swift.String {
      get
    }
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init?(rawValue: Swift.String)
    #else
    public init?(rawValue: Swift.String)
    #endif
    public typealias AllCases = [FlomniChat.MIMEType.Archive]
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public static var allCases: [FlomniChat.MIMEType.Archive] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public static func from(pathExtension: Swift.String) throws -> FlomniChat.MIMEType
  public typealias AllCases = [FlomniChat.MIMEType]
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
}
public enum NetworkStatus : Swift.String {
  case connected
  case disconnected
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.String)
  #else
  public init?(rawValue: Swift.String)
  #endif
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public actor NetworkMonitor {
  public static let shared: FlomniChat.NetworkMonitor
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
public protocol Observable : Combine.ObservableObject {
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func environment<T>(_ object: T?) -> some SwiftUICore.View where T : FlomniChat.Observable
  
  #else
  @_Concurrency.MainActor @preconcurrency public func environment<T>(_ object: T?) -> some SwiftUICore.View where T : FlomniChat.Observable
  
  #endif
}
extension _Concurrency.Task {
  public func whenAll<T>(tasks: [_Concurrency.Task<T, any Swift.Error>]) async throws -> [T] where T : Swift.Sendable
}
extension SwiftUICore.EnvironmentValues {
  public var orientation: FlomniChat.OrientationManager {
    get
    set
  }
}
public struct OrientationKey : SwiftUICore.EnvironmentKey {
  public static var defaultValue: FlomniChat.OrientationManager
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Value = FlomniChat.OrientationManager
}
extension UIKit.UIDeviceOrientation {
  public var notchSide: SwiftUICore.Edge.Set {
    get
  }
}
@_hasMissingDesignatedInitializers final public class OrientationManager : FlomniChat.Observable {
  final public var type: UIKit.UIDeviceOrientation
  public static let shared: FlomniChat.OrientationManager
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct FlomniNotificationEditor : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat0A18NotificationEditorV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct LocalNotificationEditor : SwiftUICore.View, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public static func == (lhs: FlomniChat.LocalNotificationEditor, rhs: FlomniChat.LocalNotificationEditor) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat23LocalNotificationEditorV4bodyQrvp", 0) __
}
@available(iOS, deprecated: 16.0)
@available(macOS, deprecated: 13.0)
@available(watchOS, deprecated: 9.0)
@available(iOS, message: "This **will be removed** in an upcoming release, regardless of semantic versioning")
@available(macOS, message: "This **will be removed** in an upcoming release, regardless of semantic versioning")
public protocol Shareable {
  var pathExtension: Swift.String { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  var itemProvider: Foundation.NSItemProvider? { get }
  #else
  var itemProvider: Foundation.NSItemProvider? { get }
  #endif
}
extension Swift.String {
  public var pathExtensionTXT: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var itemProvider: Foundation.NSItemProvider? {
    get
  }
  #else
  public var itemProvider: Foundation.NSItemProvider? {
    get
  }
  #endif
}
extension Foundation.URL {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var itemProvider: Foundation.NSItemProvider? {
    get
  }
  #else
  public var itemProvider: Foundation.NSItemProvider? {
    get
  }
  #endif
}
extension SwiftUICore.Image {
  public var pathExtension: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var itemProvider: Foundation.NSItemProvider? {
    get
  }
  #else
  public var itemProvider: Foundation.NSItemProvider? {
    get
  }
  #endif
}
extension UIKit.UIImage {
  public var pathExtension: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var itemProvider: Foundation.NSItemProvider? {
    get
  }
  #else
  public var itemProvider: Foundation.NSItemProvider? {
    get
  }
  #endif
}
@available(iOS, deprecated: 16.0)
public struct ProposedViewSize : Swift.Equatable, Swift.Sendable {
  public var width: CoreFoundation.CGFloat?
  public var height: CoreFoundation.CGFloat?
  public static let zero: FlomniChat.ProposedViewSize
  public static let infinity: FlomniChat.ProposedViewSize
  public static let unspecified: FlomniChat.ProposedViewSize
  public init(_ size: CoreFoundation.CGSize)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(width: CoreFoundation.CGFloat?, height: CoreFoundation.CGFloat?)
  #else
  public init(width: CoreFoundation.CGFloat?, height: CoreFoundation.CGFloat?)
  #endif
  public func replacingUnspecifiedDimensions(by size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  public static func == (a: FlomniChat.ProposedViewSize, b: FlomniChat.ProposedViewSize) -> Swift.Bool
}
@available(iOS, deprecated: 16.0)
final public class ImageRenderer<Content> : Foundation.ObservableObject where Content : SwiftUICore.View {
  final public var content: Content
  final public var label: Swift.String?
  final public var proposedSize: FlomniChat.ProposedViewSize
  final public var scale: CoreFoundation.CGFloat
  final public var isOpaque: Swift.Bool
  final public var colorMode: SwiftUICore.ColorRenderingMode
  public init(content: Content)
  @available(tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @available(iOS, introduced: 13.0, deprecated: 16.0)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension FlomniChat.ImageRenderer {
  #if compiler(>=5.3) && $NoncopyableGenerics
  final public var cgImage: CoreGraphics.CGImage? {
    get
  }
  #else
  final public var cgImage: CoreGraphics.CGImage? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  final public var uiImage: UIKit.UIImage? {
    get
  }
  #else
  final public var uiImage: UIKit.UIImage? {
    get
  }
  #endif
}
extension SwiftUICore.ColorRenderingMode {
  public var range: UIKit.UIGraphicsImageRendererFormat.Range {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct Shimmer : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func body(content: FlomniChat.Shimmer.Content) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat7ShimmerV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func shimmering(active: Swift.Bool = true) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func onStatusBarTap(onTap: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func addSwipeAction<V1, V2>(menu: FlomniChat.MenuType = .slided, state: SwiftUICore.Binding<FlomniChat.SwipeState> = .constant(.untouched), @SwiftUICore.ViewBuilder _ content: @escaping () -> SwiftUICore.TupleView<(FlomniChat.Leading<V1>, FlomniChat.Trailing<V2>)>) -> some SwiftUICore.View where V1 : SwiftUICore.View, V2 : SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func addSwipeAction<V1>(menu: FlomniChat.MenuType = .slided, edge: SwiftUICore.HorizontalAlignment, state: SwiftUICore.Binding<FlomniChat.SwipeState> = .constant(.untouched), @SwiftUICore.ViewBuilder _ content: @escaping () -> V1) -> some SwiftUICore.View where V1 : SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func addFullSwipeAction<V1, V2>(menu: FlomniChat.MenuType = .slided, swipeColor: SwiftUICore.Color = Color.red, swipeRole: FlomniChat.SwipeRole = .destructive, state: SwiftUICore.Binding<FlomniChat.SwipeState> = .constant(.untouched), @SwiftUICore.ViewBuilder _ content: @escaping () -> SwiftUICore.TupleView<(FlomniChat.Leading<V1>, FlomniChat.Trailing<V2>)>, action: (() -> Swift.Void)? = nil) -> some SwiftUICore.View where V1 : SwiftUICore.View, V2 : SwiftUICore.View
  
  #else
  @_Concurrency.MainActor @preconcurrency public func addFullSwipeAction<V1, V2>(menu: FlomniChat.MenuType = .slided, swipeColor: SwiftUICore.Color = Color.red, swipeRole: FlomniChat.SwipeRole = .destructive, state: SwiftUICore.Binding<FlomniChat.SwipeState> = .constant(.untouched), @SwiftUICore.ViewBuilder _ content: @escaping () -> SwiftUICore.TupleView<(FlomniChat.Leading<V1>, FlomniChat.Trailing<V2>)>, action: (() -> Swift.Void)? = nil) -> some SwiftUICore.View where V1 : SwiftUICore.View, V2 : SwiftUICore.View
  
  #endif
}
public typealias Leading<V> = SwiftUICore.Group<V> where V : SwiftUICore.View
public typealias Trailing<V> = SwiftUICore.Group<V> where V : SwiftUICore.View
public enum MenuType {
  case slided
  case swiped
  public static func == (a: FlomniChat.MenuType, b: FlomniChat.MenuType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SwipeRole {
  case destructive
  case cancel
  case defaults
  public static func == (a: FlomniChat.SwipeRole, b: FlomniChat.SwipeRole) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SwipeState : Swift.Equatable {
  case untouched
  case swiped(Foundation.UUID)
  public static func == (a: FlomniChat.SwipeState, b: FlomniChat.SwipeState) -> Swift.Bool
}
@_Concurrency.MainActor @preconcurrency public struct FloatingTextField : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(placeholderText: Swift.String, placeholderOffset offset: CoreFoundation.CGFloat = 0, scaleEffectValue scale: CoreFoundation.CGFloat = 1, colorPalette: (primary: SwiftUICore.Color, secondary: SwiftUICore.Color) = (.accentColor, .secondary), onTextAction: ((Swift.String, Swift.String) -> Swift.Void)? = nil)
  #else
  @_Concurrency.MainActor @preconcurrency public init(placeholderText: Swift.String, placeholderOffset offset: CoreFoundation.CGFloat = 0, scaleEffectValue scale: CoreFoundation.CGFloat = 1, colorPalette: (primary: SwiftUICore.Color, secondary: SwiftUICore.Color) = (.accentColor, .secondary), onTextAction: ((Swift.String, Swift.String) -> Swift.Void)? = nil)
  #endif
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat17FloatingTextFieldV4bodyQrvp", 0) __
}
extension FlomniChat.FloatingTextField {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func onTextChange(_ onTextAction: ((_ oldValue: Swift.String, _ newValue: Swift.String) -> Swift.Void)?) -> FlomniChat.FloatingTextField
  #else
  @_Concurrency.MainActor @preconcurrency public func onTextChange(_ onTextAction: ((_ oldValue: Swift.String, _ newValue: Swift.String) -> Swift.Void)?) -> FlomniChat.FloatingTextField
  #endif
}

extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func clearButton(isActive: Swift.Bool = true, _ text: SwiftUICore.Binding<Swift.String?>, onClear: @escaping () -> Swift.Void = { }) -> some SwiftUICore.View
  
  #else
  @_Concurrency.MainActor @preconcurrency public func clearButton(isActive: Swift.Bool = true, _ text: SwiftUICore.Binding<Swift.String?>, onClear: @escaping () -> Swift.Void = { }) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func clearButton(isActive: Swift.Bool = true, _ text: SwiftUICore.Binding<Swift.String>, onClear: (() -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  #else
  @_Concurrency.MainActor @preconcurrency public func clearButton(isActive: Swift.Bool = true, _ text: SwiftUICore.Binding<Swift.String>, onClear: (() -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  #endif
}
@frozen @_Concurrency.MainActor @preconcurrency public struct TextFieldClearButton : SwiftUICore.ViewModifier {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(fieldText: SwiftUICore.Binding<Swift.String?>, onClear: @escaping () -> Swift.Void)
  #else
  @_Concurrency.MainActor @preconcurrency public init(fieldText: SwiftUICore.Binding<Swift.String?>, onClear: @escaping () -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(fieldText: SwiftUICore.Binding<Swift.String>, onClear: (() -> Swift.Void)?)
  #else
  @_Concurrency.MainActor @preconcurrency public init(fieldText: SwiftUICore.Binding<Swift.String>, onClear: (() -> Swift.Void)?)
  #endif
  @_Concurrency.MainActor @preconcurrency private var _fieldText: SwiftUICore.Binding<Swift.String>
  @_Concurrency.MainActor @preconcurrency internal var completion: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public func body(content: FlomniChat.TextFieldClearButton.Content) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat20TextFieldClearButtonV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
@available(iOS 15, macOS 12, *)
extension FlomniChat.TextSliderStyle where Self == FlomniChat.BorderedTextSliderStyle {
  public static var bordered: FlomniChat.BorderedTextSliderStyle {
    get
  }
}
@available(iOS 15, macOS 12, *)
public struct BorderedTextSliderStyle : FlomniChat.TextSliderStyle {
  public func makeBody(configuration: FlomniChat.BorderedTextSliderStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 15, macOS 12, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat23BorderedTextSliderStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(iOS 15, macOS 12, *)
extension FlomniChat.TextSliderStyle where Self == FlomniChat.PlainTextSliderStyle {
  public static var plain: FlomniChat.PlainTextSliderStyle {
    get
  }
}
@available(iOS 15, macOS 12, *)
public struct PlainTextSliderStyle : FlomniChat.TextSliderStyle {
  public func makeBody(configuration: FlomniChat.PlainTextSliderStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 15, macOS 12, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat20PlainTextSliderStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(iOS 15, macOS 12, *)
public protocol TextSliderStyle {
  associatedtype Body : SwiftUICore.View
  typealias Configuration = FlomniChat.TextSliderConfiguration
  @SwiftUICore.ViewBuilder func makeBody(configuration: Self.Configuration) -> Self.Body
}
@available(iOS 15, macOS 12, *)
public struct TextSliderConfiguration {
  public var value: Swift.Double {
    get
  }
  public let bounds: Swift.ClosedRange<Swift.Double>
  public let step: Swift.Double.Stride
  public let format: Foundation.FloatingPointFormatStyle<Swift.Double>
  public var phase: FlomniChat.TextSlider.Phase {
    get
  }
  public var label: some SwiftUICore.View {
    get
  }
}
@available(iOS 15, macOS 12, *)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func textSliderStyle<S>(_ style: S) -> some SwiftUICore.View where S : FlomniChat.TextSliderStyle
  
}
@available(iOS 15, macOS 12, *)
extension FlomniChat.TextSlider {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init<Value>(value: SwiftUICore.Binding<Value>, in bounds: Swift.ClosedRange<Value> = 0...1, format: Foundation.FloatingPointFormatStyle<Swift.Double>? = nil) where Value : Swift.BinaryFloatingPoint, Value.Stride : Swift.BinaryFloatingPoint
  #else
  @_Concurrency.MainActor @preconcurrency public init<Value>(value: SwiftUICore.Binding<Value>, in bounds: Swift.ClosedRange<Value> = 0...1, format: Foundation.FloatingPointFormatStyle<Swift.Double>? = nil) where Value : Swift.BinaryFloatingPoint, Value.Stride : Swift.BinaryFloatingPoint
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init<Value>(value: SwiftUICore.Binding<Value>, in bounds: Swift.ClosedRange<Value> = 0...1, format: Foundation.FloatingPointFormatStyle<Swift.Double>? = nil) where Value : Swift.BinaryInteger, Value.Stride : Swift.BinaryFloatingPoint
  #else
  @_Concurrency.MainActor @preconcurrency public init<Value>(value: SwiftUICore.Binding<Value>, in bounds: Swift.ClosedRange<Value> = 0...1, format: Foundation.FloatingPointFormatStyle<Swift.Double>? = nil) where Value : Swift.BinaryInteger, Value.Stride : Swift.BinaryFloatingPoint
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init<Value>(value: SwiftUICore.Binding<Value>, in bounds: Swift.ClosedRange<Value>, step: Value.Stride = 1, format: Foundation.FloatingPointFormatStyle<Swift.Double>? = nil) where Value : Swift.BinaryFloatingPoint, Value.Stride : Swift.BinaryFloatingPoint
  #else
  @_Concurrency.MainActor @preconcurrency public init<Value>(value: SwiftUICore.Binding<Value>, in bounds: Swift.ClosedRange<Value>, step: Value.Stride = 1, format: Foundation.FloatingPointFormatStyle<Swift.Double>? = nil) where Value : Swift.BinaryFloatingPoint, Value.Stride : Swift.BinaryFloatingPoint
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init<Value>(value: SwiftUICore.Binding<Value>, in bounds: Swift.ClosedRange<Value>, step: Value.Stride = 1, format: Foundation.FloatingPointFormatStyle<Swift.Double>? = nil) where Value : Swift.BinaryInteger, Value.Stride : Swift.BinaryFloatingPoint
  #else
  @_Concurrency.MainActor @preconcurrency public init<Value>(value: SwiftUICore.Binding<Value>, in bounds: Swift.ClosedRange<Value>, step: Value.Stride = 1, format: Foundation.FloatingPointFormatStyle<Swift.Double>? = nil) where Value : Swift.BinaryInteger, Value.Stride : Swift.BinaryFloatingPoint
  #endif
}
@available(iOS 15, macOS 12, *)
@_Concurrency.MainActor @preconcurrency public struct TextSlider : SwiftUICore.View {
  public enum Phase : Swift.Equatable {
    case began
    case editing
    case dragging
    case ended
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: FlomniChat.TextSlider.Phase, b: FlomniChat.TextSlider.Phase) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 15, tvOS 13.0, watchOS 6.0, macOS 12, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat10TextSliderV4bodyQrvp", 0) __
}
@available(iOS 16, tvOS 16, macOS 13, watchOS 9, *)
@_Concurrency.MainActor @preconcurrency public struct VFlowStack<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(alignment: SwiftUICore.Alignment = .center, horizontal: CoreFoundation.CGFloat? = nil, vertical: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder _ content: () -> Content)
  #else
  @_Concurrency.MainActor @preconcurrency public init(alignment: SwiftUICore.Alignment = .center, horizontal: CoreFoundation.CGFloat? = nil, vertical: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder _ content: () -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(alignment: SwiftUICore.Alignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder _ content: () -> Content)
  #else
  @_Concurrency.MainActor @preconcurrency public init(alignment: SwiftUICore.Alignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder _ content: () -> Content)
  #endif
  @_Concurrency.MainActor @preconcurrency public init(positioning: FlomniChat.VFlowPositioning, @SwiftUICore.ViewBuilder _ content: () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16, tvOS 16, watchOS 9, macOS 13, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat10VFlowStackV4bodyQrvp", 0) __<Content>
}
@available(iOS 16, tvOS 16, macOS 13, watchOS 9, *)
public struct VFlowPositioning {
  public struct Horizontal {
    public var alignment: SwiftUICore.HorizontalAlignment
    public var spacing: CoreFoundation.CGFloat
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init(alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil)
    #else
    public init(alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil)
    #endif
  }
  public struct Vertical {
    public var alignment: SwiftUICore.VerticalAlignment
    public var spacing: CoreFoundation.CGFloat
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init(alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil)
    #else
    public init(alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil)
    #endif
  }
  public var horizontal: FlomniChat.VFlowPositioning.Horizontal
  public var vertical: FlomniChat.VFlowPositioning.Vertical
  public init(horizontal: FlomniChat.VFlowPositioning.Horizontal = .init(), vertical: FlomniChat.VFlowPositioning.Vertical = .init())
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(alignment: SwiftUICore.Alignment, spacing: CoreFoundation.CGFloat? = nil)
  #else
  public init(alignment: SwiftUICore.Alignment, spacing: CoreFoundation.CGFloat? = nil)
  #endif
}
@available(iOS 16, tvOS 16, macOS 13, watchOS 9, *)
extension Swift.BidirectionalCollection where Self.Element : Swift.BinaryFloatingPoint {
  public func joined(spacing: Self.Element) -> Self.Element
}
final public class ChatClient : Combine.ObservableObject, Swift.CustomDebugStringConvertible {
  public static var `static`: FlomniChat.ChatClient
  final public var debugDescription: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @SwiftUICore.Environment public static var currentUserIdRegisteredForPush: Swift.String? {
    get
  }
  #else
  @SwiftUICore.Environment public static var currentUserIdRegisteredForPush: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  final public var userHash: Swift.String? {
    get
  }
  #else
  final public var userHash: Swift.String? {
    get
  }
  #endif
  @SwiftUICore.Environment final public var companyID: Swift.String {
    get
  }
  @SwiftUICore.Environment final public var userId: Swift.String {
    get
  }
  public init()
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension FlomniChat.ChatClient {
  final public func connect(loadAutomatically: Swift.Bool) async
  final public func connect(with pushNotification: FlomniChat.FlomniNotification) async throws
  final public func removeAllSessions() async throws
  final public func removeSession(session: FlomniChat.Session)
}
public struct ChatClientConfig {
  @SwiftUICore.Environment public static var applicationGroupIdentifier: Swift.String {
    get
  }
  public static var localStorageFolderURL: Foundation.URL?
  @SwiftUICore.Environment public var baseURL: FlomniChat.BaseURL {
    get
  }
  public var isLocalStorageEnabled: Swift.Bool
  public var shouldFlushLocalStorageOnStart: Swift.Bool
  public var localCaching: FlomniChat.ChatClientConfig.LocalCaching
  public init()
}
extension FlomniChat.ChatClientConfig {
  public struct LocalCaching : Swift.Equatable {
    public var chatChannel: FlomniChat.ChatClientConfig.ChatChannel
    public static func == (a: FlomniChat.ChatClientConfig.LocalCaching, b: FlomniChat.ChatClientConfig.LocalCaching) -> Swift.Bool
  }
  public struct ChatChannel : Swift.Equatable {
    public var lastActiveWatchersLimit: Swift.Int
    public var lastActiveMembersLimit: Swift.Int
    public var latestMessagesLimit: Swift.Int
    public static func == (a: FlomniChat.ChatClientConfig.ChatChannel, b: FlomniChat.ChatClientConfig.ChatChannel) -> Swift.Bool
  }
}
public class ClientError : Swift.Error, Swift.CustomStringConvertible {
  public struct Location : Swift.Equatable {
    public let file: Swift.String
    public let line: Swift.Int
    public static func == (a: FlomniChat.ClientError.Location, b: FlomniChat.ClientError.Location) -> Swift.Bool
  }
  final public let location: FlomniChat.ClientError.Location?
  final public let message: Swift.String?
  final public let underlyingError: (any Swift.Error)?
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var errorDescription: Swift.String? {
    get
  }
  #else
  public var errorDescription: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var errorPayload: FlomniChat.ErrorPayload? {
    get
  }
  #else
  public var errorPayload: FlomniChat.ErrorPayload? {
    get
  }
  #endif
  public var localizedDescription: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(with error: (any Swift.Error)? = nil, _ file: Swift.StaticString = #file, _ line: Swift.UInt = #line)
  #else
  public init(with error: (any Swift.Error)? = nil, _ file: Swift.StaticString = #file, _ line: Swift.UInt = #line)
  #endif
  public init(_ message: Swift.String, _ file: Swift.StaticString = #file, _ line: Swift.UInt = #line)
  @objc deinit
}
extension FlomniChat.ClientError {
  @_inheritsConvenienceInitializers public class Unexpected : FlomniChat.ClientError {
    #if compiler(>=5.3) && $NoncopyableGenerics
    override public init(with error: (any Swift.Error)? = nil, _ file: Swift.StaticString = #file, _ line: Swift.UInt = #line)
    #else
    override public init(with error: (any Swift.Error)? = nil, _ file: Swift.StaticString = #file, _ line: Swift.UInt = #line)
    #endif
    override public init(_ message: Swift.String, _ file: Swift.StaticString = #file, _ line: Swift.UInt = #line)
    @objc deinit
  }
  @_inheritsConvenienceInitializers public class Unknown : FlomniChat.ClientError {
    #if compiler(>=5.3) && $NoncopyableGenerics
    override public init(with error: (any Swift.Error)? = nil, _ file: Swift.StaticString = #file, _ line: Swift.UInt = #line)
    #else
    override public init(with error: (any Swift.Error)? = nil, _ file: Swift.StaticString = #file, _ line: Swift.UInt = #line)
    #endif
    override public init(_ message: Swift.String, _ file: Swift.StaticString = #file, _ line: Swift.UInt = #line)
    @objc deinit
  }
}
extension FlomniChat.ClientError : Swift.Equatable {
  public static func == (lhs: FlomniChat.ClientError, rhs: FlomniChat.ClientError) -> Swift.Bool
}
public struct ErrorPayload : Foundation.LocalizedError, Swift.Codable, Swift.CustomDebugStringConvertible, Swift.Equatable {
  public let code: Swift.Int
  public let message: Swift.String
  public let statusCode: Swift.Int
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var errorDescription: Swift.String? {
    get
  }
  #else
  public var errorDescription: Swift.String? {
    get
  }
  #endif
  public var debugDescription: Swift.String {
    get
  }
  public static func == (a: FlomniChat.ErrorPayload, b: FlomniChat.ErrorPayload) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Foundation.URL : Swift.Sendable {
}
public protocol APIRequest {
  associatedtype ResponseDataType
  func parseResponse(data: Foundation.Data) throws -> Self.ResponseDataType
  func make(api: any FlomniChat.URLGenerator, method: FlomniChat.HTTPMethod) throws -> Foundation.URLRequest
}
extension FlomniChat.APIRequest where Self.ResponseDataType == Foundation.Data {
  public func parseResponse(data: Foundation.Data) throws -> Foundation.Data
}
extension FlomniChat.APIRequest {
  public func make(api: any FlomniChat.URLGenerator, method: FlomniChat.HTTPMethod) throws -> Foundation.URLRequest
}
public enum HTTPMethod : @unchecked Swift.Sendable {
  case get(headers: [Swift.String : Swift.String] = [:], token: Swift.String? = nil)
  case post(headers: [Swift.String : Swift.String] = ["Content-Type": "application/json"], token: Swift.String? = nil, body: [Swift.String : Any])
  case put(headers: [Swift.String : Swift.String] = [:], token: Swift.String? = nil)
  case delete(headers: [Swift.String : Swift.String] = [:], token: Swift.String? = nil)
  case patch(headers: [Swift.String : Swift.String] = [:], token: Swift.String? = nil)
}
extension FlomniChat.HTTPMethod : Swift.CustomStringConvertible {
  public var operation: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
}
public protocol NetworkClient {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @discardableResult
  func fetch<T>(api: any FlomniChat.URLGenerator, method: FlomniChat.HTTPMethod, request: T, completionQueue: Dispatch.DispatchQueue, completionHandler: @escaping (FlomniChat.APIResponse<T.ResponseDataType?>) -> Swift.Void) -> Foundation.URLSessionTask? where T : FlomniChat.APIRequest
  #else
  @discardableResult
  func fetch<T>(api: any FlomniChat.URLGenerator, method: FlomniChat.HTTPMethod, request: T, completionQueue: Dispatch.DispatchQueue, completionHandler: @escaping (FlomniChat.APIResponse<T.ResponseDataType?>) -> Swift.Void) -> Foundation.URLSessionTask? where T : FlomniChat.APIRequest
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func fetch<T>(api: any FlomniChat.URLGenerator, method: FlomniChat.HTTPMethod, request: T) async throws -> T.ResponseDataType? where T : FlomniChat.APIRequest
  #else
  func fetch<T>(api: any FlomniChat.URLGenerator, method: FlomniChat.HTTPMethod, request: T) async throws -> T.ResponseDataType? where T : FlomniChat.APIRequest
  #endif
}
extension FlomniChat.NetworkClient {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @discardableResult
  public func fetch<T>(api: any FlomniChat.URLGenerator, method: FlomniChat.HTTPMethod, request: T = DefaultRequest(), completionQueue: Dispatch.DispatchQueue = DispatchQueue.main, completionHandler: @escaping (FlomniChat.APIResponse<T.ResponseDataType?>) -> Swift.Void) -> Foundation.URLSessionTask? where T : FlomniChat.APIRequest
  #else
  @discardableResult
  public func fetch<T>(api: any FlomniChat.URLGenerator, method: FlomniChat.HTTPMethod, request: T = DefaultRequest(), completionQueue: Dispatch.DispatchQueue = DispatchQueue.main, completionHandler: @escaping (FlomniChat.APIResponse<T.ResponseDataType?>) -> Swift.Void) -> Foundation.URLSessionTask? where T : FlomniChat.APIRequest
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func fetch<T>(api: any FlomniChat.URLGenerator, method: FlomniChat.HTTPMethod, request: T = DefaultRequest()) async throws -> T.ResponseDataType? where T : FlomniChat.APIRequest
  #else
  public func fetch<T>(api: any FlomniChat.URLGenerator, method: FlomniChat.HTTPMethod, request: T = DefaultRequest()) async throws -> T.ResponseDataType? where T : FlomniChat.APIRequest
  #endif
}
extension FlomniChat.NetworkClient {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @discardableResult
  public func fetch<T>(api: FlomniChat.PlainURL, method: FlomniChat.HTTPMethod, request: T = DefaultRequest(), completionQueue: Dispatch.DispatchQueue = DispatchQueue.main, completionHandler: @escaping (FlomniChat.APIResponse<T.ResponseDataType?>) -> Swift.Void) -> Foundation.URLSessionTask? where T : FlomniChat.APIRequest
  #else
  @discardableResult
  public func fetch<T>(api: FlomniChat.PlainURL, method: FlomniChat.HTTPMethod, request: T = DefaultRequest(), completionQueue: Dispatch.DispatchQueue = DispatchQueue.main, completionHandler: @escaping (FlomniChat.APIResponse<T.ResponseDataType?>) -> Swift.Void) -> Foundation.URLSessionTask? where T : FlomniChat.APIRequest
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func fetch<T>(api: FlomniChat.PlainURL, method: FlomniChat.HTTPMethod, request: T = DefaultRequest()) async throws -> T.ResponseDataType? where T : FlomniChat.APIRequest
  #else
  public func fetch<T>(api: FlomniChat.PlainURL, method: FlomniChat.HTTPMethod, request: T = DefaultRequest()) async throws -> T.ResponseDataType? where T : FlomniChat.APIRequest
  #endif
}
public protocol SyncTokenProvider {
  #if compiler(>=5.3) && $NoncopyableGenerics
  func requestToken(completionQueue: Dispatch.DispatchQueue, completion: @escaping (Swift.Result<Swift.String?, FlomniChat.TokenManagerError>) -> Swift.Void)
  #else
  func requestToken(completionQueue: Dispatch.DispatchQueue, completion: @escaping (Swift.Result<Swift.String?, FlomniChat.TokenManagerError>) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func requestRefreshToken() -> Swift.String?
  #else
  func requestRefreshToken() -> Swift.String?
  #endif
  func requestBodyData() -> [Swift.String : Any]
  #if compiler(>=5.3) && $NoncopyableGenerics
  func updateToken(newToken: Swift.String, completionQueue: Dispatch.DispatchQueue, completion: @escaping (Swift.Result<Swift.String?, FlomniChat.TokenManagerError>) -> Swift.Void)
  #else
  func updateToken(newToken: Swift.String, completionQueue: Dispatch.DispatchQueue, completion: @escaping (Swift.Result<Swift.String?, FlomniChat.TokenManagerError>) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func updateToken(data: Foundation.Data?, completionQueue: Dispatch.DispatchQueue, completion: @escaping (Swift.Result<Swift.String?, FlomniChat.TokenManagerError>) -> Swift.Void)
  #else
  func updateToken(data: Foundation.Data?, completionQueue: Dispatch.DispatchQueue, completion: @escaping (Swift.Result<Swift.String?, FlomniChat.TokenManagerError>) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func setData(clientSecret: Swift.String, clientID: Swift.String, refreshToken: Swift.String?, token: Swift.String?)
  #else
  func setData(clientSecret: Swift.String, clientID: Swift.String, refreshToken: Swift.String?, token: Swift.String?)
  #endif
  var refreshTokenAPI: any FlomniChat.URLGenerator { get }
  var headers: [Swift.String : Swift.String] { get }
}
public protocol TokenProvider {
  #if compiler(>=5.3) && $NoncopyableGenerics
  func requestToken() async throws -> Swift.String?
  #else
  func requestToken() async throws -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func requestRefreshToken() async throws -> Swift.String?
  #else
  func requestRefreshToken() async throws -> Swift.String?
  #endif
  func requestBodyData() async throws -> [Swift.String : Any]
  #if compiler(>=5.3) && $NoncopyableGenerics
  func setData(clientSecret: Swift.String, clientID: Swift.String, refreshToken: Swift.String?, token: Swift.String?) async
  #else
  func setData(clientSecret: Swift.String, clientID: Swift.String, refreshToken: Swift.String?, token: Swift.String?) async
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func updateToken(_ data: Foundation.Data?) async
  #else
  func updateToken(_ data: Foundation.Data?) async
  #endif
  var refreshTokenAPI: any FlomniChat.URLGenerator { get async }
  var headers: [Swift.String : Swift.String] { get async }
}
public protocol URLGenerator {
  #if compiler(>=5.3) && $NoncopyableGenerics
  var url: Foundation.URL? { get }
  #else
  var url: Foundation.URL? { get }
  #endif
}
public struct PlainURL : FlomniChat.URLGenerator {
  public var url: Foundation.URL?
}
public enum APIError : Swift.Equatable, Swift.Error {
  case network(errorMessage: Swift.String)
  case noData
  case parseResponse(errorMessage: Swift.String)
  case request
  case httpError(FlomniChat.HTTPError)
  case invalidResponse(Foundation.Data?, Foundation.URLResponse?)
  case refreshToken
  case unknown
  public static func == (a: FlomniChat.APIError, b: FlomniChat.APIError) -> Swift.Bool
}
public enum HTTPError : Swift.Error {
  case badRequest
  case unauthorized
  case forbidden
  case notFound
  case serverError
  case unknown
  public static func == (a: FlomniChat.HTTPError, b: FlomniChat.HTTPError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum APIResponse<T> {
  case success(T?)
  case failure(FlomniChat.APIError)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var result: Swift.Result<T?, FlomniChat.APIError> {
    get
  }
  #else
  public var result: Swift.Result<T?, FlomniChat.APIError> {
    get
  }
  #endif
}
public struct Response<T> {
  public let value: T
  public let response: Foundation.URLResponse
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var statusCode: Swift.Int? {
    get
  }
  #else
  public var statusCode: Swift.Int? {
    get
  }
  #endif
  public let data: Foundation.Data
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var originalRequest: Foundation.URLRequest? {
    get
  }
  #else
  public var originalRequest: Foundation.URLRequest? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var currentRequest: Foundation.URLRequest? {
    get
  }
  #else
  public var currentRequest: Foundation.URLRequest? {
    get
  }
  #endif
  public let task: Foundation.URLSessionTask
  public let metrics: Foundation.URLSessionTaskMetrics?
  public func map<U>(_ closure: (T) throws -> U) rethrows -> FlomniChat.Response<U>
}
extension FlomniChat.Response where T == Foundation.URL {
  public var location: Foundation.URL {
    get
  }
}
extension FlomniChat.Response : @unchecked Swift.Sendable where T : Swift.Sendable {
}
public struct BasicRequest<T> : FlomniChat.APIRequest where T : Swift.Decodable {
  public typealias ResponseDataType = T
  public init()
  public func parseResponse(data: Foundation.Data) throws -> FlomniChat.BasicRequest<T>.ResponseDataType
}
public struct DefaultRequest : FlomniChat.APIRequest {
  public init()
  public typealias ResponseDataType = Foundation.Data
}

public enum TokenManagerError : Swift.Error {
  case notSet
  case refreshNeeded
  public static func == (a: FlomniChat.TokenManagerError, b: FlomniChat.TokenManagerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Contour : Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
  public init(rawValue: Swift.String)
  public static var allCases: [FlomniChat.Contour]
  public typealias RawValue = Swift.String
  case production
  case development
  case some(Foundation.URL)
  public var rawValue: Swift.String {
    get
  }
  public var baseURL: FlomniChat.BaseURL {
    get
  }
  public typealias AllCases = [FlomniChat.Contour]
}
extension FlomniChat.Contour : Swift.CustomStringConvertible, FlomniChat.EnvironmentStorable {
  public var description: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(_ description: Swift.String)
  #else
  public init?(_ description: Swift.String)
  #endif
}
public struct BaseURL : Swift.CustomStringConvertible, FlomniChat.EnvironmentStorable {
  public static let development: FlomniChat.BaseURL
  public static let production: FlomniChat.BaseURL
  public var description: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(_ urlString: Swift.String)
  #else
  public init?(_ urlString: Swift.String)
  #endif
  public init(type: FlomniChat.Contour)
  public init(url: Foundation.URL)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case baseHost
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init?(rawValue: Swift.String)
    #else
    public init?(rawValue: Swift.String)
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init?(stringValue: Swift.String)
    #else
    public init?(stringValue: Swift.String)
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init?(intValue: Swift.Int)
    #else
    public init?(intValue: Swift.Int)
    #endif
    public typealias RawValue = Swift.String
    #if compiler(>=5.3) && $NoncopyableGenerics
    public var intValue: Swift.Int? {
      get
    }
    #else
    public var intValue: Swift.Int? {
      get
    }
    #endif
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (a: FlomniChat.BaseURL, b: FlomniChat.BaseURL) -> Swift.Bool
}
final public class NetworkService : @unchecked Swift.Sendable, FlomniChat.NetworkClient {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(urlSession: Foundation.URLSession = .shared, tokenManager: (any FlomniChat.TokenProvider)? = nil, syncTokenManager: (any FlomniChat.SyncTokenProvider)? = nil)
  #else
  public init(urlSession: Foundation.URLSession = .shared, tokenManager: (any FlomniChat.TokenProvider)? = nil, syncTokenManager: (any FlomniChat.SyncTokenProvider)? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  final public func fetch<T>(api: any FlomniChat.URLGenerator, method: FlomniChat.HTTPMethod, request: T) async throws -> T.ResponseDataType? where T : FlomniChat.APIRequest
  #else
  final public func fetch<T>(api: any FlomniChat.URLGenerator, method: FlomniChat.HTTPMethod, request: T) async throws -> T.ResponseDataType? where T : FlomniChat.APIRequest
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @discardableResult
  final public func fetch<T>(api: any FlomniChat.URLGenerator, method: FlomniChat.HTTPMethod, request: T, completionQueue: Dispatch.DispatchQueue, completionHandler: @escaping (FlomniChat.APIResponse<T.ResponseDataType?>) -> Swift.Void) -> Foundation.URLSessionTask? where T : FlomniChat.APIRequest
  #else
  @discardableResult
  final public func fetch<T>(api: any FlomniChat.URLGenerator, method: FlomniChat.HTTPMethod, request: T, completionQueue: Dispatch.DispatchQueue, completionHandler: @escaping (FlomniChat.APIResponse<T.ResponseDataType?>) -> Swift.Void) -> Foundation.URLSessionTask? where T : FlomniChat.APIRequest
  #endif
  @objc deinit
}
extension Swift.Bool {
  @inlinable internal mutating func callAsFunction() {
        self = true
    }
}
extension Swift.RandomAccessCollection where Self.Element : Swift.Identifiable {
  public static func == (lhs: Self, rhs: Self) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class SocketQuery : Swift.Codable, Swift.Equatable, Swift.Hashable {
  final public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: FlomniChat.SocketQuery, rhs: FlomniChat.SocketQuery) -> Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  final public func httpQuery() -> [Swift.String : Swift.String]
  final public func urlQuery() -> [Foundation.URLQueryItem]
  @objc deinit
  final public var hashValue: Swift.Int {
    get
  }
}
public enum FlomniServerEvent : Swift.String, Swift.Codable, Swift.Hashable, Swift.CaseIterable {
  case connect, reconnect, message, error, event, modifyOrDelete, setup, info, ping, pong, disconnect
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.String)
  #else
  public init?(rawValue: Swift.String)
  #endif
  public typealias AllCases = [FlomniChat.FlomniServerEvent]
  public typealias RawValue = Swift.String
  public static var allCases: [FlomniChat.FlomniServerEvent] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension FlomniChat.SocketIOClient : @unchecked Swift.Sendable {
}
public typealias Sessions = [FlomniChat.Session]
public typealias SessionID = FlomniChat.Session.SessionID
public struct Session : Swift.Identifiable, Swift.Codable, Swift.Hashable {
  public typealias SessionID = FlomniChat.Session.ID
  public static let productThread: FlomniChat.Session
  public var id: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: FlomniChat.Session, b: FlomniChat.Session) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
public struct ChannelTheme : Swift.Codable, Swift.Hashable, Swift.Sendable {
  public init(from decoder: any Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
extension FlomniChat.ChannelTheme : Swift.Equatable {
  public static let `default`: FlomniChat.ChannelTheme
  public static func == (lhs: FlomniChat.ChannelTheme, rhs: FlomniChat.ChannelTheme) -> Swift.Bool
}
public typealias ChatThreads = [FlomniChat.ChatThread]
extension FlomniChat.ChatThread {
  public static let productThread: FlomniChat.ChatThread
}
public typealias ChatThreadID = FlomniChat.ChatThread.ID
public struct ChatThread : Swift.Codable, Swift.Hashable, Swift.Identifiable {
  public let id: Swift.String
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: FlomniChat.ChatThread, b: FlomniChat.ChatThread) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
public struct WidgetConfig : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ChannelServerData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.String : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
}
extension Swift.String {
  public var id: Swift.String {
    get
  }
}
public struct LoadHistory : @unchecked Swift.Sendable {
  public var sessionId: Swift.String
  public var offset: Swift.Int
  public var id: Swift.String {
    get
  }
  public init(sessionId: Swift.String, offset: Swift.Int)
  public func socketRepresentation() throws -> any FlomniChat.SocketData
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: FlomniChat.LoadHistory, b: FlomniChat.LoadHistory) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
open class ChatEvent {
  public var id: Swift.String
  public var type: FlomniChat.SEvent
  public static func == (lhs: FlomniChat.ChatEvent, rhs: FlomniChat.ChatEvent) -> Swift.Bool
  public init(type: FlomniChat.SEvent, id: Swift.String)
  open func hash(into hasher: inout Swift.Hasher)
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
  @objc deinit
  open var hashValue: Swift.Int {
    get
  }
}
public enum SEvent : Swift.RawRepresentable, FlomniChat.SocketData, Swift.Identifiable, Swift.CaseIterable, Swift.Codable, Swift.Hashable, Swift.Sendable {
  public typealias DataType = FlomniChat.ChatEvent
  public var id: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public static var prodEvents: [FlomniChat.SEvent]
  public static var allCases: [FlomniChat.SEvent]
  public typealias RawValue = Swift.String
  case rate
  case typing
  case typedContent
  case typingFinished
  case agentConnected
  case agentDisconnected
  case messageAccepted
  case conversationStarted
  case conversationProceeding
  case conversationEnded
  case gtmEvent, gaEvent
  case openLinker
  case form
  case postback
  case read
  case block
  case debug
  case modifyOrDelete
  case loadHistory
  case some(Swift.String)
  public var rawValue: FlomniChat.SEvent.RawValue {
    get
  }
  public var description: SwiftUICore.Text {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public typealias AllCases = [FlomniChat.SEvent]
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
}
public struct CoreMessage : FlomniChat.SocketData, @unchecked Swift.Sendable, Swift.Identifiable, Swift.Codable, Swift.Hashable, Swift.Equatable {
  public var id: Swift.String {
    get
  }
  public typealias DataType = FlomniChat.CoreMessage
  public func hash(into hasher: inout Swift.Hasher)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: FlomniChat.CoreMessage, rhs: FlomniChat.CoreMessage) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
extension FlomniChat.CoreMessage {
  public static let postback: FlomniChat.CoreMessage
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func transfer(id: Swift.String?) -> FlomniChat.CoreMessage
  #else
  public static func transfer(id: Swift.String?) -> FlomniChat.CoreMessage
  #endif
  public func socketRepresentation() throws -> any FlomniChat.SocketData
}
public struct DraftMessage : @unchecked Swift.Sendable, Swift.Encodable, Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: FlomniChat.DraftMessage, b: FlomniChat.DraftMessage) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
public struct ButtonInfo : Swift.Sendable {
  public var type: FlomniChat.ButtonInfo.RawType?
  public var value: Swift.String
  public var caption: Swift.String?
  public var urlTarget: Swift.String?
  public var conditions: [Swift.String]?
  public enum RawType : Swift.Sendable, Swift.RawRepresentable, Swift.Codable {
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init?(rawValue: Swift.String)
    #else
    public init?(rawValue: Swift.String)
    #endif
    case url
    case template
    case some(Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias RawValue = Swift.String
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(type: Swift.String? = nil, value: Swift.String? = nil, caption: Swift.String? = nil, urlTarget: Swift.String? = nil, conditions: [Swift.String]? = nil)
  #else
  public init(type: Swift.String? = nil, value: Swift.String? = nil, caption: Swift.String? = nil, urlTarget: Swift.String? = nil, conditions: [Swift.String]? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(type: FlomniChat.ButtonInfo.RawType? = nil, value: Swift.String? = nil, caption: Swift.String? = nil, urlTarget: Swift.String? = nil, conditions: [Swift.String]? = nil)
  #else
  public init(type: FlomniChat.ButtonInfo.RawType? = nil, value: Swift.String? = nil, caption: Swift.String? = nil, urlTarget: Swift.String? = nil, conditions: [Swift.String]? = nil)
  #endif
}
extension FlomniChat.ButtonInfo : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension FlomniChat.ButtonInfo : Swift.Hashable, Swift.Equatable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: FlomniChat.ButtonInfo, rhs: FlomniChat.ButtonInfo) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SocketLogger : AnyObject {
  var log: Swift.Bool { get set }
  func log(_ message: @autoclosure () -> Swift.String, type: Swift.String)
  func error(_ message: @autoclosure () -> Swift.String, type: Swift.String)
}
extension FlomniChat.SocketLogger {
  public func log(_ message: @autoclosure () -> Swift.String, type: Swift.String)
  public func error(_ message: @autoclosure () -> Swift.String, type: Swift.String)
}
public protocol SocketData {
  func socketRepresentation() throws -> any FlomniChat.SocketData
}
extension FlomniChat.SocketData {
  public func socketRepresentation() -> any FlomniChat.SocketData
}
extension Swift.Array : FlomniChat.SocketData {
}
extension Swift.Bool : FlomniChat.SocketData {
}
extension Swift.Dictionary : FlomniChat.SocketData {
}
extension Swift.Double : FlomniChat.SocketData {
}
extension Swift.Int : FlomniChat.SocketData {
}
extension Foundation.NSArray : FlomniChat.SocketData {
}
extension Foundation.Data : FlomniChat.SocketData {
}
extension Foundation.NSData : FlomniChat.SocketData {
}
extension Foundation.NSDictionary : FlomniChat.SocketData {
}
extension Foundation.NSString : FlomniChat.SocketData {
}
extension Foundation.NSNull : FlomniChat.SocketData {
}
extension Swift.String : FlomniChat.SocketData {
}
public typealias AckCallback = ([Any]) -> ()
public typealias NormalCallback = ([Any], FlomniChat.SocketAckEmitter) -> ()
public typealias Post = (msg: Swift.String, completion: (() -> ())?)
public protocol SocketParsable : AnyObject {
  #if compiler(>=5.3) && $NoncopyableGenerics
  func parseBinaryData(_ data: Foundation.Data) -> FlomniChat.SocketPacket?
  #else
  func parseBinaryData(_ data: Foundation.Data) -> FlomniChat.SocketPacket?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func parseSocketMessage(_ message: Swift.String) -> FlomniChat.SocketPacket?
  #else
  func parseSocketMessage(_ message: Swift.String) -> FlomniChat.SocketPacket?
  #endif
}
public enum SocketParsableError : Swift.Error {
  case invalidDataArray
  case invalidPacket
  case invalidPacketType
  public static func == (a: FlomniChat.SocketParsableError, b: FlomniChat.SocketParsableError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SocketDataBufferable : AnyObject {
  var waitingPackets: [FlomniChat.SocketPacket] { get set }
}
extension FlomniChat.SocketParsable where Self : FlomniChat.SocketDataBufferable, Self : FlomniChat.SocketManagerSpec {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func parseSocketMessage(_ message: Swift.String) -> FlomniChat.SocketPacket?
  #else
  public func parseSocketMessage(_ message: Swift.String) -> FlomniChat.SocketPacket?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func parseBinaryData(_ data: Foundation.Data) -> FlomniChat.SocketPacket?
  #else
  public func parseBinaryData(_ data: Foundation.Data) -> FlomniChat.SocketPacket?
  #endif
}
public struct SocketPacket : Swift.CustomStringConvertible {
  public let nsp: Swift.String
  public let id: Swift.Int
  public let type: FlomniChat.SocketPacket.PacketType
  public var binary: [Foundation.Data] {
    get
  }
  public var data: [Any] {
    get
  }
  public var args: [Any] {
    get
  }
  public var description: Swift.String {
    get
  }
  public var event: Swift.String {
    get
  }
  public var packetString: Swift.String {
    get
  }
}
extension FlomniChat.SocketPacket {
  public enum PacketType : Swift.Int {
    case connect
    case disconnect
    case event
    case ack
    case error
    case binaryEvent
    case binaryAck
    public var isBinary: Swift.Bool {
      get
    }
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init?(rawValue: Swift.Int)
    #else
    public init?(rawValue: Swift.Int)
    #endif
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
public protocol SocketManagerSpec : FlomniChat.SocketEngineClient {
  var defaultSocket: FlomniChat.SocketIOClient { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  var engine: (any FlomniChat.SocketEngineSpec)? { get set }
  #else
  var engine: (any FlomniChat.SocketEngineSpec)? { get set }
  #endif
  var forceNew: Swift.Bool { get set }
  var handleQueue: Dispatch.DispatchQueue { get set }
  var nsps: [Swift.String : FlomniChat.SocketIOClient] { get set }
  var reconnects: Swift.Bool { get set }
  var reconnectWait: Swift.Int { get set }
  var reconnectWaitMax: Swift.Int { get set }
  var randomizationFactor: Swift.Double { get set }
  var socketURL: Foundation.URL { get }
  var status: FlomniChat.SocketIOStatus { get }
  var version: FlomniChat.SocketIOVersion { get }
  func connect()
  #if compiler(>=5.3) && $NoncopyableGenerics
  func connectSocket(_ socket: FlomniChat.SocketIOClient, withPayload: [Swift.String : Any]?)
  #else
  func connectSocket(_ socket: FlomniChat.SocketIOClient, withPayload: [Swift.String : Any]?)
  #endif
  func didDisconnect(reason: Swift.String)
  func disconnect()
  func disconnectSocket(_ socket: FlomniChat.SocketIOClient)
  func disconnectSocket(forNamespace nsp: Swift.String)
  func emitAll(_ event: Swift.String, _ items: any FlomniChat.SocketData...)
  func reconnect()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @discardableResult
  func removeSocket(_ socket: FlomniChat.SocketIOClient) -> FlomniChat.SocketIOClient?
  #else
  @discardableResult
  func removeSocket(_ socket: FlomniChat.SocketIOClient) -> FlomniChat.SocketIOClient?
  #endif
  func socket(forNamespace nsp: Swift.String) -> FlomniChat.SocketIOClient
}
@objc open class SocketManager : ObjectiveC.NSObject, FlomniChat.SocketManagerSpec, FlomniChat.SocketParsable, FlomniChat.SocketDataBufferable, FlomniChat.ConfigSettable {
  public var defaultSocket: FlomniChat.SocketIOClient {
    get
  }
  final public let socketURL: Foundation.URL
  public var config: FlomniChat.SocketIOClientConfiguration {
    get
    set
  }
  public var engine: (any FlomniChat.SocketEngineSpec)?
  public var forceNew: Swift.Bool
  public var handleQueue: Dispatch.DispatchQueue
  public var nsps: [Swift.String : FlomniChat.SocketIOClient]
  public var reconnects: Swift.Bool
  public var reconnectWait: Swift.Int
  public var reconnectWaitMax: Swift.Int
  public var randomizationFactor: Swift.Double
  public var status: FlomniChat.SocketIOStatus {
    get
  }
  public var version: FlomniChat.SocketIOVersion {
    get
  }
  public var waitingPackets: [FlomniChat.SocketPacket]
  public init(socketURL: Foundation.URL, config: FlomniChat.SocketIOClientConfiguration = [])
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc convenience public init(socketURL: Foundation.URL, config: [Swift.String : Any]?)
  #else
  @objc convenience public init(socketURL: Foundation.URL, config: [Swift.String : Any]?)
  #endif
  @objc deinit
  open func connect()
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func connectSocket(_ socket: FlomniChat.SocketIOClient, withPayload payload: [Swift.String : Any]? = nil)
  #else
  open func connectSocket(_ socket: FlomniChat.SocketIOClient, withPayload payload: [Swift.String : Any]? = nil)
  #endif
  open func didDisconnect(reason: Swift.String)
  open func disconnect()
  open func disconnectSocket(_ socket: FlomniChat.SocketIOClient)
  open func disconnectSocket(forNamespace nsp: Swift.String)
  open func emitAll(clientEvent event: FlomniChat.SocketClientEvent, data: [Any])
  open func emitAll(_ event: Swift.String, _ items: any FlomniChat.SocketData...)
  @objc open func engineDidClose(reason: Swift.String)
  @objc open func engineDidError(reason: Swift.String)
  @objc open func engineDidOpen(reason: Swift.String)
  @objc open func engineDidReceivePing()
  @objc open func engineDidSendPing()
  @objc open func engineDidReceivePong()
  @objc open func engineDidSendPong()
  @objc open func engineDidWebsocketUpgrade(headers: [Swift.String : Swift.String])
  @objc open func parseEngineMessage(_ msg: Swift.String)
  @objc open func parseEngineBinaryData(_ data: Foundation.Data)
  open func reconnect()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @discardableResult
  open func removeSocket(_ socket: FlomniChat.SocketIOClient) -> FlomniChat.SocketIOClient?
  #else
  @discardableResult
  open func removeSocket(_ socket: FlomniChat.SocketIOClient) -> FlomniChat.SocketIOClient?
  #endif
  open func setConfigs(_ config: FlomniChat.SocketIOClientConfiguration)
  open func socket(forNamespace nsp: Swift.String) -> FlomniChat.SocketIOClient
}
public enum ConnectionState {
  case connected
  case waiting
  case cancelled
  case failed((any Swift.Error)?)
  case viability(Swift.Bool)
  case shouldReconnect(Swift.Bool)
  case receive(Foundation.Data)
  case peerClosed
}
public protocol TransportEventClient : AnyObject {
  func connectionChanged(state: FlomniChat.ConnectionState)
}
public protocol Transport : AnyObject {
  func register(delegate: any FlomniChat.TransportEventClient)
  #if compiler(>=5.3) && $NoncopyableGenerics
  func connect(url: Foundation.URL, timeout: Swift.Double, certificatePinning: (any FlomniChat.CertificatePinning)?)
  #else
  func connect(url: Foundation.URL, timeout: Swift.Double, certificatePinning: (any FlomniChat.CertificatePinning)?)
  #endif
  func disconnect()
  #if compiler(>=5.3) && $NoncopyableGenerics
  func write(data: Foundation.Data, completion: @escaping (((any Swift.Error)?) -> ()))
  #else
  func write(data: Foundation.Data, completion: @escaping (((any Swift.Error)?) -> ()))
  #endif
  var usingTLS: Swift.Bool { get }
}
public enum FoundationTransportError : Swift.Error {
  case invalidRequest
  case invalidOutputStream
  case timeout
  public static func == (a: FlomniChat.FoundationTransportError, b: FlomniChat.FoundationTransportError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class FoundationTransport : ObjectiveC.NSObject, FlomniChat.Transport, Foundation.StreamDelegate {
  public var usingTLS: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(streamConfiguration: ((Foundation.InputStream, Foundation.OutputStream) -> Swift.Void)? = nil)
  #else
  public init(streamConfiguration: ((Foundation.InputStream, Foundation.OutputStream) -> Swift.Void)? = nil)
  #endif
  @objc deinit
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func connect(url: Foundation.URL, timeout: Swift.Double = 10, certificatePinning: (any FlomniChat.CertificatePinning)? = nil)
  #else
  public func connect(url: Foundation.URL, timeout: Swift.Double = 10, certificatePinning: (any FlomniChat.CertificatePinning)? = nil)
  #endif
  public func disconnect()
  public func register(delegate: any FlomniChat.TransportEventClient)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func write(data: Foundation.Data, completion: @escaping (((any Swift.Error)?) -> Swift.Void))
  #else
  public func write(data: Foundation.Data, completion: @escaping (((any Swift.Error)?) -> Swift.Void))
  #endif
  @objc open func stream(_ aStream: Foundation.Stream, handle eventCode: Foundation.Stream.Event)
}
public enum TCPTransportError : Swift.Error {
  case invalidRequest
  public static func == (a: FlomniChat.TCPTransportError, b: FlomniChat.TCPTransportError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public class TCPTransport : FlomniChat.Transport {
  @objc deinit
  public var usingTLS: Swift.Bool {
    get
  }
  public init(connection: Network.NWConnection)
  public init()
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func connect(url: Foundation.URL, timeout: Swift.Double = 10, certificatePinning: (any FlomniChat.CertificatePinning)? = nil)
  #else
  public func connect(url: Foundation.URL, timeout: Swift.Double = 10, certificatePinning: (any FlomniChat.CertificatePinning)? = nil)
  #endif
  public func disconnect()
  public func register(delegate: any FlomniChat.TransportEventClient)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func write(data: Foundation.Data, completion: @escaping (((any Swift.Error)?) -> ()))
  #else
  public func write(data: Foundation.Data, completion: @escaping (((any Swift.Error)?) -> ()))
  #endif
}
public enum SecurityErrorCode : Swift.UInt16 {
  case acceptFailed
  case pinningFailed
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.UInt16)
  #else
  public init?(rawValue: Swift.UInt16)
  #endif
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
public enum PinningState {
  case success
  case failed(CoreFoundation.CFError?)
}
public protocol CertificatePinning : AnyObject {
  #if compiler(>=5.3) && $NoncopyableGenerics
  func evaluateTrust(trust: Security.SecTrust, domain: Swift.String?, completion: ((FlomniChat.PinningState) -> ()))
  #else
  func evaluateTrust(trust: Security.SecTrust, domain: Swift.String?, completion: ((FlomniChat.PinningState) -> ()))
  #endif
}
public protocol HeaderValidator : AnyObject {
  #if compiler(>=5.3) && $NoncopyableGenerics
  func validate(headers: [Swift.String : Swift.String], key: Swift.String) -> (any Swift.Error)?
  #else
  func validate(headers: [Swift.String : Swift.String], key: Swift.String) -> (any Swift.Error)?
  #endif
}
public enum FoundationSecurityError : Swift.Error {
  case invalidRequest
  public static func == (a: FlomniChat.FoundationSecurityError, b: FlomniChat.FoundationSecurityError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class FoundationSecurity {
  public init(allowSelfSigned: Swift.Bool = false)
  @objc deinit
}
extension FlomniChat.FoundationSecurity : FlomniChat.CertificatePinning {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func evaluateTrust(trust: Security.SecTrust, domain: Swift.String?, completion: ((FlomniChat.PinningState) -> ()))
  #else
  public func evaluateTrust(trust: Security.SecTrust, domain: Swift.String?, completion: ((FlomniChat.PinningState) -> ()))
  #endif
}
extension FlomniChat.FoundationSecurity : FlomniChat.HeaderValidator {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func validate(headers: [Swift.String : Swift.String], key: Swift.String) -> (any Swift.Error)?
  #else
  public func validate(headers: [Swift.String : Swift.String], key: Swift.String) -> (any Swift.Error)?
  #endif
}
public enum ConnectionEvent {
  case connected([Swift.String : Swift.String])
  case disconnected(Swift.String, Swift.UInt16)
  case text(Swift.String)
  case binary(Foundation.Data)
  case pong(Foundation.Data?)
  case ping(Foundation.Data?)
  case error(any Swift.Error)
}
public protocol Connection {
  func write(data: Foundation.Data, opcode: FlomniChat.FrameOpCode)
}
public protocol ConnectionDelegate : AnyObject {
  func didReceive(event: FlomniChat.ServerEvent)
}
public enum ServerEvent {
  case connected(any FlomniChat.Connection, [Swift.String : Swift.String])
  case disconnected(any FlomniChat.Connection, Swift.String, Swift.UInt16)
  case text(any FlomniChat.Connection, Swift.String)
  case binary(any FlomniChat.Connection, Foundation.Data)
  case pong(any FlomniChat.Connection, Foundation.Data?)
  case ping(any FlomniChat.Connection, Foundation.Data?)
}
public protocol Server {
  #if compiler(>=5.3) && $NoncopyableGenerics
  func start(address: Swift.String, port: Swift.UInt16) -> (any Swift.Error)?
  #else
  func start(address: Swift.String, port: Swift.UInt16) -> (any Swift.Error)?
  #endif
}
@available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
@available(watchOS, unavailable)
public class WebSocketServer : FlomniChat.Server, FlomniChat.ConnectionDelegate {
  public var onEvent: ((FlomniChat.ServerEvent) -> Swift.Void)?
  public init()
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func start(address: Swift.String, port: Swift.UInt16) -> (any Swift.Error)?
  #else
  public func start(address: Swift.String, port: Swift.UInt16) -> (any Swift.Error)?
  #endif
  public func didReceive(event: FlomniChat.ServerEvent)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public class ServerConnection : FlomniChat.Connection, FlomniChat.HTTPServerDelegate, FlomniChat.FramerEventClient, FlomniChat.FrameCollectorDelegate, FlomniChat.TransportEventClient {
  public var onEvent: ((FlomniChat.ConnectionEvent) -> Swift.Void)?
  weak public var delegate: (any FlomniChat.ConnectionDelegate)?
  public func write(data: Foundation.Data, opcode: FlomniChat.FrameOpCode)
  public func connectionChanged(state: FlomniChat.ConnectionState)
  public func didReceive(event: FlomniChat.HTTPEvent)
  public func frameProcessed(event: FlomniChat.FrameEvent)
  public func didForm(event: FlomniChat.FrameCollector.Event)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func decompress(data _: Foundation.Data, isFinal _: Swift.Bool) -> Foundation.Data?
  #else
  public func decompress(data _: Foundation.Data, isFinal _: Swift.Bool) -> Foundation.Data?
  #endif
  @objc deinit
}
public class FoundationHTTPHandler : FlomniChat.HTTPHandler {
  public init()
  public func convert(request: Foundation.URLRequest) throws -> Foundation.Data
  public func parse(data: Foundation.Data) -> Swift.Int
  public func register(delegate: any FlomniChat.HTTPHandlerDelegate)
  @objc deinit
}
public enum HTTPUpgradeError : Swift.Error {
  case notAnUpgrade(Swift.Int, [Swift.String : Swift.String])
  case invalidData
}
public struct HTTPWSHeader {
  public static func createUpgrade(request: Foundation.URLRequest, supportsCompression: Swift.Bool, secKeyValue: Swift.String) -> Foundation.URLRequest
  public static func generateWebSocketKey() -> Swift.String
}
public enum HTTPEvent {
  case success([Swift.String : Swift.String])
  case failure(any Swift.Error)
}
public protocol HTTPHandlerDelegate : AnyObject {
  func didReceiveHTTP(event: FlomniChat.HTTPEvent)
}
public protocol HTTPHandler {
  func register(delegate: any FlomniChat.HTTPHandlerDelegate)
  func convert(request: Foundation.URLRequest) throws -> Foundation.Data
  func parse(data: Foundation.Data) -> Swift.Int
}
public protocol HTTPServerDelegate : AnyObject {
  func didReceive(event: FlomniChat.HTTPEvent)
}
public protocol HTTPServerHandler {
  func register(delegate: any FlomniChat.HTTPServerDelegate)
  func parse(data: Foundation.Data)
  func createResponse(headers: [Swift.String : Swift.String]) -> Foundation.Data
}
public struct URLParts {
}
extension Foundation.URL {
  public var isTLSScheme: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func getParts() -> FlomniChat.URLParts?
  #else
  public func getParts() -> FlomniChat.URLParts?
  #endif
}
public protocol FrameCollectorDelegate : AnyObject {
  func didForm(event: FlomniChat.FrameCollector.Event)
  #if compiler(>=5.3) && $NoncopyableGenerics
  func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  #else
  func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  #endif
}
@_hasMissingDesignatedInitializers public class FrameCollector {
  public enum Event {
    case text(Swift.String)
    case binary(Foundation.Data)
    case pong(Foundation.Data?)
    case ping(Foundation.Data?)
    case error(any Swift.Error)
    case closed(Swift.String, Swift.UInt16)
  }
  public func add(frame: FlomniChat.Frame)
  @objc deinit
}
public class StringHTTPHandler : FlomniChat.HTTPHandler {
  public init()
  public func convert(request: Foundation.URLRequest) -> Foundation.Data
  public func parse(data: Foundation.Data) -> Swift.Int
  public func register(delegate: any FlomniChat.HTTPHandlerDelegate)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FoundationHTTPServerHandler : FlomniChat.HTTPServerHandler {
  public func register(delegate: any FlomniChat.HTTPServerDelegate)
  public func createResponse(headers: [Swift.String : Swift.String]) -> Foundation.Data
  public func parse(data: Foundation.Data)
  @objc deinit
}
public enum CloseCode : Swift.UInt16 {
  case normal
  case goingAway
  case protocolError
  case protocolUnhandledType
  case noStatusReceived
  case encoding
  case policyViolated
  case messageTooBig
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.UInt16)
  #else
  public init?(rawValue: Swift.UInt16)
  #endif
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
public enum FrameOpCode : Swift.UInt8 {
  case continueFrame
  case textFrame
  case binaryFrame
  case connectionClose
  case ping
  case pong
  case unknown
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.UInt8)
  #else
  public init?(rawValue: Swift.UInt8)
  #endif
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct Frame {
}
public enum FrameEvent {
  case frame(FlomniChat.Frame)
  case error(any Swift.Error)
}
public protocol FramerEventClient : AnyObject {
  func frameProcessed(event: FlomniChat.FrameEvent)
}
public protocol Framer {
  func add(data: Foundation.Data)
  func register(delegate: any FlomniChat.FramerEventClient)
  func createWriteFrame(opcode: FlomniChat.FrameOpCode, payload: Foundation.Data, isCompressed: Swift.Bool) -> Foundation.Data
  func updateCompression(supports: Swift.Bool)
  func supportsCompression() -> Swift.Bool
}
public class WSFramer : FlomniChat.Framer {
  public var compressionEnabled: Swift.Bool
  public init(isServer: Swift.Bool = false)
  public func updateCompression(supports: Swift.Bool)
  public func supportsCompression() -> Swift.Bool
  public func add(data: Foundation.Data)
  public func register(delegate: any FlomniChat.FramerEventClient)
  public func createWriteFrame(opcode: FlomniChat.FrameOpCode, payload: Foundation.Data, isCompressed: Swift.Bool) -> Foundation.Data
  @objc deinit
}
public protocol MyWSArrayType {
}
extension Swift.UInt8 : FlomniChat.MyWSArrayType {
}
extension Swift.Array where Element : FlomniChat.MyWSArrayType, Element : Swift.UnsignedInteger {
  public func readUint16(offset: Swift.Int) -> Swift.UInt16
  public func readUint64(offset: Swift.Int) -> Swift.UInt64
  public func unmaskData(maskStart: Swift.Int, offset: Swift.Int, length: Swift.Int) -> Foundation.Data
}
public func writeUint16(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt16)
public func writeUint32(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt32)
public func writeUint64(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt64)
public actor DataHandler : FlomniChat.NSModelActor {
  nonisolated final public let modelExecutor: FlomniChat.NSModelObjectContextExecutor
  nonisolated final public let modelContainer: CoreData.NSPersistentContainer
  public init(container: CoreData.NSPersistentContainer)
  @discardableResult
  public func newItem<Item>(_ item: Item) throws -> CoreData.NSManagedObjectID where Item : CoreData.NSManagedObject
  public func updateItem<Item>(id: CoreData.NSManagedObjectID, _ item: Item) throws where Item : CoreData.NSManagedObject
  public func deleteItem<Item>(id: CoreData.NSManagedObjectID, _ item: Item.Type) throws where Item : CoreData.NSManagedObject
  @objc deinit
}
public protocol CompressionHandler {
  func load(headers: [Swift.String : Swift.String])
  #if compiler(>=5.3) && $NoncopyableGenerics
  func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  #else
  func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func compress(data: Foundation.Data) -> Foundation.Data?
  #else
  func compress(data: Foundation.Data) -> Foundation.Data?
  #endif
}
public class WSCompression : FlomniChat.CompressionHandler {
  public init()
  public func load(headers: [Swift.String : Swift.String])
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  #else
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func compress(data: Foundation.Data) -> Foundation.Data?
  #else
  public func compress(data: Foundation.Data) -> Foundation.Data?
  #endif
  @objc deinit
}
public enum ErrorType : Swift.Error {
  case compressionError
  case securityError
  case protocolError
  case serverError
  public static func == (a: FlomniChat.ErrorType, b: FlomniChat.ErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct WSError : Swift.Error {
  public let type: FlomniChat.ErrorType
  public let message: Swift.String
  public let code: Swift.UInt16
  public init(type: FlomniChat.ErrorType, message: Swift.String, code: Swift.UInt16)
}
public protocol WebSocketClient : AnyObject {
  func connect()
  func disconnect(closeCode: Swift.UInt16)
  #if compiler(>=5.3) && $NoncopyableGenerics
  func write(string: Swift.String, completion: (() -> ())?)
  #else
  func write(string: Swift.String, completion: (() -> ())?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func write(stringData: Foundation.Data, completion: (() -> ())?)
  #else
  func write(stringData: Foundation.Data, completion: (() -> ())?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func write(data: Foundation.Data, completion: (() -> ())?)
  #else
  func write(data: Foundation.Data, completion: (() -> ())?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func write(ping: Foundation.Data, completion: (() -> ())?)
  #else
  func write(ping: Foundation.Data, completion: (() -> ())?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func write(pong: Foundation.Data, completion: (() -> ())?)
  #else
  func write(pong: Foundation.Data, completion: (() -> ())?)
  #endif
}
extension FlomniChat.WebSocketClient {
  public func write(string: Swift.String)
  public func write(data: Foundation.Data)
  public func write(ping: Foundation.Data)
  public func write(pong: Foundation.Data)
  public func disconnect()
}
public enum WebSocketEvent {
  case connected([Swift.String : Swift.String])
  case disconnected(Swift.String, Swift.UInt16)
  case text(Swift.String)
  case binary(Foundation.Data)
  case pong(Foundation.Data?)
  case ping(Foundation.Data?)
  case error((any Swift.Error)?)
  case viabilityChanged(Swift.Bool)
  case reconnectSuggested(Swift.Bool)
  case cancelled
  case peerClosed
}
public protocol WebSocketDelegate : AnyObject {
  func didReceive(event: FlomniChat.WebSocketEvent, client: any FlomniChat.WebSocketClient)
}
open class WebSocket : FlomniChat.WebSocketClient, FlomniChat.EngineDelegate {
  weak public var delegate: (any FlomniChat.WebSocketDelegate)?
  public var onEvent: ((FlomniChat.WebSocketEvent) -> Swift.Void)?
  public var request: Foundation.URLRequest
  public var callbackQueue: Dispatch.DispatchQueue
  public var respondToPingWithPong: Swift.Bool {
    get
    set
  }
  public init(request: Foundation.URLRequest, engine: any FlomniChat.Engine)
  #if compiler(>=5.3) && $NoncopyableGenerics
  convenience public init(request: Foundation.URLRequest, certPinner: (any FlomniChat.CertificatePinning)? = FoundationSecurity(), compressionHandler: (any FlomniChat.CompressionHandler)? = nil, useCustomEngine: Swift.Bool = true)
  #else
  convenience public init(request: Foundation.URLRequest, certPinner: (any FlomniChat.CertificatePinning)? = FoundationSecurity(), compressionHandler: (any FlomniChat.CompressionHandler)? = nil, useCustomEngine: Swift.Bool = true)
  #endif
  public func connect()
  public func disconnect(closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
  public func forceDisconnect()
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func write(data: Foundation.Data, completion: (() -> ())?)
  #else
  public func write(data: Foundation.Data, completion: (() -> ())?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func write(string: Swift.String, completion: (() -> ())?)
  #else
  public func write(string: Swift.String, completion: (() -> ())?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func write(stringData: Foundation.Data, completion: (() -> ())?)
  #else
  public func write(stringData: Foundation.Data, completion: (() -> ())?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func write(ping: Foundation.Data, completion: (() -> ())?)
  #else
  public func write(ping: Foundation.Data, completion: (() -> ())?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func write(pong: Foundation.Data, completion: (() -> ())?)
  #else
  public func write(pong: Foundation.Data, completion: (() -> ())?)
  #endif
  public func didReceive(event: FlomniChat.WebSocketEvent)
  @objc deinit
}
public protocol EngineDelegate : AnyObject {
  func didReceive(event: FlomniChat.WebSocketEvent)
}
public protocol Engine {
  func register(delegate: any FlomniChat.EngineDelegate)
  func start(request: Foundation.URLRequest)
  func stop(closeCode: Swift.UInt16)
  func forceStop()
  #if compiler(>=5.3) && $NoncopyableGenerics
  func write(data: Foundation.Data, opcode: FlomniChat.FrameOpCode, completion: (() -> ())?)
  #else
  func write(data: Foundation.Data, opcode: FlomniChat.FrameOpCode, completion: (() -> ())?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func write(string: Swift.String, completion: (() -> ())?)
  #else
  func write(string: Swift.String, completion: (() -> ())?)
  #endif
}
@objc @_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
public class NativeEngine : ObjectiveC.NSObject, FlomniChat.Engine, Foundation.URLSessionDataDelegate, Foundation.URLSessionWebSocketDelegate {
  public func register(delegate: any FlomniChat.EngineDelegate)
  public func start(request: Foundation.URLRequest)
  public func stop(closeCode: Swift.UInt16)
  public func forceStop()
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func write(string: Swift.String, completion: (() -> ())?)
  #else
  public func write(string: Swift.String, completion: (() -> ())?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func write(data: Foundation.Data, opcode: FlomniChat.FrameOpCode, completion: (() -> ())?)
  #else
  public func write(data: Foundation.Data, opcode: FlomniChat.FrameOpCode, completion: (() -> ())?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didOpenWithProtocol protocol: Swift.String?)
  #else
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didOpenWithProtocol protocol: Swift.String?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didCloseWith closeCode: Foundation.URLSessionWebSocketTask.CloseCode, reason: Foundation.Data?)
  #else
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didCloseWith closeCode: Foundation.URLSessionWebSocketTask.CloseCode, reason: Foundation.Data?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  #else
  @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  #endif
  @objc override dynamic public init()
  @objc deinit
}
public class WSEngine : FlomniChat.Engine, FlomniChat.TransportEventClient, FlomniChat.FramerEventClient, FlomniChat.FrameCollectorDelegate, FlomniChat.HTTPHandlerDelegate {
  public var respondToPingWithPong: Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(transport: any FlomniChat.Transport, certPinner: (any FlomniChat.CertificatePinning)? = nil, headerValidator: any FlomniChat.HeaderValidator = FoundationSecurity(), httpHandler: any FlomniChat.HTTPHandler = FoundationHTTPHandler(), framer: any FlomniChat.Framer = WSFramer(), compressionHandler: (any FlomniChat.CompressionHandler)? = nil)
  #else
  public init(transport: any FlomniChat.Transport, certPinner: (any FlomniChat.CertificatePinning)? = nil, headerValidator: any FlomniChat.HeaderValidator = FoundationSecurity(), httpHandler: any FlomniChat.HTTPHandler = FoundationHTTPHandler(), framer: any FlomniChat.Framer = WSFramer(), compressionHandler: (any FlomniChat.CompressionHandler)? = nil)
  #endif
  public func register(delegate: any FlomniChat.EngineDelegate)
  public func start(request: Foundation.URLRequest)
  public func stop(closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
  public func forceStop()
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func write(string: Swift.String, completion: (() -> ())?)
  #else
  public func write(string: Swift.String, completion: (() -> ())?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func write(data: Foundation.Data, opcode: FlomniChat.FrameOpCode, completion: (() -> ())?)
  #else
  public func write(data: Foundation.Data, opcode: FlomniChat.FrameOpCode, completion: (() -> ())?)
  #endif
  public func connectionChanged(state: FlomniChat.ConnectionState)
  public func didReceiveHTTP(event: FlomniChat.HTTPEvent)
  public func frameProcessed(event: FlomniChat.FrameEvent)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  #else
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  #endif
  public func didForm(event: FlomniChat.FrameCollector.Event)
  @objc deinit
}
@objc public protocol SocketEngineClient {
  @objc func engineDidError(reason: Swift.String)
  @objc func engineDidClose(reason: Swift.String)
  @objc func engineDidOpen(reason: Swift.String)
  @objc func engineDidReceivePing()
  @objc func engineDidReceivePong()
  @objc func engineDidSendPing()
  @objc func engineDidSendPong()
  @objc func parseEngineMessage(_ msg: Swift.String)
  @objc func parseEngineBinaryData(_ data: Foundation.Data)
  @objc func engineDidWebsocketUpgrade(headers: [Swift.String : Swift.String])
}
public protocol SocketEngineWebsocket : FlomniChat.SocketEngineSpec {
  var wsConnected: Swift.Bool { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  func sendWebSocketMessage(_ str: Swift.String, withType type: FlomniChat.SocketEnginePacketType, withData datas: [Foundation.Data], completion: (() -> ())?)
  #else
  func sendWebSocketMessage(_ str: Swift.String, withType type: FlomniChat.SocketEnginePacketType, withData datas: [Foundation.Data], completion: (() -> ())?)
  #endif
}
extension FlomniChat.SocketEngineWebsocket {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func sendWebSocketMessage(_ str: Swift.String, withType type: FlomniChat.SocketEnginePacketType, withData data: [Foundation.Data], completion: (() -> ())?)
  #else
  public func sendWebSocketMessage(_ str: Swift.String, withType type: FlomniChat.SocketEnginePacketType, withData data: [Foundation.Data], completion: (() -> ())?)
  #endif
}
public protocol SocketEnginePollable : FlomniChat.SocketEngineSpec {
  var invalidated: Swift.Bool { get }
  var postWait: [FlomniChat.Post] { get set }
  #if compiler(>=5.3) && $NoncopyableGenerics
  var session: Foundation.URLSession? { get }
  #else
  var session: Foundation.URLSession? { get }
  #endif
  var waitingForPoll: Swift.Bool { get set }
  var waitingForPost: Swift.Bool { get set }
  func doPoll()
  #if compiler(>=5.3) && $NoncopyableGenerics
  func sendPollMessage(_ message: Swift.String, withType type: FlomniChat.SocketEnginePacketType, withData datas: [Foundation.Data], completion: (() -> ())?)
  #else
  func sendPollMessage(_ message: Swift.String, withType type: FlomniChat.SocketEnginePacketType, withData datas: [Foundation.Data], completion: (() -> ())?)
  #endif
  func stopPolling()
}
extension FlomniChat.SocketEnginePollable {
  public func doPoll()
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func sendPollMessage(_ message: Swift.String, withType type: FlomniChat.SocketEnginePacketType, withData datas: [Foundation.Data], completion: (() -> ())? = nil)
  #else
  public func sendPollMessage(_ message: Swift.String, withType type: FlomniChat.SocketEnginePacketType, withData datas: [Foundation.Data], completion: (() -> ())? = nil)
  #endif
  public func stopPolling()
}
public protocol SocketEngineSpec : AnyObject {
  #if compiler(>=5.3) && $NoncopyableGenerics
  var client: (any FlomniChat.SocketEngineClient)? { get set }
  #else
  var client: (any FlomniChat.SocketEngineClient)? { get set }
  #endif
  var closed: Swift.Bool { get }
  var compress: Swift.Bool { get }
  var connected: Swift.Bool { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  var connectParams: [Swift.String : Any]? { get set }
  #else
  var connectParams: [Swift.String : Any]? { get set }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  var cookies: [Foundation.HTTPCookie]? { get }
  #else
  var cookies: [Foundation.HTTPCookie]? { get }
  #endif
  var engineQueue: Dispatch.DispatchQueue { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  var extraHeaders: [Swift.String : Swift.String]? { get set }
  #else
  var extraHeaders: [Swift.String : Swift.String]? { get set }
  #endif
  var fastUpgrade: Swift.Bool { get }
  var forcePolling: Swift.Bool { get }
  var forceWebsockets: Swift.Bool { get }
  var polling: Swift.Bool { get }
  var probing: Swift.Bool { get }
  var sid: Swift.String { get }
  var socketPath: Swift.String { get }
  var urlPolling: Foundation.URL { get }
  var urlWebSocket: Foundation.URL { get }
  var version: FlomniChat.SocketIOVersion { get }
  @available(*, deprecated, message: "No longer needed, if we're not polling, then we must be doing websockets")
  var websocket: Swift.Bool { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  var ws: FlomniChat.WebSocket? { get }
  #else
  var ws: FlomniChat.WebSocket? { get }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  init(client: any FlomniChat.SocketEngineClient, url: Foundation.URL, options: [Swift.String : Any]?)
  #else
  init(client: any FlomniChat.SocketEngineClient, url: Foundation.URL, options: [Swift.String : Any]?)
  #endif
  func connect()
  func didError(reason: Swift.String)
  func disconnect(reason: Swift.String)
  func doFastUpgrade()
  func flushWaitingForPostToWebSocket()
  func parseEngineData(_ data: Foundation.Data)
  func parseEngineMessage(_ message: Swift.String)
  #if compiler(>=5.3) && $NoncopyableGenerics
  func write(_ msg: Swift.String, withType type: FlomniChat.SocketEnginePacketType, withData data: [Foundation.Data], completion: (() -> Swift.Void)?)
  #else
  func write(_ msg: Swift.String, withType type: FlomniChat.SocketEnginePacketType, withData data: [Foundation.Data], completion: (() -> Swift.Void)?)
  #endif
}
@objc public enum SocketEnginePacketType : Swift.Int {
  case open
  case close
  case ping
  case pong
  case message
  case upgrade
  case noop
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.Int)
  #else
  public init?(rawValue: Swift.Int)
  #endif
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc open class SocketEngine : ObjectiveC.NSObject, FlomniChat.WebSocketDelegate, Foundation.URLSessionDelegate, FlomniChat.SocketEnginePollable, FlomniChat.SocketEngineWebsocket, FlomniChat.ConfigSettable {
  final public let engineQueue: Dispatch.DispatchQueue
  public var connectParams: [Swift.String : Any]? {
    get
    set
  }
  public var extraHeaders: [Swift.String : Swift.String]?
  public var postWait: [FlomniChat.Post]
  public var waitingForPoll: Swift.Bool
  public var waitingForPost: Swift.Bool
  public var closed: Swift.Bool {
    get
  }
  public var compress: Swift.Bool {
    get
  }
  public var connected: Swift.Bool {
    get
  }
  public var cookies: [Foundation.HTTPCookie]? {
    get
  }
  public var fastUpgrade: Swift.Bool {
    get
  }
  public var forcePolling: Swift.Bool {
    get
  }
  public var forceWebsockets: Swift.Bool {
    get
  }
  public var invalidated: Swift.Bool {
    get
  }
  public var polling: Swift.Bool {
    get
  }
  public var probing: Swift.Bool {
    get
  }
  public var session: Foundation.URLSession? {
    get
  }
  public var sid: Swift.String {
    get
  }
  public var socketPath: Swift.String {
    get
  }
  public var urlPolling: Foundation.URL {
    get
  }
  public var urlWebSocket: Foundation.URL {
    get
  }
  public var useCustomEngine: Swift.Bool {
    get
  }
  public var version: FlomniChat.SocketIOVersion {
    get
  }
  @available(*, deprecated, message: "No longer needed, if we're not polling, then we must be doing websockets")
  public var websocket: Swift.Bool {
    get
  }
  public var enableSOCKSProxy: Swift.Bool {
    get
  }
  public var ws: FlomniChat.WebSocket? {
    get
  }
  public var wsConnected: Swift.Bool {
    get
  }
  weak public var client: (any FlomniChat.SocketEngineClient)?
  public init(client: any FlomniChat.SocketEngineClient, url: Foundation.URL, config: FlomniChat.SocketIOClientConfiguration)
  #if compiler(>=5.3) && $NoncopyableGenerics
  required convenience public init(client: any FlomniChat.SocketEngineClient, url: Foundation.URL, options: [Swift.String : Any]?)
  #else
  required convenience public init(client: any FlomniChat.SocketEngineClient, url: Foundation.URL, options: [Swift.String : Any]?)
  #endif
  @objc deinit
  open func connect()
  open func didError(reason: Swift.String)
  open func disconnect(reason: Swift.String)
  open func doFastUpgrade()
  open func flushWaitingForPostToWebSocket()
  open func parseEngineData(_ data: Foundation.Data)
  open func parseEngineMessage(_ message: Swift.String)
  open func setConfigs(_ config: FlomniChat.SocketIOClientConfiguration)
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func write(_ msg: Swift.String, withType type: FlomniChat.SocketEnginePacketType, withData data: [Foundation.Data], completion: (() -> ())? = nil)
  #else
  open func write(_ msg: Swift.String, withType type: FlomniChat.SocketEnginePacketType, withData data: [Foundation.Data], completion: (() -> ())? = nil)
  #endif
}
extension FlomniChat.SocketEngine {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func URLSession(session: Foundation.URLSession, didBecomeInvalidWithError error: Foundation.NSError?)
  #else
  public func URLSession(session: Foundation.URLSession, didBecomeInvalidWithError error: Foundation.NSError?)
  #endif
}
extension FlomniChat.SocketEngine {
  public func didReceive(event: FlomniChat.WebSocketEvent, client: any FlomniChat.WebSocketClient)
}
public struct SocketIOClientConfiguration : Swift.ExpressibleByArrayLiteral, Swift.Collection, Swift.MutableCollection {
  public typealias Element = FlomniChat.SocketIOClientOption
  public typealias Index = Swift.Array<FlomniChat.SocketIOClientOption>.Index
  public typealias Iterator = Swift.Array<FlomniChat.SocketIOClientOption>.Iterator
  public typealias SubSequence = Swift.Array<FlomniChat.SocketIOClientOption>.SubSequence
  public var startIndex: FlomniChat.SocketIOClientConfiguration.Index {
    get
  }
  public var endIndex: FlomniChat.SocketIOClientConfiguration.Index {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public var count: FlomniChat.SocketIOClientConfiguration.Index.Stride {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var first: FlomniChat.SocketIOClientConfiguration.Element? {
    get
  }
  #else
  public var first: FlomniChat.SocketIOClientConfiguration.Element? {
    get
  }
  #endif
  public subscript(position: FlomniChat.SocketIOClientConfiguration.Index) -> FlomniChat.SocketIOClientConfiguration.Element {
    get
    set
  }
  public subscript(bounds: Swift.Range<FlomniChat.SocketIOClientConfiguration.Index>) -> FlomniChat.SocketIOClientConfiguration.SubSequence {
    get
    set
  }
  public init(arrayLiteral elements: FlomniChat.SocketIOClientConfiguration.Element...)
  public func makeIterator() -> FlomniChat.SocketIOClientConfiguration.Iterator
  public func index(after i: FlomniChat.SocketIOClientConfiguration.Index) -> FlomniChat.SocketIOClientConfiguration.Index
  public mutating func insert(_ element: FlomniChat.SocketIOClientConfiguration.Element, replacing replace: Swift.Bool = true)
  public typealias ArrayLiteralElement = FlomniChat.SocketIOClientConfiguration.Element
  public typealias Indices = Swift.DefaultIndices<FlomniChat.SocketIOClientConfiguration>
}
public protocol ConfigSettable {
  mutating func setConfigs(_ config: FlomniChat.SocketIOClientConfiguration)
}
@objc @_hasMissingDesignatedInitializers final public class SocketAnyEvent : ObjectiveC.NSObject {
  @objc final public let event: Swift.String
  @objc final public let items: [Any]?
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc open class SocketIOClient : ObjectiveC.NSObject, FlomniChat.SocketIOClientSpec {
  final public let nsp: Swift.String
  public var anyHandler: ((FlomniChat.SocketAnyEvent) -> Swift.Void)? {
    get
  }
  public var handlers: [FlomniChat.SocketEventHandler] {
    get
  }
  weak public var manager: (any FlomniChat.SocketManagerSpec)? {
    get
  }
  public var rawEmitView: FlomniChat.SocketRawView {
    get
  }
  public var status: FlomniChat.SocketIOStatus {
    get
  }
  public var sid: Swift.String? {
    get
  }
  public init(manager: any FlomniChat.SocketManagerSpec, nsp: Swift.String)
  @objc deinit
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func connect(withPayload payload: [Swift.String : Any]? = nil)
  #else
  open func connect(withPayload payload: [Swift.String : Any]? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func connect(withPayload payload: [Swift.String : Any]? = nil, timeoutAfter: Swift.Double, withHandler handler: (() -> Swift.Void)?)
  #else
  open func connect(withPayload payload: [Swift.String : Any]? = nil, timeoutAfter: Swift.Double, withHandler handler: (() -> Swift.Void)?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func didConnect(toNamespace namespace: Swift.String, payload: [Swift.String : Any]?)
  #else
  open func didConnect(toNamespace namespace: Swift.String, payload: [Swift.String : Any]?)
  #endif
  open func didDisconnect(reason: Swift.String)
  open func disconnect()
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func emit(_ event: Swift.String, _ items: any FlomniChat.SocketData..., completion: (() -> Swift.Void)? = nil)
  #else
  open func emit(_ event: Swift.String, _ items: any FlomniChat.SocketData..., completion: (() -> Swift.Void)? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func emit(_ event: Swift.String, with items: [any FlomniChat.SocketData], completion: (() -> Swift.Void)?)
  #else
  open func emit(_ event: Swift.String, with items: [any FlomniChat.SocketData], completion: (() -> Swift.Void)?)
  #endif
  open func emitWithAck(_ event: Swift.String, _ items: any FlomniChat.SocketData...) -> FlomniChat.OnAckCallback
  open func emitWithAck(_ event: Swift.String, with items: [any FlomniChat.SocketData]) -> FlomniChat.OnAckCallback
  open func emitAck(_ ack: Swift.Int, with items: [Any])
  open func handleAck(_ ack: Swift.Int, data: [Any])
  open func handleClientEvent(_ event: FlomniChat.SocketClientEvent, data: [Any])
  open func handleEvent(_ event: Swift.String, data: [Any], isInternalMessage: Swift.Bool, withAck ack: Swift.Int = -1)
  open func handlePacket(_ packet: FlomniChat.SocketPacket)
  open func leaveNamespace()
  #if compiler(>=5.3) && $NoncopyableGenerics
  open func joinNamespace(withPayload payload: [Swift.String : Any]? = nil)
  #else
  open func joinNamespace(withPayload payload: [Swift.String : Any]? = nil)
  #endif
  open func off(clientEvent event: FlomniChat.SocketClientEvent)
  open func off(_ event: Swift.String)
  open func off(id: Foundation.UUID)
  @discardableResult
  open func on(_ event: Swift.String, callback: @escaping FlomniChat.NormalCallback) -> Foundation.UUID
  @discardableResult
  open func on(clientEvent event: FlomniChat.SocketClientEvent, callback: @escaping FlomniChat.NormalCallback) -> Foundation.UUID
  @discardableResult
  open func once(clientEvent event: FlomniChat.SocketClientEvent, callback: @escaping FlomniChat.NormalCallback) -> Foundation.UUID
  @discardableResult
  open func once(_ event: Swift.String, callback: @escaping FlomniChat.NormalCallback) -> Foundation.UUID
  open func onAny(_ handler: @escaping (FlomniChat.SocketAnyEvent) -> Swift.Void)
  @available(*, unavailable, message: "Call the manager's reconnect method")
  open func reconnect()
  open func removeAllHandlers()
  open func setReconnecting(reason: Swift.String)
}
public enum SocketIOVersion : Swift.Int {
  case two
  case three
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.Int)
  #else
  public init?(rawValue: Swift.Int)
  #endif
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SocketIOClientOption {
  case compress
  case connectParams([Swift.String : Any])
  case cookies([Foundation.HTTPCookie])
  case extraHeaders([Swift.String : Swift.String])
  case forceNew(Swift.Bool)
  case forcePolling(Swift.Bool)
  case forceWebsockets(Swift.Bool)
  case enableSOCKSProxy(Swift.Bool)
  case handleQueue(Dispatch.DispatchQueue)
  case log(Swift.Bool)
  case logger(any FlomniChat.SocketLogger)
  case path(Swift.String)
  case reconnects(Swift.Bool)
  case reconnectAttempts(Swift.Int)
  case reconnectWait(Swift.Int)
  case reconnectWaitMax(Swift.Int)
  case randomizationFactor(Swift.Double)
  case secure(Swift.Bool)
  case security(any FlomniChat.CertificatePinning)
  case selfSigned(Swift.Bool)
  case sessionDelegate(any Foundation.URLSessionDelegate)
  case useCustomEngine(Swift.Bool)
  case version(FlomniChat.SocketIOVersion)
  public var description: Swift.String {
    get
  }
  public static func == (lhs: FlomniChat.SocketIOClientOption, rhs: FlomniChat.SocketIOClientOption) -> Swift.Bool
}
public struct SocketEventHandler {
  public let event: Swift.String
  public let id: Foundation.UUID
  public let callback: FlomniChat.NormalCallback
  public func executeCallback(with items: [Any], withAck ack: Swift.Int, withSocket socket: FlomniChat.SocketIOClient)
}
@objc @_hasMissingDesignatedInitializers final public class SocketRawView : ObjectiveC.NSObject {
  final public func emit(_ event: Swift.String, _ items: any FlomniChat.SocketData...)
  @objc final public func emit(_ event: Swift.String, with items: [Any])
  final public func emitWithAck(_ event: Swift.String, _ items: any FlomniChat.SocketData...) -> FlomniChat.OnAckCallback
  @objc final public func emitWithAck(_ event: Swift.String, with items: [Any]) -> FlomniChat.OnAckCallback
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class SocketRawAckView : ObjectiveC.NSObject {
  final public func with(_ items: any FlomniChat.SocketData...)
  @objc final public func with(_ items: [Any])
  @objc deinit
}
public protocol SocketIOClientSpec : AnyObject {
  #if compiler(>=5.3) && $NoncopyableGenerics
  var anyHandler: ((FlomniChat.SocketAnyEvent) -> ())? { get }
  #else
  var anyHandler: ((FlomniChat.SocketAnyEvent) -> ())? { get }
  #endif
  var handlers: [FlomniChat.SocketEventHandler] { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  var manager: (any FlomniChat.SocketManagerSpec)? { get }
  #else
  var manager: (any FlomniChat.SocketManagerSpec)? { get }
  #endif
  var nsp: Swift.String { get }
  var rawEmitView: FlomniChat.SocketRawView { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  var sid: Swift.String? { get }
  #else
  var sid: Swift.String? { get }
  #endif
  var status: FlomniChat.SocketIOStatus { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  func connect(withPayload payload: [Swift.String : Any]?)
  #else
  func connect(withPayload payload: [Swift.String : Any]?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func connect(withPayload payload: [Swift.String : Any]?, timeoutAfter: Swift.Double, withHandler handler: (() -> ())?)
  #else
  func connect(withPayload payload: [Swift.String : Any]?, timeoutAfter: Swift.Double, withHandler handler: (() -> ())?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func didConnect(toNamespace namespace: Swift.String, payload: [Swift.String : Any]?)
  #else
  func didConnect(toNamespace namespace: Swift.String, payload: [Swift.String : Any]?)
  #endif
  func didDisconnect(reason: Swift.String)
  func didError(reason: Swift.String)
  func disconnect()
  #if compiler(>=5.3) && $NoncopyableGenerics
  func emit(_ event: Swift.String, _ items: any FlomniChat.SocketData..., completion: (() -> ())?)
  #else
  func emit(_ event: Swift.String, _ items: any FlomniChat.SocketData..., completion: (() -> ())?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func emit(_ event: Swift.String, with items: [any FlomniChat.SocketData], completion: (() -> ())?)
  #else
  func emit(_ event: Swift.String, with items: [any FlomniChat.SocketData], completion: (() -> ())?)
  #endif
  func emitAck(_ ack: Swift.Int, with items: [Any])
  func emitWithAck(_ event: Swift.String, _ items: any FlomniChat.SocketData...) -> FlomniChat.OnAckCallback
  func emitWithAck(_ event: Swift.String, with items: [any FlomniChat.SocketData]) -> FlomniChat.OnAckCallback
  func handleAck(_ ack: Swift.Int, data: [Any])
  func handleClientEvent(_ event: FlomniChat.SocketClientEvent, data: [Any])
  func handleEvent(_ event: Swift.String, data: [Any], isInternalMessage: Swift.Bool, withAck ack: Swift.Int)
  func handlePacket(_ packet: FlomniChat.SocketPacket)
  func leaveNamespace()
  #if compiler(>=5.3) && $NoncopyableGenerics
  func joinNamespace(withPayload payload: [Swift.String : Any]?)
  #else
  func joinNamespace(withPayload payload: [Swift.String : Any]?)
  #endif
  func off(clientEvent event: FlomniChat.SocketClientEvent)
  func off(_ event: Swift.String)
  func off(id: Foundation.UUID)
  func on(_ event: Swift.String, callback: @escaping FlomniChat.NormalCallback) -> Foundation.UUID
  func on(clientEvent event: FlomniChat.SocketClientEvent, callback: @escaping FlomniChat.NormalCallback) -> Foundation.UUID
  func once(clientEvent event: FlomniChat.SocketClientEvent, callback: @escaping FlomniChat.NormalCallback) -> Foundation.UUID
  func once(_ event: Swift.String, callback: @escaping FlomniChat.NormalCallback) -> Foundation.UUID
  func onAny(_ handler: @escaping (FlomniChat.SocketAnyEvent) -> ())
  func removeAllHandlers()
  func setReconnecting(reason: Swift.String)
}
extension FlomniChat.SocketIOClientSpec {
  public func didError(reason: Swift.String)
}
public enum SocketClientEvent : Swift.String {
  case connect
  case disconnect
  case error
  case ping
  case pong
  case reconnect
  case reconnectAttempt
  case statusChange
  case websocketUpgrade
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.String)
  #else
  public init?(rawValue: Swift.String)
  #endif
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum SocketIOStatus : Swift.Int, Swift.CustomStringConvertible {
  case notConnected
  case disconnected
  case connecting
  case connected
  public var active: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.Int)
  #else
  public init?(rawValue: Swift.Int)
  #endif
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SocketAckStatus : Swift.String {
  case noAck
  public static func == (lhs: Swift.String, rhs: FlomniChat.SocketAckStatus) -> Swift.Bool
  public static func == (lhs: FlomniChat.SocketAckStatus, rhs: Swift.String) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.String)
  #else
  public init?(rawValue: Swift.String)
  #endif
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc final public class SocketAckEmitter : ObjectiveC.NSObject {
  @objc final public var rawEmitView: FlomniChat.SocketRawAckView {
    @objc get
  }
  final public var expected: Swift.Bool {
    get
  }
  public init(socket: FlomniChat.SocketIOClient, ackNum: Swift.Int)
  final public func with(_ items: any FlomniChat.SocketData...)
  @objc final public func with(_ items: [Any])
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class OnAckCallback : ObjectiveC.NSObject {
  @objc deinit
  @objc final public func timingOut(after seconds: Swift.Double, callback: @escaping FlomniChat.AckCallback)
}
extension Foundation.NSString : @unchecked Swift.Sendable {
}
public struct Options {
  public var searchPathDirectory: Foundation.FileManager.SearchPathDirectory
  public var folder: Swift.String
  public var directoryUrl: Foundation.URL?
  public var encoder: Foundation.JSONEncoder
  public var decoder: Foundation.JSONDecoder
}
public enum StorageError : Swift.Error {
  case notFound
  case encodeData
  case decodeData
  case createFile
  case missingFileAttributeKey(key: Foundation.FileAttributeKey)
  case expired(maxAge: Swift.Double)
  case nonmutated
}
@_hasMissingDesignatedInitializers public class Storage {
  public static var shared: FlomniChat.Storage?
  final public let cache: Foundation.NSCache<Foundation.NSString, Swift.AnyObject>
  public var options: FlomniChat.Options {
    get
  }
  final public let folderUrl: Foundation.URL
  final public let fileManager: Foundation.FileManager
  #if compiler(>=5.3) && $NoncopyableGenerics
  convenience public init?()
  #else
  convenience public init?()
  #endif
  public func exists(forKey key: Swift.String) -> Swift.Bool
  public func removeAll() throws
  public func remove(forKey key: Swift.String) throws
  public func fileUrl(forKey key: Swift.String) -> Foundation.URL
  @objc deinit
}
extension FlomniChat.Storage {
  public enum Expiry {
    case never
    case maxAge(maxAge: Foundation.TimeInterval)
  }
}
extension Swift.Array where Element : Swift.Decodable, Element : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension FlomniChat.Storage {
  public func save(object: [some Codable], forKey key: Swift.String) throws
  public func save(object: some Codable, forKey key: Swift.String) throws
  public func load<T>(forKey key: Swift.String, as: T.Type, withExpiry expiry: FlomniChat.Storage.Expiry = .never) throws -> T where T : Swift.Decodable, T : Swift.Encodable
}
extension FlomniChat.Storage {
  public func save(object: Foundation.Data, forKey key: Swift.String) throws
  public func load(forKey key: Swift.String, withExpiry expiry: FlomniChat.Storage.Expiry = .never) throws -> Foundation.Data
}
extension FlomniChat.Storage {
  public func save(object: UIKit.UIImage, forKey key: Swift.String) throws
  public func load(forKey key: Swift.String, withExpiry expiry: FlomniChat.Storage.Expiry = .never) throws -> UIKit.UIImage
}
extension FlomniChat.Storage {
  public func folderSize() throws -> Swift.UInt64
  public func isEmpty() throws -> Swift.Bool
  public func files() throws -> [FlomniChat.File]
  public func removeAll(predicate: (FlomniChat.File) -> Swift.Bool) throws
  public func file(forKey key: Swift.String) throws -> FlomniChat.File
  public func modificationDate(forKey key: Swift.String) throws -> Foundation.Date
}
public struct ChatThemeKey : Swift.Sendable, SwiftUICore.EnvironmentKey {
  public static var defaultValue: FlomniChat.ChatTheme
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Value = FlomniChat.ChatTheme
}
@_hasMissingDesignatedInitializers final public class ChatTheme : FlomniChat.Observable {
  public static let `default`: FlomniChat.ChatTheme
  final public let generalColors: FlomniChat.GeneralColors
  final public let messageColors: FlomniChat.MessageColors
  final public let messageFieldColors: FlomniChat.MessageFieldColors
  final public let rateSheetColors: FlomniChat.RateSheetColors
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
final public class GeneralColors : Swift.Codable {
  @FlomniChat.HexColor @_projectedValueProperty($primaryColor) final public var primaryColor: Swift.String {
    get
  }
  final public var $primaryColor: SwiftUICore.Color {
    get
  }
  @FlomniChat.HexColor @_projectedValueProperty($chatBackgroundColor) final public var chatBackgroundColor: Swift.String {
    get
  }
  final public var $chatBackgroundColor: SwiftUICore.Color {
    get
  }
  @FlomniChat.HexColor @_projectedValueProperty($inputTextColor) final public var inputTextColor: Swift.String {
    get
  }
  final public var $inputTextColor: SwiftUICore.Color {
    get
  }
  @FlomniChat.HexColor @_projectedValueProperty($inputHintColor) final public var inputHintColor: Swift.String {
    get
  }
  final public var $inputHintColor: SwiftUICore.Color {
    get
  }
  public init(primaryColor: Swift.String = "#4676DA", chatBackgroundColor: Swift.String = "#EFEFF4", inputTextColor: Swift.String = "#000000", inputHintColor: Swift.String = "#3C3C434D")
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
final public class MessageColors : Swift.Codable {
  @FlomniChat.HexColor @_projectedValueProperty($outboundText) final public var outboundText: Swift.String {
    get
  }
  final public var $outboundText: SwiftUICore.Color {
    get
  }
  @FlomniChat.HexColor @_projectedValueProperty($inboundText) final public var inboundText: Swift.String {
    get
  }
  final public var $inboundText: SwiftUICore.Color {
    get
  }
  @FlomniChat.HexColor @_projectedValueProperty($outboundBackground) final public var outboundBackground: Swift.String {
    get
  }
  final public var $outboundBackground: SwiftUICore.Color {
    get
  }
  @FlomniChat.HexColor @_projectedValueProperty($inboundBackground) final public var inboundBackground: Swift.String {
    get
  }
  final public var $inboundBackground: SwiftUICore.Color {
    get
  }
  @FlomniChat.HexColor @_projectedValueProperty($borderStroke) final public var borderStroke: Swift.String {
    get
  }
  final public var $borderStroke: SwiftUICore.Color {
    get
  }
  @FlomniChat.HexColor @_projectedValueProperty($captionText) final public var captionText: Swift.String {
    get
  }
  final public var $captionText: SwiftUICore.Color {
    get
  }
  @FlomniChat.HexColor @_projectedValueProperty($buttonColor) final public var buttonColor: Swift.String {
    get
  }
  final public var $buttonColor: SwiftUICore.Color {
    get
  }
  public init(inMessageTextColor: Swift.String = "#000000", outMessageTextColor: Swift.String = "#000000", inMessageBackgroundColor: Swift.String = "#FFFFFF", outMessageBackgroundColor: Swift.String = "#C6D9FE", borderStrokeMessageColor: Swift.String = "#B5CADD", messageDateColor: Swift.String = "#8E8E93", buttonColor: Swift.String = "#787880")
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class RateSheetColors : Swift.Codable {
  @FlomniChat.HexColor @_projectedValueProperty($headerBackgroundColor) public var headerBackgroundColor: Swift.String {
    get
  }
  public var $headerBackgroundColor: SwiftUICore.Color {
    get
  }
  @FlomniChat.HexColor @_projectedValueProperty($labelColor) public var labelColor: Swift.String {
    get
  }
  public var $labelColor: SwiftUICore.Color {
    get
  }
  @FlomniChat.HexColor @_projectedValueProperty($ratingBarColor) public var ratingBarColor: Swift.String {
    get
  }
  public var $ratingBarColor: SwiftUICore.Color {
    get
  }
  public init(headerBackgroundColor: Swift.String = "FFFFFF", labelColor: Swift.String = "000000", ratingBarColor: Swift.String = "#FADB14")
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
final public class MessageFieldColors : Swift.Codable {
  @FlomniChat.HexColor @_projectedValueProperty($messageButtonBackgroundColor) final public var messageButtonBackgroundColor: Swift.String {
    get
  }
  final public var $messageButtonBackgroundColor: SwiftUICore.Color {
    get
  }
  @FlomniChat.HexColor @_projectedValueProperty($messageButtonTextColor) final public var messageButtonTextColor: Swift.String {
    get
  }
  final public var $messageButtonTextColor: SwiftUICore.Color {
    get
  }
  @FlomniChat.HexColor @_projectedValueProperty($messageButtonPressedTextColor) final public var messageButtonPressedTextColor: Swift.String {
    get
  }
  final public var $messageButtonPressedTextColor: SwiftUICore.Color {
    get
  }
  @FlomniChat.HexColor @_projectedValueProperty($messageFieldBackgroundColor) final public var messageFieldBackgroundColor: Swift.String {
    get
  }
  final public var $messageFieldBackgroundColor: SwiftUICore.Color {
    get
  }
  @FlomniChat.HexColor @_projectedValueProperty($messageFieldStrokeColor) final public var messageFieldStrokeColor: Swift.String {
    get
  }
  final public var $messageFieldStrokeColor: SwiftUICore.Color {
    get
  }
  @FlomniChat.HexColor @_projectedValueProperty($bottomBarBackgroundColor) final public var bottomBarBackgroundColor: Swift.String {
    get
  }
  final public var $bottomBarBackgroundColor: SwiftUICore.Color {
    get
  }
  @FlomniChat.HexColor @_projectedValueProperty($attachFileButtonColor) final public var attachFileButtonColor: Swift.String {
    get
  }
  final public var $attachFileButtonColor: SwiftUICore.Color {
    get
  }
  public init(messageButtonBackgroundColor: Swift.String = "#4676DA", messageButtonTextColor: Swift.String = "#FFFFFF", messageButtonPressedTextColor: Swift.String = "#4676DA", messageFieldStrokeColor: Swift.String = "#787880", messageFieldBackgroundColor: Swift.String = "#FFFFFF", attachFileButtonColor: Swift.String = "#8E8E93", bottomBarBackgroundColor: Swift.String = "f5f5f6")
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension FlomniChat.AnyFeedback {
  public static let newMessage: FlomniChat.AnyFeedback
  public static let tap: FlomniChat.AnyFeedback
}
extension FlomniChat.EnvironmentStore.Properties : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional : Swift.CustomStringConvertible, FlomniChat.EnvironmentStorable where Wrapped == Swift.String {
  public var description: Swift.String {
    get
  }
  public init(_ description: Swift.String)
}
#else
extension Swift.Optional : Swift.CustomStringConvertible, FlomniChat.EnvironmentStorable where Wrapped == Swift.String {
  public var description: Swift.String {
    get
  }
  public init(_ description: Swift.String)
}
#endif
extension Swift.String : Swift.CustomStringConvertible, FlomniChat.EnvironmentStorable {
  public var description: Swift.String {
    get
  }
  public init(_ description: Swift.String)
}
public typealias EnvironmentStorable = Swift.Codable & Swift.Equatable & Swift.LosslessStringConvertible
extension FlomniChat.EnvironmentStore {
  public struct Properties : Swift.Codable, Swift.Equatable {
    public typealias `Type` = FlomniChat.EnvironmentStore.Properties.Environments
    public enum Environments : Swift.CaseIterable, Swift.Identifiable, Swift.CodingKey {
      public var id: Swift.String {
        get
      }
      case baseUrl
      case devicePushToken
      case companyID
      case userID
      case userHash
      case contour
      case visitorAttributes
      case appGroup
      public var rawValue: Swift.String {
        get
      }
      public static func == (a: FlomniChat.EnvironmentStore.Properties.Environments, b: FlomniChat.EnvironmentStore.Properties.Environments) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      #if compiler(>=5.3) && $NoncopyableGenerics
      public init?(stringValue: Swift.String)
      #else
      public init?(stringValue: Swift.String)
      #endif
      #if compiler(>=5.3) && $NoncopyableGenerics
      public init?(intValue: Swift.Int)
      #else
      public init?(intValue: Swift.Int)
      #endif
      public typealias AllCases = [FlomniChat.EnvironmentStore.Properties.Environments]
      @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
      public typealias ID = Swift.String
      public static var allCases: [FlomniChat.EnvironmentStore.Properties.Environments] {
        get
      }
      public var hashValue: Swift.Int {
        get
      }
      #if compiler(>=5.3) && $NoncopyableGenerics
      public var intValue: Swift.Int? {
        get
      }
      #else
      public var intValue: Swift.Int? {
        get
      }
      #endif
      public var stringValue: Swift.String {
        get
      }
    }
    public static func == (lhs: FlomniChat.EnvironmentStore.Properties, rhs: FlomniChat.EnvironmentStore.Properties) -> Swift.Bool
    public static let `default`: FlomniChat.EnvironmentStore.Properties
    public var baseUrl: FlomniChat.BaseURL
    public var devicePushToken: Swift.String
    public var companyID: Swift.String
    public var userID: Swift.String
    public var userHash: Swift.String
    public var contour: FlomniChat.Contour
    public var visitorAttributes: Swift.String
    public var appGroup: Swift.String
    public init(baseUrl: FlomniChat.BaseURL, devicePushToken: Swift.String, companyID: Swift.String, userID: Swift.String, appGroup: Swift.String, contour: FlomniChat.Contour, visitorAttributes: Swift.String)
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
    public func storeToPlist() -> Swift.Bool
    public static func loadProperties() throws -> FlomniChat.EnvironmentStore.Properties
    public static let plistPath: Foundation.URL
  }
}
@_hasMissingDesignatedInitializers final public class EnvironmentStore : Combine.ObservableObject {
  final public class func set(properties: FlomniChat.EnvironmentStore.Properties)
  public static var isConfigured: Swift.Bool {
    get
  }
  final public var baseUrl: FlomniChat.BaseURL {
    get
    set
  }
  final public var devicePushToken: Swift.String {
    get
    set
  }
  final public var companyID: Swift.String {
    get
    set
  }
  final public var userID: Swift.String {
    get
    set
  }
  final public var userHash: Swift.String {
    get
    set
  }
  final public var contour: FlomniChat.Contour {
    get
    set
  }
  final public var visitorAttributes: Swift.String {
    get
    set
  }
  final public var appGroup: Swift.String {
    get
    set
  }
  public static subscript<Value>(keyPath: Swift.ReferenceWritableKeyPath<FlomniChat.EnvironmentStore, Value>) -> Value {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension SwiftUICore.EnvironmentValues {
  public var environmentStore: FlomniChat.EnvironmentStore {
    get
    set
  }
  public var baseURL: FlomniChat.BaseURL {
    get
    set
  }
  public var companyID: Swift.String {
    get
    set
  }
  public var userID: Swift.String {
    get
    set
  }
  public var contour: FlomniChat.Contour {
    get
    set
  }
  public var visitorAttributes: Swift.String {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var devicePushToken: Swift.String? {
    get
    set
  }
  #else
  public var devicePushToken: Swift.String? {
    get
    set
  }
  #endif
  public var appGroup: Swift.String {
    get
    set
  }
}
extension Foundation.UserDefaults {
  public enum Keys : Swift.RawRepresentable, Swift.CaseIterable {
    public static var allCases: [Foundation.UserDefaults.Keys]
    case environments
    case threadId
    case sessionId
    case lastMessageId
    case lastMessageTimestamp
    case devicePushToken
    case receivedNotifications
    case socketQuery(_: Swift.String)
    case caption(_: Swift.String)
    public init(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [Foundation.UserDefaults.Keys]
    public typealias RawValue = Swift.String
  }
  @discardableResult
  public func set(_ value: Swift.String, for key: Foundation.UserDefaults.Keys) -> Self
  @discardableResult
  public func set(_ value: Swift.Bool, for key: Foundation.UserDefaults.Keys) -> Self
  @discardableResult
  public func set(_ value: Swift.Int, for key: Foundation.UserDefaults.Keys) -> Self
  @discardableResult
  public func set(_ value: Foundation.Data, for key: Foundation.UserDefaults.Keys) -> Self
  #if compiler(>=5.3) && $NoncopyableGenerics
  public subscript(key: Foundation.UserDefaults.Keys) -> Swift.String? {
    get
    set
  }
  #else
  public subscript(key: Foundation.UserDefaults.Keys) -> Swift.String? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public subscript(key: Foundation.UserDefaults.Keys) -> Swift.Bool? {
    get
    set
  }
  #else
  public subscript(key: Foundation.UserDefaults.Keys) -> Swift.Bool? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func string(forKey key: Foundation.UserDefaults.Keys) -> Swift.String?
  #else
  public func string(forKey key: Foundation.UserDefaults.Keys) -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func bool(forKey key: Foundation.UserDefaults.Keys) -> Swift.Bool?
  #else
  public func bool(forKey key: Foundation.UserDefaults.Keys) -> Swift.Bool?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func int(forKey key: Foundation.UserDefaults.Keys) -> Swift.Int?
  #else
  public func int(forKey key: Foundation.UserDefaults.Keys) -> Swift.Int?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func data(forKey key: Foundation.UserDefaults.Keys) -> Foundation.Data?
  #else
  public func data(forKey key: Foundation.UserDefaults.Keys) -> Foundation.Data?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func object(forKey key: Foundation.UserDefaults.Keys) -> Any?
  #else
  public func object(forKey key: Foundation.UserDefaults.Keys) -> Any?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func url(forKey key: Foundation.UserDefaults.Keys) -> Foundation.URL?
  #else
  public func url(forKey key: Foundation.UserDefaults.Keys) -> Foundation.URL?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func dictionary(forKey key: Foundation.UserDefaults.Keys) -> [Swift.String : Any]?
  #else
  public func dictionary(forKey key: Foundation.UserDefaults.Keys) -> [Swift.String : Any]?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func array(forKey key: Foundation.UserDefaults.Keys) -> [Any]?
  #else
  public func array(forKey key: Foundation.UserDefaults.Keys) -> [Any]?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func stringArray(forKey key: Foundation.UserDefaults.Keys) -> [Swift.String]?
  #else
  public func stringArray(forKey key: Foundation.UserDefaults.Keys) -> [Swift.String]?
  #endif
}
extension FlomniChat.JSON {
  public var id: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public func socketRepresentation() throws -> any FlomniChat.SocketData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
extension FlomniChat.SEvent {
  public var notificationName: Foundation.Notification.Name {
    get
  }
}
extension Foundation.NSNotification.Name : Swift.Equatable {
  public static func == (lhs: Foundation.Notification.Name, rhs: Foundation.Notification.Name) -> Swift.Bool
}
extension Foundation.Notification {
  public static func publisher(for name: Foundation.Notification.Name) -> Combine.AnyPublisher<Foundation.Notification, Swift.Never>
}
extension SwiftUI.ScrollViewProxy : @unchecked Swift.Sendable, SwiftUICore.Animatable {
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
}
public protocol DateValueCodableStrategy {
  associatedtype RawValue : Swift.Decodable, Swift.Encodable
  static func decode(_ value: Self.RawValue) throws -> Foundation.Date
  static func encode(_ date: Foundation.Date) -> Self.RawValue
}
public struct TimestampStrategy : FlomniChat.DateValueCodableStrategy {
  public static func decode(_ value: Foundation.TimeInterval) throws -> Foundation.Date
  public static func encode(_ date: Foundation.Date) -> Foundation.TimeInterval
  public typealias RawValue = Foundation.TimeInterval
}
public struct ISO8601Strategy : FlomniChat.DateValueCodableStrategy {
  public static func decode(_ value: Swift.String) throws -> Foundation.Date
  public static func encode(_ date: Foundation.Date) -> Swift.String
  public typealias RawValue = Swift.String
}
@propertyWrapper public struct DateValue<Formatter> : Swift.Codable where Formatter : FlomniChat.DateValueCodableStrategy {
  public var wrappedValue: Foundation.Date
  public init(wrappedValue: Foundation.Date)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public typealias FactoryContainer = FlomniChat.Container
extension FlomniChat.SharedContainer {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var flomniChat: FlomniChat.Factory<FlomniChat.ChatModule?> {
    get
  }
  #else
  public var flomniChat: FlomniChat.Factory<FlomniChat.ChatModule?> {
    get
  }
  #endif
}
extension FlomniChat.Container {
  final public var removingSessions: FlomniChat.Factory<Swift.Bool> {
    get
  }
  final public var chatTheme: FlomniChat.Factory<FlomniChat.ChatTheme> {
    get
  }
  final public var orientation: FlomniChat.Factory<FlomniChat.OrientationManager> {
    get
  }
}
extension FlomniChat.Container : FlomniChat.AutoRegistering {
  final public func autoRegister()
}
@_hasMissingDesignatedInitializers final public class LogContainer : FlomniChat.SharedContainer, FlomniChat.Observable {
  final public let manager: FlomniChat.ContainerManager
  public static let shared: FlomniChat.LogContainer
  final public func loggers() -> [FlomniChat.Factory<FlomniChat.SUILog>]
  final public subscript<T>(keyPath: Swift.KeyPath<FlomniChat.LogContainer, FlomniChat.Factory<T>>) -> T {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension FlomniChat.SharedContainer {
  public var navigationPath: FlomniChat.Factory<FlomniChat.NBNavigationPath> {
    get
  }
  public var loggerService: FlomniChat.Factory<FlomniChat.LogContainer> {
    get
  }
}
extension FlomniChat.LogContainer {
  final public var global: FlomniChat.Factory<FlomniChat.SUILog> {
    get
  }
  final public var ui: FlomniChat.Factory<FlomniChat.SUILog> {
    get
  }
  final public var storage: FlomniChat.Factory<FlomniChat.SUILog> {
    get
  }
  final public var socket: FlomniChat.Factory<FlomniChat.SUILog> {
    get
  }
  final public var network: FlomniChat.Factory<FlomniChat.SUILog> {
    get
  }
}
public let Console: FlomniChat.LogContainer
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class NotificationsHandler : ObjectiveC.NSObject, Combine.ObservableObject, UserNotifications.UNUserNotificationCenterDelegate, FlomniChat.UNUserNotificationCenterProtocol {
  public func add(_ request: UserNotifications.UNNotificationRequest) async throws
  public func removeAllPendingNotificationRequests()
  public func pendingNotificationRequests() async -> [UserNotifications.UNNotificationRequest]
  public func removePendingNotificationRequests(withIdentifiers: [Swift.String])
  public static let shared: FlomniChat.NotificationsHandler
  @_Concurrency.MainActor @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse) async
  @objc public func userNotificationCenter(_: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification) async -> UserNotifications.UNNotificationPresentationOptions
  public func setupRemoteNotifications()
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func handleRemoteNotification(_ content: UserNotifications.UNNotificationContent) async -> FlomniChat.FlomniNotification?
  #else
  public func handleRemoteNotification(_ content: UserNotifications.UNNotificationContent) async -> FlomniChat.FlomniNotification?
  #endif
  public func application(application: UIKit.UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Foundation.Data)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension FlomniChat.NotificationsHandler {
  public func userNotificationCenter(didReceiveRemoteNotification userInfo: [Swift.AnyHashable : Any]) async throws -> FlomniChat.FlomniNotification
}
public enum NotificationError : FlomniChat.ErrorAlertConvertible, Foundation.LocalizedError {
  public var errorTitle: Swift.String {
    get
  }
  public var errorMessage: Swift.String {
    get
  }
  public var errorButtonText: Swift.String {
    get
  }
  case invalidChatMessageInfo(Swift.String)
  case sessionIdMissing(Swift.String)
  case messageMissing(Swift.String)
  case userHashMissing(Swift.String)
  case unableToDecode(Swift.String)
  case noPersistentHistoryTransactions, batchInsertError
  public var localizedDescription: Swift.String {
    get
  }
}

@_Concurrency.MainActor @preconcurrency public struct LocalNotificationList : SwiftUICore.View, @unchecked Swift.Sendable {
  @_Concurrency.MainActor @preconcurrency public init(userNotificationCenter: FlomniChat.NotificationsHandler)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat21LocalNotificationListV4bodyQrvp", 0) __
}
public func NotificationCell(_ content: FlomniChat.FlomniNotification, id: Swift.String) -> some SwiftUICore.View

public func NotificationCell(_ request: UserNotifications.UNNotificationRequest, id: Swift.String) -> some SwiftUICore.View

public protocol UNUserNotificationCenterProtocol {
  func add(_ request: UserNotifications.UNNotificationRequest) async throws
  func removeAllPendingNotificationRequests()
  func pendingNotificationRequests() async -> [UserNotifications.UNNotificationRequest]
  func removePendingNotificationRequests(withIdentifiers: [Swift.String])
}
extension UserNotifications.UNUserNotificationCenter : FlomniChat.UNUserNotificationCenterProtocol {
}
@_hasMissingDesignatedInitializers final public class KeyboardState : FlomniChat.Observable {
  @Combine.Published @_projectedValueProperty($isShown) final public var isShown: Swift.Bool {
    get
  }
  final public var $isShown: Combine.Published<Swift.Bool>.Publisher {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}

extension SwiftUICore.View {
  @inlinable @_Concurrency.MainActor @preconcurrency internal func disclosureDump<Disclosure>(@SwiftUICore.ViewBuilder disclosuredContent: @escaping () -> Disclosure) -> some SwiftUICore.View where Disclosure : SwiftUICore.View {
        modifier(DisclosureDump(disclosuredContent: disclosuredContent   ))
    }
  
}
@usableFromInline
@_Concurrency.MainActor @preconcurrency internal struct DisclosureDump<Disclosure> : SwiftUICore.ViewModifier where Disclosure : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var disclosuredContent: Disclosure
  @_Concurrency.MainActor @preconcurrency public init(@SwiftUICore.ViewBuilder disclosuredContent content: @escaping () -> Disclosure)
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal func body(content: FlomniChat.DisclosureDump<Disclosure>.Content) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat14DisclosureDumpV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACyxGG_tF", 0) __<Disclosure>
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func contextMenu<M, P>(@SwiftUICore.ViewBuilder _ menuItems: () -> M, @SwiftUICore.ViewBuilder _ preview: () -> P) -> some SwiftUICore.View where M : SwiftUICore.View, P : SwiftUICore.View
  
}
public typealias SUILog = FlomniChat.SwiftUILogger
extension FlomniChat.SwiftUILogger {
  public var scope: FlomniChat.SUILogScope {
    get
  }
}
public enum SUILogScope : Swift.Int, Swift.CaseIterable, Swift.Identifiable {
  public var id: Swift.Int {
    get
  }
  case global
  case ui
  case keychain
  case socket
  case network
  public subscript(index: Swift.Int) -> FlomniChat.SUILogScope {
    get
  }
  public var rawObjectName: Swift.String {
    get
  }
  public var symbol: SwiftUICore.Image {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.Int)
  #else
  public init?(rawValue: Swift.Int)
  #endif
  public typealias AllCases = [FlomniChat.SUILogScope]
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.Int
  public typealias RawValue = Swift.Int
  public static var allCases: [FlomniChat.SUILogScope] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public typealias LogEvent = FlomniChat.SUILog.Event
extension FlomniChat.SwiftUILogger.Event : Swift.Hashable, Swift.Equatable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: FlomniChat.LogEvent, rhs: FlomniChat.LogEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.Notification : @unchecked Swift.Sendable {
  public static var userAction: Foundation.Notification.Name {
    get
  }
  public static var postRate: Foundation.Notification.Name {
    get
  }
  public static var didPostRate: Foundation.Notification {
    get
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func patternBackground(pattern: SwiftUICore.Image = Image("Pattern"), patternTint: some ShapeStyle = Color.accentColor.opacity(0.33)) -> some SwiftUICore.View
  
}

extension SwiftUICore.Image {
  public func toolbarIcon() -> some SwiftUICore.View
  
}

@_Concurrency.MainActor @preconcurrency public struct TerminalTab : SwiftUICore.View {
  @FlomniChat.Injected @_projectedValueProperty($global) @_Concurrency.MainActor @preconcurrency public var global: FlomniChat.SUILog {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $global: FlomniChat.Injected<FlomniChat.SUILog> {
    get
    set
  }
  @FlomniChat.Injected @_projectedValueProperty($ui) @_Concurrency.MainActor @preconcurrency public var ui: FlomniChat.SUILog {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $ui: FlomniChat.Injected<FlomniChat.SUILog> {
    get
    set
  }
  @FlomniChat.Injected @_projectedValueProperty($keychain) @_Concurrency.MainActor @preconcurrency public var keychain: FlomniChat.SUILog {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $keychain: FlomniChat.Injected<FlomniChat.SUILog> {
    get
    set
  }
  @FlomniChat.Injected @_projectedValueProperty($socket) @_Concurrency.MainActor @preconcurrency public var socket: FlomniChat.SUILog {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $socket: FlomniChat.Injected<FlomniChat.SUILog> {
    get
    set
  }
  @FlomniChat.Injected @_projectedValueProperty($network) @_Concurrency.MainActor @preconcurrency public var network: FlomniChat.SUILog {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $network: FlomniChat.Injected<FlomniChat.SUILog> {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat11TerminalTabV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct SUILogTrace : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat11SUILogTraceV4bodyQrvp", 0) __
}
extension Foundation.URL : Swift.Identifiable, Swift.RawRepresentable {
  public var rawValue: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.String)
  #else
  public init?(rawValue: Swift.String)
  #endif
  public var id: Swift.String {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
  @available(iOS 8.0, tvOS 9.0, watchOS 2.0, macOS 10.10, *)
  public typealias RawValue = Swift.String
}

extension FlomniChat.ChatBubble {
  @_Concurrency.MainActor @preconcurrency public func TextRow(for text: SwiftUICore.Binding<Swift.String>, neighbours: (pre: Swift.Bool, next: Swift.Bool), font: SwiftUICore.Font = .system(.body, design: .default)) -> some SwiftUICore.View
  
}
@_Concurrency.MainActor @preconcurrency public struct ChatBubble : SwiftUICore.View, Swift.Equatable, Swift.Identifiable {
  @_Concurrency.MainActor @preconcurrency public var id: Swift.String {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static func == (lhs: FlomniChat.ChatBubble, rhs: FlomniChat.ChatBubble) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat0B6BubbleV4bodyQrvp", 0) __
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
}
public struct QuickPreviewKey : SwiftUICore.EnvironmentKey {
  public static var defaultValue: Foundation.URL?
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Value = Foundation.URL?
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var quickPreview: SwiftUICore.Binding<Foundation.URL?> {
    get
    set
  }
  #else
  public var quickPreview: SwiftUICore.Binding<Foundation.URL?> {
    get
    set
  }
  #endif
}
extension AVFoundation.AVPlayer : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
extension AVFoundation.AVAsset : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
extension Foundation.NSItemProvider : @unchecked Swift.Sendable {
}

public protocol ChannelListHeaderViewModifier : SwiftUICore.ViewModifier {
  var title: Swift.String { get }
}
@_Concurrency.MainActor @preconcurrency public struct DefaultChatChannelListHeader : SwiftUI.ToolbarContent {
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String
  @_Concurrency.MainActor @preconcurrency public init(title: Swift.String)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.ToolbarContent {
    get
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat07DefaultB17ChannelListHeaderV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct DefaultChannelListHeaderModifier : FlomniChat.ChannelListHeaderViewModifier {
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String
  @_Concurrency.MainActor @preconcurrency public init(title: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func body(content: FlomniChat.DefaultChannelListHeaderModifier.Content) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat32DefaultChannelListHeaderModifierV4body7contentQr7SwiftUI05_ViewG8_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct ChannelListToolbar : FlomniChat.ChannelListHeaderViewModifier {
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String
  @_Concurrency.MainActor @preconcurrency public var placement: SwiftUI.ToolbarItemPlacement
  @_Concurrency.MainActor @preconcurrency public var toolbarContent: () -> SwiftUICore.AnyView
  @_Concurrency.MainActor @preconcurrency public init(@SwiftUICore.ViewBuilder toolbarContent: @escaping () -> some View)
  @_Concurrency.MainActor @preconcurrency public func body(content: FlomniChat.ChannelListToolbar.Content) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat18ChannelListToolbarV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct FlomniContentView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(theme: FlomniChat.ChatTheme, route _: FlomniChat.NBNavigationPath = .init(), content: @escaping () -> some View)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat0A11ContentViewV4bodyQrvp", 0) __
}
extension FlomniChat.FlomniContentView {
  @_Concurrency.MainActor @preconcurrency public struct SessionRow : SwiftUICore.View, Swift.Equatable {
    @_Concurrency.MainActor @preconcurrency public static func == (lhs: FlomniChat.FlomniContentView.SessionRow, rhs: FlomniChat.FlomniContentView.SessionRow) -> Swift.Bool
    @_Concurrency.MainActor @preconcurrency public init(_ session: FlomniChat.Session)
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat0A11ContentViewV10SessionRowV4bodyQrvp", 0) __
  }
  @_Concurrency.MainActor @preconcurrency public static func routeEmptyView() -> SwiftUICore.AnyView
  @_Concurrency.MainActor @preconcurrency public func searchEmptyView(for query: Swift.String) -> FlomniChat.ContentUnavailableView<SwiftUICore.EmptyView>
  @_Concurrency.MainActor @preconcurrency public var emptySessions: some SwiftUICore.View {
    get
  }
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillLayoutSubviews()
}

@_Concurrency.MainActor @preconcurrency public struct ColorPaletteTab : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10FlomniChat15ColorPaletteTabV4bodyQrvp", 0) __
}
public typealias ChannelID = Swift.AnyHashable
public typealias FlomniChatList = FlomniChat.FlomniContentView
public typealias NotificationsList = FlomniChat.LocalNotificationList
public typealias NotificationEditor = FlomniChat.LocalNotificationEditor
public class ChatModule : FlomniChat.Observable {
  public var description: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static var current: FlomniChat.ChatModule? {
    get
  }
  #else
  public static var current: FlomniChat.ChatModule? {
    get
  }
  #endif
  public var theme: FlomniChat.ChatTheme
  public var notificationCenter: FlomniChat.NotificationsHandler {
    get
    set
  }
  public var sessions: FlomniChat.Sessions {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var appSettings: FlomniChat.WidgetConfig? {
    get
  }
  #else
  public var appSettings: FlomniChat.WidgetConfig? {
    get
  }
  #endif
  convenience public init(companyID: Swift.String, appGroup: Swift.String, contour: FlomniChat.Contour, userId: Swift.String, visitorAttributes visitor: Swift.String, theme: FlomniChat.ChatTheme = ChatTheme.default)
  public init(companyID: Swift.String, appGroup: Swift.String, baseURL: FlomniChat.BaseURL, contour: FlomniChat.Contour, userId: Swift.String, visitorAttributes visitor: Swift.String, theme: FlomniChat.ChatTheme = ChatTheme.default)
  public static func Content(theme: FlomniChat.ChatTheme, content: @escaping () -> some View) -> some SwiftUICore.View
  
  public static func DebugTabView() -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension FlomniChat.ChatModule {
  public static var contour: FlomniChat.Contour {
    get
  }
  public static var companyID: Swift.String {
    get
  }
  public static var userId: Swift.String {
    get
  }
  public static var visitorAttributes: Swift.String {
    get
  }
  public static var applicationGroupIdentifier: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static var devicePushId: Swift.String? {
    get
  }
  #else
  public static var devicePushId: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.TaskLocal @_projectedValueProperty($receivedNotification) public static var receivedNotification: FlomniChat.FlomniNotification? {
    get
  }
  #else
  @_Concurrency.TaskLocal @_projectedValueProperty($receivedNotification) public static var receivedNotification: FlomniChat.FlomniNotification? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static var $receivedNotification: _Concurrency.TaskLocal<FlomniChat.FlomniNotification?> {
    get
    @available(*, unavailable, message: "use '$myTaskLocal.withValue(_:do:)' instead")
    @available(iOS, introduced: 13.0, message: "use '$myTaskLocal.withValue(_:do:)' instead")
    @available(tvOS, introduced: 13.0, message: "use '$myTaskLocal.withValue(_:do:)' instead")
    @available(watchOS, introduced: 6.0, message: "use '$myTaskLocal.withValue(_:do:)' instead")
    @available(macOS, introduced: 10.15, message: "use '$myTaskLocal.withValue(_:do:)' instead")
    set
  }
  #else
  public static var $receivedNotification: _Concurrency.TaskLocal<FlomniChat.FlomniNotification?> {
    get
    @available(*, unavailable, message: "use '$myTaskLocal.withValue(_:do:)' instead")
    @available(iOS, introduced: 13.0, message: "use '$myTaskLocal.withValue(_:do:)' instead")
    @available(tvOS, introduced: 13.0, message: "use '$myTaskLocal.withValue(_:do:)' instead")
    @available(watchOS, introduced: 6.0, message: "use '$myTaskLocal.withValue(_:do:)' instead")
    @available(macOS, introduced: 10.15, message: "use '$myTaskLocal.withValue(_:do:)' instead")
    set
  }
  #endif
}
public struct ChatModuleProvider : SwiftUICore.EnvironmentKey {
  public static var defaultValue: FlomniChat.ChatModule? {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Value = FlomniChat.ChatModule?
}
extension FlomniChat.ChatModule {
  public func didReceiveRemoteNotification(didReceiveRemoteNotification body: [Swift.AnyHashable : Any], fetchCompletionHandler completion: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void)
  public func didRegisterForRemoteNotifications(with deviceToken: Foundation.Data)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func addDevice(_ pushDevice: FlomniChat.PushDevice, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  #else
  public func addDevice(_ pushDevice: FlomniChat.PushDevice, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  #endif
}
@_inheritsConvenienceInitializers @objc(ChatMessageEntity) public class ChatMessageEntity : CoreData.NSManagedObject {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  #else
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  #endif
  @objc deinit
}
extension FlomniChat.ChatMessageEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FlomniChat.ChatMessageEntity>
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var attachments: Foundation.Data? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var attachments: Foundation.Data? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var buttons: Foundation.Data? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var buttons: Foundation.Data? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var changedStatusAt: Foundation.Date? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var changedStatusAt: Foundation.Date? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var date: Foundation.Date? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var date: Foundation.Date? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var event: Foundation.Data? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var event: Foundation.Data? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var mid: Swift.String? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var mid: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var status: Swift.String? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var status: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var text: Swift.String? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var text: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var seession: Foundation.NSSet? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var seession: Foundation.NSSet? {
    @objc get
    @objc set
  }
  #endif
}
extension FlomniChat.ChatMessageEntity {
  @objc(addSeessionObject:) @NSManaged dynamic public func addToSeession(_ value: FlomniChat.SessionEntity)
  @objc(removeSeessionObject:) @NSManaged dynamic public func removeFromSeession(_ value: FlomniChat.SessionEntity)
  @objc(addSeession:) @NSManaged dynamic public func addToSeession(_ values: Foundation.NSSet)
  @objc(removeSeession:) @NSManaged dynamic public func removeFromSeession(_ values: Foundation.NSSet)
}
extension FlomniChat.ChatMessageEntity : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
@objc @_inheritsConvenienceInitializers public class FlomniNotificationEntity : CoreData.NSManagedObject {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  #else
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  #endif
  @objc deinit
}
extension FlomniChat.FlomniNotificationEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FlomniChat.FlomniNotificationEntity>
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var aps: Foundation.Data? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var aps: Foundation.Data? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var flomni: Foundation.Data? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var flomni: Foundation.Data? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var sessionID: Swift.String? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var sessionID: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var timestamp: Foundation.Date? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var timestamp: Foundation.Date? {
    @objc get
    @objc set
  }
  #endif
}
extension FlomniChat.FlomniNotificationEntity : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String?
}
@_inheritsConvenienceInitializers @objc(SessionEntity) public class SessionEntity : CoreData.NSManagedObject {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  #else
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  #endif
  @objc deinit
}
extension FlomniChat.SessionEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FlomniChat.SessionEntity>
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var header: Swift.String? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var header: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var icon: Swift.String? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var icon: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var lastMessageTimestamp: Foundation.Date? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var lastMessageTimestamp: Foundation.Date? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var message: Foundation.Data? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var message: Foundation.Data? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var subheader: Swift.String? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var subheader: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var threadId: Swift.String? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var threadId: Swift.String? {
    @objc get
    @objc set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc @NSManaged dynamic public var messages: FlomniChat.ChatMessageEntity? {
    @objc get
    @objc set
  }
  #else
  @objc @NSManaged dynamic public var messages: FlomniChat.ChatMessageEntity? {
    @objc get
    @objc set
  }
  #endif
}
extension FlomniChat.SessionEntity : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension FlomniChat.InjectedObject : Swift.Sendable {}
extension FlomniChat.FactoryResetOptions : Swift.Equatable {}
extension FlomniChat.FactoryResetOptions : Swift.Hashable {}
extension FlomniChat.JSONError : Swift.Equatable {}
extension FlomniChat.JSONError : Swift.Hashable {}
extension FlomniChat.JSONError : Swift.RawRepresentable {}
extension FlomniChat.JSON : Swift.Identifiable {}
extension FlomniChat.JSON : Swift.Hashable {}
extension FlomniChat.JSON : FlomniChat.SocketData {}
extension FlomniChat.JSON.`Type` : Swift.Equatable {}
extension FlomniChat.JSON.`Type` : Swift.Hashable {}
extension FlomniChat.JSON.`Type` : Swift.RawRepresentable {}
extension FlomniChat.JSON.writingOptionsKeys : Swift.Equatable {}
extension FlomniChat.JSON.writingOptionsKeys : Swift.Hashable {}
extension FlomniChat.Style : Swift.Equatable {}
extension FlomniChat.Style : Swift.Hashable {}
extension FlomniChat.ColorPickerBar : Swift.Sendable {}
@available(iOS 9.0, macOS 10.11, watchOS 2.0, tvOS 9.0, *)
extension FlomniChat.CompressionAlgorithm : Swift.Equatable {}
@available(iOS 9.0, macOS 10.11, watchOS 2.0, tvOS 9.0, *)
extension FlomniChat.CompressionAlgorithm : Swift.Hashable {}
extension SwiftUI.Button.StandardType : Swift.Equatable {}
extension SwiftUI.Button.StandardType : Swift.Hashable {}
extension SwiftUI.Button.StandardType : Swift.RawRepresentable {}
extension FlomniChat.ListButtonStyle : Swift.Sendable {}
extension FlomniChat.RefreshButtonStyle : Swift.Sendable {}
extension FlomniChat.DataUnits : Swift.Equatable {}
extension FlomniChat.DataUnits : Swift.Hashable {}
extension FlomniChat.DataUnits : Swift.RawRepresentable {}
extension FlomniChat.AudioFeedback : Swift.Sendable {}
extension FlomniChat.AudioPlayer : Swift.Sendable {}
extension FlomniChat.NotificationStyle : Swift.Equatable {}
extension FlomniChat.NotificationStyle : Swift.Hashable {}
extension FlomniChat.NotificationStyle : Swift.RawRepresentable {}
extension FlomniChat.ImpactStyle : Swift.Equatable {}
extension FlomniChat.ImpactStyle : Swift.Hashable {}
extension FlomniChat.ImpactStyle : Swift.RawRepresentable {}
extension FlomniChat.FittingGeometryReader : Swift.Sendable {}
extension FlomniChat.LoggerView : Swift.Sendable {}
extension FlomniChat.SwiftUILogger.Level : Swift.Equatable {}
extension FlomniChat.SwiftUILogger.Level : Swift.Hashable {}
extension FlomniChat.SwiftUILogger.Level : Swift.RawRepresentable {}
extension FlomniChat.DestinationBuilderModifier : Swift.Sendable {}
extension FlomniChat.DestinationBuilderView : Swift.Sendable {}
extension FlomniChat.LocalDestinationBuilderModifier : Swift.Sendable {}
extension FlomniChat.Navigator : Swift.Sendable {}
@available(iOS, deprecated: 16.0, message: "Use SwiftUI's Navigation API beyond iOS 15")
extension FlomniChat.NBNavigationLink : Swift.Sendable {}
@available(iOS, deprecated: 16.0, message: "Use SwiftUI's Navigation API beyond iOS 15")
extension FlomniChat.NBNavigationStack : Swift.Sendable {}
extension FlomniChat.Node : Swift.Sendable {}
extension FlomniChat.Router : Swift.Sendable {}
extension FlomniChat.UseNavigationStackPolicy : Swift.Equatable {}
extension FlomniChat.UseNavigationStackPolicy : Swift.Hashable {}
extension FlomniChat.NavigationLinkModifier : Swift.Sendable {}
extension FlomniChat.PhotoPicker : Swift.Sendable {}
extension FlomniChat.AsyncButton : Swift.Sendable {}
extension FlomniChat.CameraView : Swift.Sendable {}
extension FlomniChat.CameraError : Swift.Equatable {}
extension FlomniChat.CameraError : Swift.Hashable {}
@available(iOS, introduced: 14.0, deprecated: 16.0, renamed: "ContentUnavailableView")
extension FlomniChat.ContentUnavailableView : Swift.Sendable {}
extension FlomniChat.DroppableView : Swift.Sendable {}
extension FlomniChat.DroppableView.Thumbnail : Swift.Sendable {}
extension FlomniChat.DroppableView.Expanded : Swift.Sendable {}
extension FlomniChat.PositionObservingView : Swift.Sendable {}
extension FlomniChat.OffsetObservingScrollView : Swift.Sendable {}
extension FlomniChat.Popup : Swift.Sendable {}
extension FlomniChat.SizeCalculator : Swift.Sendable {}
extension FlomniChat.PresentationLink : Swift.Sendable {}
@available(iOS 15, tvOS 15, macOS 12, watchOS 8, *)
extension SwiftUICore.OpenURLAction.Result.SafariConfiguration.DismissStyle : Swift.Equatable {}
@available(iOS 15, tvOS 15, macOS 12, watchOS 8, *)
extension SwiftUICore.OpenURLAction.Result.SafariConfiguration.DismissStyle : Swift.Hashable {}
@available(iOS 15, tvOS 15, macOS 12, watchOS 8, *)
extension SwiftUICore.OpenURLAction.Result.SafariConfiguration.PresentationStyle : Swift.Equatable {}
@available(iOS 15, tvOS 15, macOS 12, watchOS 8, *)
extension SwiftUICore.OpenURLAction.Result.SafariConfiguration.PresentationStyle : Swift.Hashable {}
extension FlomniChat.SFSymbol : Swift.Equatable {}
extension FlomniChat.SFSymbol : Swift.Hashable {}
extension FlomniChat.SFSymbol : Swift.RawRepresentable {}
extension FlomniChat.SFSymbol : Swift.Sendable {}
extension FlomniChat.DismissKeyboardOnTappingOutside : Swift.Sendable {}
extension FlomniChat.FlowLayout : Swift.Sendable {}
extension FlomniChat.FlowLayout.Mode : Swift.Equatable {}
extension FlomniChat.FlowLayout.Mode : Swift.Hashable {}
extension FlomniChat.ColorError : Swift.Equatable {}
extension FlomniChat.ColorError : Swift.Hashable {}
extension FlomniChat.LazyView : Swift.Sendable {}
extension FlomniChat.MIMEType.Application : Swift.Equatable {}
extension FlomniChat.MIMEType.Application : Swift.Hashable {}
extension FlomniChat.MIMEType.Application : Swift.RawRepresentable {}
extension FlomniChat.MIMEType.Audio : Swift.Equatable {}
extension FlomniChat.MIMEType.Audio : Swift.Hashable {}
extension FlomniChat.MIMEType.Audio : Swift.RawRepresentable {}
extension FlomniChat.MIMEType.Image : Swift.Equatable {}
extension FlomniChat.MIMEType.Image : Swift.Hashable {}
extension FlomniChat.MIMEType.Image : Swift.RawRepresentable {}
extension FlomniChat.MIMEType.Text : Swift.Equatable {}
extension FlomniChat.MIMEType.Text : Swift.Hashable {}
extension FlomniChat.MIMEType.Text : Swift.RawRepresentable {}
extension FlomniChat.MIMEType.Video : Swift.Equatable {}
extension FlomniChat.MIMEType.Video : Swift.Hashable {}
extension FlomniChat.MIMEType.Video : Swift.RawRepresentable {}
extension FlomniChat.MIMEType.Archive : Swift.Equatable {}
extension FlomniChat.MIMEType.Archive : Swift.Hashable {}
extension FlomniChat.MIMEType.Archive : Swift.RawRepresentable {}
extension FlomniChat.NetworkStatus : Swift.Equatable {}
extension FlomniChat.NetworkStatus : Swift.Hashable {}
extension FlomniChat.NetworkStatus : Swift.RawRepresentable {}
extension FlomniChat.FlomniNotificationEditor : Swift.Sendable {}
extension FlomniChat.LocalNotificationEditor : Swift.Sendable {}
extension FlomniChat.Shimmer : Swift.Sendable {}
extension FlomniChat.MenuType : Swift.Equatable {}
extension FlomniChat.MenuType : Swift.Hashable {}
extension FlomniChat.SwipeRole : Swift.Equatable {}
extension FlomniChat.SwipeRole : Swift.Hashable {}
extension FlomniChat.FloatingTextField : Swift.Sendable {}
extension FlomniChat.TextFieldClearButton : Swift.Sendable {}
@available(iOS 15, macOS 12, *)
extension FlomniChat.TextSlider : Swift.Sendable {}
@available(iOS 15, macOS 12, *)
extension FlomniChat.TextSlider.Phase : Swift.Hashable {}
@available(iOS 16, tvOS 16, macOS 13, watchOS 9, *)
extension FlomniChat.VFlowStack : Swift.Sendable {}
extension FlomniChat.HTTPError : Swift.Equatable {}
extension FlomniChat.HTTPError : Swift.Hashable {}
extension FlomniChat.TokenManagerError : Swift.Equatable {}
extension FlomniChat.TokenManagerError : Swift.Hashable {}
extension FlomniChat.BaseURL.CodingKeys : Swift.Equatable {}
extension FlomniChat.BaseURL.CodingKeys : Swift.Hashable {}
extension FlomniChat.BaseURL.CodingKeys : Swift.RawRepresentable {}
extension FlomniChat.FlomniServerEvent : Swift.RawRepresentable {}
extension FlomniChat.LoadHistory : Swift.CustomStringConvertible {}
extension FlomniChat.LoadHistory : Swift.Identifiable {}
extension FlomniChat.LoadHistory : Swift.Hashable {}
extension FlomniChat.LoadHistory : Swift.Encodable {}
extension FlomniChat.LoadHistory : Swift.Decodable {}
extension FlomniChat.LoadHistory : FlomniChat.SocketData {}
extension FlomniChat.ChatEvent : Swift.CustomStringConvertible {}
extension FlomniChat.ChatEvent : Swift.Identifiable {}
extension FlomniChat.ChatEvent : Swift.Hashable {}
extension FlomniChat.ChatEvent : Swift.Encodable {}
extension FlomniChat.ChatEvent : Swift.Decodable {}
extension FlomniChat.ChatEvent : FlomniChat.SocketData {}
extension FlomniChat.SocketParsableError : Swift.Equatable {}
extension FlomniChat.SocketParsableError : Swift.Hashable {}
extension FlomniChat.SocketPacket.PacketType : Swift.Equatable {}
extension FlomniChat.SocketPacket.PacketType : Swift.Hashable {}
extension FlomniChat.SocketPacket.PacketType : Swift.RawRepresentable {}
extension FlomniChat.FoundationTransportError : Swift.Equatable {}
extension FlomniChat.FoundationTransportError : Swift.Hashable {}
extension FlomniChat.TCPTransportError : Swift.Equatable {}
extension FlomniChat.TCPTransportError : Swift.Hashable {}
extension FlomniChat.SecurityErrorCode : Swift.Equatable {}
extension FlomniChat.SecurityErrorCode : Swift.Hashable {}
extension FlomniChat.SecurityErrorCode : Swift.RawRepresentable {}
extension FlomniChat.FoundationSecurityError : Swift.Equatable {}
extension FlomniChat.FoundationSecurityError : Swift.Hashable {}
extension FlomniChat.CloseCode : Swift.Equatable {}
extension FlomniChat.CloseCode : Swift.Hashable {}
extension FlomniChat.CloseCode : Swift.RawRepresentable {}
extension FlomniChat.FrameOpCode : Swift.Equatable {}
extension FlomniChat.FrameOpCode : Swift.Hashable {}
extension FlomniChat.FrameOpCode : Swift.RawRepresentable {}
extension FlomniChat.ErrorType : Swift.Equatable {}
extension FlomniChat.ErrorType : Swift.Hashable {}
extension FlomniChat.SocketEnginePacketType : Swift.Equatable {}
extension FlomniChat.SocketEnginePacketType : Swift.Hashable {}
extension FlomniChat.SocketEnginePacketType : Swift.RawRepresentable {}
extension FlomniChat.SocketIOVersion : Swift.Equatable {}
extension FlomniChat.SocketIOVersion : Swift.Hashable {}
extension FlomniChat.SocketIOVersion : Swift.RawRepresentable {}
extension FlomniChat.SocketIOClientOption : Swift.Equatable {}
extension FlomniChat.SocketIOClientOption : Swift.CustomStringConvertible {}
extension FlomniChat.SocketClientEvent : Swift.Equatable {}
extension FlomniChat.SocketClientEvent : Swift.Hashable {}
extension FlomniChat.SocketClientEvent : Swift.RawRepresentable {}
extension FlomniChat.SocketIOStatus : Swift.Equatable {}
extension FlomniChat.SocketIOStatus : Swift.Hashable {}
extension FlomniChat.SocketIOStatus : Swift.RawRepresentable {}
extension FlomniChat.SocketAckStatus : Swift.Equatable {}
extension FlomniChat.SocketAckStatus : Swift.Hashable {}
extension FlomniChat.SocketAckStatus : Swift.RawRepresentable {}
extension FlomniChat.EnvironmentStore.Properties.Environments : Swift.Equatable {}
extension FlomniChat.EnvironmentStore.Properties.Environments : Swift.Hashable {}
extension FlomniChat.DisclosureDump : Swift.Sendable {}
extension FlomniChat.SUILogScope : Swift.Equatable {}
extension FlomniChat.SUILogScope : Swift.Hashable {}
extension FlomniChat.SUILogScope : Swift.RawRepresentable {}
extension FlomniChat.TerminalTab : Swift.Sendable {}
extension FlomniChat.SUILogTrace : Swift.Sendable {}
extension FlomniChat.ChatBubble : Swift.Sendable {}
extension FlomniChat.DefaultChatChannelListHeader : Swift.Sendable {}
extension FlomniChat.DefaultChannelListHeaderModifier : Swift.Sendable {}
extension FlomniChat.ChannelListToolbar : Swift.Sendable {}
extension FlomniChat.FlomniContentView : Swift.Sendable {}
extension FlomniChat.FlomniContentView.SessionRow : Swift.Sendable {}
extension FlomniChat.ColorPaletteTab : Swift.Sendable {}
